{
    "$schema": "http://json.schemastore.org/web-types",
    "name": "paper-elements-web-types",
    "version": "0.1.2",
    "framework": "@polymer/polymer",
    "default-icon": "icon/polymer.png",
    "description-markup": "markdown",
    "contributions": {
        "html": {
            "elements": [
                {
                    "name": "app-box",
                    "description": "app-box is a container element that can have scroll effects - visual effects\nbased on scroll position. For example, the parallax effect can be used to move\nan image at a slower rate than the foreground.\n\n```html\n<app-box style=\"height: 100px;\" effects=\"parallax-background\">\n  <img slot=\"background\" src=\"picture.png\" style=\"width: 100%; height: 600px;\">\n</app-box>\n```\n\nNotice the `background` attribute in the `img` element; this attribute specifies\nthat that image is used as the background. By adding the background to the light\ndom, you can compose backgrounds that can change dynamically. Alternatively, the\nmixin `--app-box-background-front-layer` allows to style the background. For\nexample:\n\n```css\n  .parallaxAppBox {\n    --app-box-background-front-layer: {\n      background-image: url(picture.png);\n    };\n  }\n```\n\nFinally, app-box can have content inside. For example:\n\n```html\n<app-box effects=\"parallax-background\">\n  <h2>Sub title</h2>\n</app-box>\n```\n\n#### Importing the effects\n\nTo use the scroll effects, you must explicitly import them in addition to\n`app-box`:\n\n```js\nimport '@polymer/app-layout/app-scroll-effects/app-scroll-effects.js';\n```\n\n#### List of effects\n\n**parallax-background**\nA simple parallax effect that vertically translates the backgrounds based on a\nfraction of the scroll position. For example:\n\n```css\napp-header {\n  --app-header-background-front-layer: {\n    background-image: url(...);\n  };\n}\n```\n```html\n<app-header style=\"height: 300px;\" effects=\"parallax-background\">\n  <app-toolbar>App name</app-toolbar>\n</app-header>\n```\n\nThe fraction determines how far the background moves relative to the scroll\nposition. This value can be assigned via the `scalar` config value and it is\ntypically a value between 0 and 1 inclusive. If `scalar=0`, the background\ndoesn't move away from the header.\n\n## Styling\n\nMixin | Description | Default\n----------------|-------------|----------\n`--app-box-background-front-layer` | Applies to the front layer of the background | {}",
                    "source": {
                        "module": "@polymer/app-layout/app-box/app-box.d.ts",
                        "symbol": "AppBoxElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "_progress",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": "number",
                                    "required": true
                                },
                                "description": "The current scroll progress."
                            },
                            {
                                "name": "_parentResizable",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The closest ancestor element that implements `IronResizableBehavior`."
                            },
                            {
                                "name": "_notifyingDescendant",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True if this element is currently notifying its descendant elements of\nresize."
                            },
                            {
                                "name": "effects",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "A space-separated list of the effects names that will be triggered when\nthe user scrolls. e.g. `waterfall parallax-background` installs the\n`waterfall` and `parallax-background`."
                            },
                            {
                                "name": "effectsConfig",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "An object that configurates the effects installed via the `effects`\nproperty. e.g.\n```js\n element.effectsConfig = {\n  \"blend-background\": {\n    \"startsAt\": 0.5\n  }\n};\n```\nEvery effect has at least two config properties: `startsAt` and\n`endsAt`. These properties indicate when the event should start and end\nrespectively and relative to the overall element progress. So for\nexample, if `blend-background` starts at `0.5`, the effect will only\nstart once the current element reaches 0.5 of its progress. In this\ncontext, the progress is a value in the range of `[0, 1]` that\nindicates where this element is on the screen relative to the viewport."
                            },
                            {
                                "name": "disabled",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Disables CSS transitions and scroll effects on the element."
                            },
                            {
                                "name": "threshold",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Allows to set a `scrollTop` threshold. When greater than 0,\n`thresholdTriggered` is true only when the scroll target's `scrollTop`\nhas reached this value.\n\nFor example, if `threshold = 100`, `thresholdTriggered` is true when\nthe `scrollTop` is at least `100`."
                            },
                            {
                                "name": "thresholdTriggered",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True if the `scrollTop` threshold (set in `scrollTopThreshold`) has\nbeen reached."
                            },
                            {
                                "name": "_effectsRunFn",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "(Function",
                                        "null)[]",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "List of effects handlers that will take place during scroll."
                            },
                            {
                                "name": "_effects",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "(object",
                                        "null)[]",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "List of the effects definitions installed via the `effects` property."
                            },
                            {
                                "name": "_clampedScrollTop",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "The clamped value of `_scrollTop`."
                            },
                            {
                                "name": "scrollTarget",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "HTMLElement",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "Specifies the element that will handle the scroll event\non the behalf of the current element. This is typically a reference to an\nelement, but there are a few more posibilities:\n\n### Elements id\n\n```html\n<div id=\"scrollable-element\" style=\"overflow: auto;\">\n <x-element scroll-target=\"scrollable-element\">\n   <!-- Content-->\n </x-element>\n</div>\n```\nIn this case, the `scrollTarget` will point to the outer div element.\n\n### Document scrolling\n\nFor document scrolling, you can use the reserved word `document`:\n\n```html\n<x-element scroll-target=\"document\">\n  <!-- Content -->\n</x-element>\n```\n\n### Elements reference\n\n```js\nappHeader.scrollTarget = document.querySelector('#scrollable-element');\n```"
                            },
                            {
                                "name": "_shouldHaveListener",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": "boolean",
                                    "required": true
                                },
                                "description": "True if the event listener should be installed."
                            },
                            {
                                "name": "_defaultScrollTarget",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "The default scroll target. Consumers of this behavior may want to customize\nthe default scroll target."
                            },
                            {
                                "name": "_doc",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "Shortcut for the document element"
                            },
                            {
                                "name": "_scrollTop",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "Gets the number of pixels that the content of an element is scrolled\nupward."
                            },
                            {
                                "name": "_scrollLeft",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "Gets the number of pixels that the content of an element is scrolled to the\nleft."
                            },
                            {
                                "name": "_scrollTargetWidth",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "Gets the width of the scroll target."
                            },
                            {
                                "name": "_scrollTargetHeight",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "Gets the height of the scroll target."
                            }
                        ]
                    }
                },
                {
                    "name": "app-drawer-layout",
                    "description": "app-drawer-layout is a wrapper element that positions an app-drawer and other\ncontent. When the viewport width is smaller than `responsiveWidth`, this element\nchanges to narrow layout. In narrow layout, the drawer will be stacked on top of\nthe main content. The drawer will slide in/out to hide/reveal the main content.\n\nBy default the drawer is aligned to the start, which is left in LTR layouts:\n\n```html\n<app-drawer-layout>\n  <app-drawer slot=\"drawer\">\n    drawer content\n  </app-drawer>\n  <div>\n    main content\n  </div>\n</app-drawer-layout>\n```\n\nAlign the drawer at the end:\n\n```html\n<app-drawer-layout>\n  <app-drawer slot=\"drawer\" align=\"end\">\n     drawer content\n  </app-drawer>\n  <div>\n    main content\n  </div>\n</app-drawer-layout>\n```\n\nWith an app-header-layout:\n\n```html\n<app-drawer-layout>\n  <app-drawer slot=\"drawer\">\n    drawer-content\n  </app-drawer>\n  <app-header-layout>\n    <app-header slot=\"header\">\n      <app-toolbar>\n        <div main-title>App name</div>\n      </app-toolbar>\n    </app-header>\n\n    main content\n\n  </app-header-layout>\n</app-drawer-layout>\n```\n\nAdd the `drawer-toggle` attribute to elements inside `app-drawer-layout` that\ntoggle the drawer on click events:\n\n```html\n<app-drawer-layout>\n  <app-drawer slot=\"drawer\">\n    drawer-content\n  </app-drawer>\n  <app-header-layout>\n    <app-header slot=\"header\">\n      <app-toolbar>\n        <paper-icon-button icon=\"menu\" drawer-toggle></paper-icon-button>\n        <div main-title>App name</div>\n      </app-toolbar>\n    </app-header>\n\n    main content\n\n  </app-header-layout>\n</app-drawer-layout>\n```\n\n*NOTE:** With app-layout 2.0, the `drawer-toggle` element needs to be manually\nhidden when app-drawer-layout is not in narrow layout. To add this, add the\nfollowing CSS rule where app-drawer-layout is used:\n\n```css\napp-drawer-layout:not([narrow]) [drawer-toggle] {\n  display: none;\n}\n```\n\nAdd the `fullbleed` attribute to app-drawer-layout to make it fit the size of\nits container:\n\n```html\n<app-drawer-layout fullbleed>\n  <app-drawer slot=\"drawer\">\n     drawer content\n  </app-drawer>\n  <div>\n    main content\n  </div>\n</app-drawer-layout>\n```\n\n### Styling\n\nCustom property                          | Description                          | Default\n-----------------------------------------|--------------------------------------|---------\n`--app-drawer-width`                     | Width of the drawer                  | 256px\n`--app-drawer-layout-content-transition` | Transition for the content container | none\n\n*NOTE:** If you use <app-drawer> with <app-drawer-layout> and specify a value\nfor\n`--app-drawer-width`, that value must be accessible by both elements. This can\nbe done by defining the value on the `:host` that contains <app-drawer-layout>\n(or `html` if outside a shadow root):\n\n```css\n:host {\n  --app-drawer-width: 300px;\n}\n```",
                    "source": {
                        "module": "@polymer/app-layout/app-drawer-layout/app-drawer-layout.d.ts",
                        "symbol": "AppDrawerLayoutElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "forceNarrow",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, ignore `responsiveWidth` setting and force the narrow layout."
                            },
                            {
                                "name": "responsiveWidth",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If the viewport's width is smaller than this value, the panel will change\nto narrow layout. In the mode the drawer will be closed."
                            },
                            {
                                "name": "narrow",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Returns true if it is in narrow layout. This is useful if you need to\nshow/hide elements based on the layout."
                            },
                            {
                                "name": "openedWhenNarrow",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the drawer will initially be opened when in narrow layout mode."
                            },
                            {
                                "name": "_drawerPosition",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "drawer",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "A reference to the app-drawer element."
                            },
                            {
                                "name": "_parentResizable",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The closest ancestor element that implements `IronResizableBehavior`."
                            },
                            {
                                "name": "_notifyingDescendant",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True if this element is currently notifying its descendant elements of\nresize."
                            }
                        ]
                    }
                },
                {
                    "name": "app-drawer",
                    "description": "app-drawer is a navigation drawer that can slide in from the left or right.\n\nExample:\n\nAlign the drawer at the start, which is left in LTR layouts (default):\n\n```html\n<app-drawer opened></app-drawer>\n```\n\nAlign the drawer at the end:\n\n```html\n<app-drawer align=\"end\" opened></app-drawer>\n```\n\nTo make the contents of the drawer scrollable, create a wrapper for the scroll\ncontent, and apply height and overflow styles to it.\n\n```html\n<app-drawer>\n  <div style=\"height: 100%; overflow: auto;\"></div>\n</app-drawer>\n```\n\n### Styling\n\nCustom property                  | Description                            | Default\n---------------------------------|----------------------------------------|--------------------\n`--app-drawer-width`             | Width of the drawer                    | 256px\n`--app-drawer-content-container` | Mixin for the drawer content container | {}\n`--app-drawer-scrim-background`  | Background for the scrim               | rgba(0, 0, 0, 0.5)\n\n*NOTE:** If you use `<app-drawer>` with `<app-drawer-layout>` and specify a\nvalue for\n`--app-drawer-width`, that value must be accessible by both elements. This can\nbe done by defining the value on the `:host` that contains `<app-drawer-layout>`\n(or `html` if outside a shadow root):\n\n```css\n:host {\n  --app-drawer-width: 300px;\n}\n```",
                    "source": {
                        "module": "@polymer/app-layout/app-drawer/app-drawer.d.ts",
                        "symbol": "AppDrawerElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "opened",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The opened state of the drawer."
                            },
                            {
                                "name": "persistent",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The drawer does not have a scrim and cannot be swiped close."
                            },
                            {
                                "name": "transitionDuration",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The transition duration of the drawer in milliseconds."
                            },
                            {
                                "name": "align",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The alignment of the drawer on the screen ('left', 'right', 'start' or\n'end'). 'start' computes to left and 'end' to right in LTR layout and\nvice versa in RTL layout."
                            },
                            {
                                "name": "position",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The computed, read-only position of the drawer on the screen ('left' or\n'right')."
                            },
                            {
                                "name": "swipeOpen",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Create an area at the edge of the screen to swipe open the drawer."
                            },
                            {
                                "name": "noFocusTrap",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Trap keyboard focus when the drawer is opened and not persistent."
                            },
                            {
                                "name": "disableSwipe",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Disables swiping on the drawer."
                            },
                            {
                                "name": "_translateOffset",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": "number",
                                    "required": true
                                }
                            },
                            {
                                "name": "_trackDetails",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": "null",
                                    "required": true
                                }
                            },
                            {
                                "name": "_drawerState",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": "number",
                                    "required": true
                                }
                            },
                            {
                                "name": "_boundEscKeydownHandler",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": "null",
                                    "required": true
                                }
                            },
                            {
                                "name": "_firstTabStop",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": "null",
                                    "required": true
                                }
                            },
                            {
                                "name": "_lastTabStop",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": "null",
                                    "required": true
                                }
                            },
                            {
                                "name": "_MIN_FLING_THRESHOLD",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": "number",
                                    "required": true
                                }
                            },
                            {
                                "name": "_MIN_TRANSITION_VELOCITY",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": "number",
                                    "required": true
                                }
                            },
                            {
                                "name": "_FLING_TIMING_FUNCTION",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": "string",
                                    "required": true
                                }
                            },
                            {
                                "name": "_FLING_INITIAL_SLOPE",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": "number",
                                    "required": true
                                }
                            },
                            {
                                "name": "_DRAWER_STATE",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "object",
                                        "null"
                                    ],
                                    "required": true
                                }
                            }
                        ]
                    }
                },
                {
                    "name": "app-header-layout",
                    "description": "app-header-layout is a wrapper element that positions an app-header and other\ncontent. This element uses the document scroll by default, but it can also\ndefine its own scrolling region.\n\nUsing the document scroll:\n\n```html\n<app-header-layout>\n  <app-header slot=\"header\" fixed condenses effects=\"waterfall\">\n    <app-toolbar>\n      <div main-title>App name</div>\n    </app-toolbar>\n  </app-header>\n  <div>\n    main content\n  </div>\n</app-header-layout>\n```\n\nUsing an own scrolling region:\n\n```html\n<app-header-layout has-scrolling-region style=\"width: 300px; height: 400px;\">\n  <app-header slot=\"header\" fixed condenses effects=\"waterfall\">\n    <app-toolbar>\n      <div main-title>App name</div>\n    </app-toolbar>\n  </app-header>\n  <div>\n    main content\n  </div>\n</app-header-layout>\n```\n\nAdd the `fullbleed` attribute to app-header-layout to make it fit the size of\nits container:\n\n```html\n<app-header-layout fullbleed>\n ...\n</app-header-layout>\n```",
                    "source": {
                        "module": "@polymer/app-layout/app-header-layout/app-header-layout.d.ts",
                        "symbol": "AppHeaderLayoutElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "hasScrollingRegion",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the current element will have its own scrolling region.\nOtherwise, it will use the document scroll to control the header."
                            },
                            {
                                "name": "header",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "A reference to the app-header element."
                            },
                            {
                                "name": "_parentResizable",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The closest ancestor element that implements `IronResizableBehavior`."
                            },
                            {
                                "name": "_notifyingDescendant",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True if this element is currently notifying its descendant elements of\nresize."
                            }
                        ]
                    }
                },
                {
                    "name": "app-header",
                    "description": "app-header is container element for app-toolbars at the top of the screen that\ncan have scroll effects. By default, an app-header moves away from the viewport\nwhen scrolling down and if using `reveals`, the header slides back when\nscrolling back up. For example:\n\n```html\n<app-header reveals>\n  <app-toolbar>\n    <div main-title>App name</div>\n  </app-toolbar>\n</app-header>\n```\n\napp-header can also condense when scrolling down. To achieve this behavior, the\nheader must have a larger height than the `sticky` element in the light DOM. For\nexample:\n\n```html\n<app-header style=\"height: 96px;\" condenses fixed>\n  <app-toolbar style=\"height: 64px;\">\n    <div main-title>App name</div>\n  </app-toolbar>\n</app-header>\n```\n\nIn this case the header is initially `96px` tall, and it shrinks to `64px` when\nscrolling down. That is what is meant by \"condensing\".\n\n### Sticky element\n\nThe element that is positioned fixed to top of the header's `scrollTarget` when\na threshold is reached, similar to `position: sticky` in CSS. This element\n*must** be an immediate child of app-header. By default, the `sticky` element\nis the first `app-toolbar that is an immediate child of app-header.\n\n```html\n<app-header condenses>\n  <app-toolbar> Sticky element </app-toolbar>\n  <app-toolbar></app-toolbar>\n</app-header>\n```\n\n#### Customizing the sticky element\n\n```html\n<app-header condenses>\n  <app-toolbar></app-toolbar>\n  <app-toolbar sticky> Sticky element </app-toolbar>\n</app-header>\n```\n\n### Scroll target\n\nThe app-header's `scrollTarget` property allows to customize the scrollable\nelement to which the header responds when the user scrolls. By default,\napp-header uses the document as the scroll target, but you can customize this\nproperty by setting the id of the element, e.g.\n\n```html\n<div id=\"scrollingRegion\" style=\"overflow-y: auto;\">\n  <app-header scroll-target=\"scrollingRegion\">\n  </app-header>\n</div>\n```\n\nIn this case, the `scrollTarget` property points to the outer div element.\nAlternatively, you can set this property programmatically:\n\n```js\nappHeader.scrollTarget = document.querySelector(\"#scrollingRegion\");\n```\n\n## Backgrounds\napp-header has two background layers that can be used for styling when the\nheader is condensed or when the scrollable element is scrolled to the top.\n\n## Scroll effects\n\nScroll effects are _optional_ visual effects applied in app-header based on\nscroll position. For example, The [Material Design scrolling\ntechniques](https://www.google.com/design/spec/patterns/scrolling-techniques.html)\nrecommends effects that can be installed via the `effects` property. e.g.\n\n```html\n<app-header effects=\"waterfall\">\n  <app-toolbar>App name</app-toolbar>\n</app-header>\n```\n\n#### Importing the effects\n\nTo use the scroll effects, you must explicitly import them in addition to\n`app-header`:\n\n```js\nimport '@polymer/app-layout/app-scroll-effects/app-scroll-effects.js';\n```\n\n#### List of effects\n\n**blend-background**\nFades in/out two background elements by applying CSS opacity based on scroll\nposition. You can use this effect to smoothly change the background color or\nimage of the header. For example, using the mixin\n`--app-header-background-rear-layer` lets you assign a different background when\nthe header is condensed:\n\n```css\napp-header {\n  background-color: red;\n  --app-header-background-rear-layer: {\n    /* The header is blue when condensed *\\/\n    background-color: blue;\n  };\n}\n```\n\n**fade-background**\nUpon scrolling past a threshold, this effect will trigger an opacity transition\nto fade in/out the backgrounds. Compared to the `blend-background` effect, this\neffect doesn't interpolate the opacity based on scroll position.\n\n\n**parallax-background**\nA simple parallax effect that vertically translates the backgrounds based on a\nfraction of the scroll position. For example:\n\n```css\napp-header {\n  --app-header-background-front-layer: {\n    background-image: url(...);\n  };\n}\n```\n```html\n<app-header style=\"height: 300px;\" effects=\"parallax-background\">\n  <app-toolbar>App name</app-toolbar>\n</app-header>\n```\n\nThe fraction determines how far the background moves relative to the scroll\nposition. This value can be assigned via the `scalar` config value and it is\ntypically a value between 0 and 1 inclusive. If `scalar=0`, the background\ndoesn't move away from the header.\n\n**resize-title**\nProgressively interpolates the size of the title from the element with the\n`main-title` attribute to the element with the `condensed-title` attribute as\nthe header condenses. For example:\n\n```html\n<app-header condenses reveals effects=\"resize-title\">\n  <app-toolbar>\n      <h4 condensed-title>App name</h4>\n  </app-toolbar>\n  <app-toolbar>\n      <h1 main-title>App name</h1>\n  </app-toolbar>\n</app-header>\n```\n\n**resize-snapped-title**\nUpon scrolling past a threshold, this effect fades in/out the titles using\nopacity transitions. Similarly to `resize-title`, the `main-title` and\n`condensed-title` elements must be placed in the light DOM.\n\n**waterfall**\nToggles the shadow property in app-header to create a sense of depth (as\nrecommended in the MD spec) between the header and the underneath content. You\ncan change the shadow by customizing the `--app-header-shadow` mixin. For\nexample:\n\n```css\napp-header {\n  --app-header-shadow: {\n    box-shadow: inset 0px 5px 2px -3px rgba(0, 0, 0, 0.2);\n  };\n}\n```\n\n```html\n<app-header condenses reveals effects=\"waterfall\">\n  <app-toolbar>\n      <h1 main-title>App name</h1>\n  </app-toolbar>\n</app-header>\n```\n\n**material**\nInstalls the waterfall, resize-title, blend-background and parallax-background\neffects.\n\n### Content attributes\n\nAttribute | Description         | Default\n----------|---------------------|----------------------------------------\n`sticky` | Element that remains at the top when the header condenses. | The first app-toolbar in the light DOM.\n\n\n## Styling\n\nMixin | Description | Default\n------|-------------|----------\n`--app-header-background-front-layer` | Applies to the front layer of the background. | {}\n`--app-header-background-rear-layer` | Applies to the rear layer of the background. | {}\n`--app-header-shadow` | Applies to the shadow. | {}",
                    "source": {
                        "module": "@polymer/app-layout/app-header/app-header.d.ts",
                        "symbol": "AppHeaderElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "condenses",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the header will automatically collapse when scrolling down.\nThat is, the `sticky` element remains visible when the header is fully\ncondensed whereas the rest of the elements will collapse below `sticky`\nelement.\n\nBy default, the `sticky` element is the first toolbar in the light DOM:\n\n```html\n<app-header condenses>\n  <app-toolbar>This toolbar remains on top</app-toolbar>\n  <app-toolbar></app-toolbar>\n  <app-toolbar></app-toolbar>\n</app-header>\n```\n\nAdditionally, you can specify which toolbar or element remains visible in\ncondensed mode by adding the `sticky` attribute to that element. For\nexample: if we want the last toolbar to remain visible, we can add the\n`sticky` attribute to it.\n\n```html\n<app-header condenses>\n  <app-toolbar></app-toolbar>\n  <app-toolbar></app-toolbar>\n  <app-toolbar sticky>This toolbar remains on top</app-toolbar>\n</app-header>\n```\n\nNote the `sticky` element must be a direct child of `app-header`."
                            },
                            {
                                "name": "fixed",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Mantains the header fixed at the top so it never moves away."
                            },
                            {
                                "name": "reveals",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Slides back the header when scrolling back up."
                            },
                            {
                                "name": "shadow",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Displays a shadow below the header."
                            },
                            {
                                "name": "_height",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": "number",
                                    "required": true
                                },
                                "description": "A cached offsetHeight of the current element."
                            },
                            {
                                "name": "_dHeight",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": "number",
                                    "required": true
                                },
                                "description": "The distance in pixels the header will be translated to when scrolling."
                            },
                            {
                                "name": "_stickyElTop",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": "number",
                                    "required": true
                                },
                                "description": "The offsetTop of `_stickyEl`"
                            },
                            {
                                "name": "_stickyElRef",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "HTMLElement",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "A reference to the element that remains visible when the header condenses."
                            },
                            {
                                "name": "_top",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": "number",
                                    "required": true
                                },
                                "description": "The header's top value used for the `transformY`"
                            },
                            {
                                "name": "_progress",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": "number",
                                    "required": true
                                },
                                "description": "The current scroll progress."
                            },
                            {
                                "name": "_wasScrollingDown",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": "boolean",
                                    "required": true
                                }
                            },
                            {
                                "name": "_initScrollTop",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": "number",
                                    "required": true
                                }
                            },
                            {
                                "name": "_initTimestamp",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": "number",
                                    "required": true
                                }
                            },
                            {
                                "name": "_lastTimestamp",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": "number",
                                    "required": true
                                }
                            },
                            {
                                "name": "_lastScrollTop",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": "number",
                                    "required": true
                                }
                            },
                            {
                                "name": "_maxHeaderTop",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "The distance the header is allowed to move away."
                            },
                            {
                                "name": "_stickyEl",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "HTMLElement",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "Returns a reference to the sticky element."
                            },
                            {
                                "name": "_parentResizable",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The closest ancestor element that implements `IronResizableBehavior`."
                            },
                            {
                                "name": "_notifyingDescendant",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True if this element is currently notifying its descendant elements of\nresize."
                            },
                            {
                                "name": "effects",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "A space-separated list of the effects names that will be triggered when\nthe user scrolls. e.g. `waterfall parallax-background` installs the\n`waterfall` and `parallax-background`."
                            },
                            {
                                "name": "effectsConfig",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "An object that configurates the effects installed via the `effects`\nproperty. e.g.\n```js\n element.effectsConfig = {\n  \"blend-background\": {\n    \"startsAt\": 0.5\n  }\n};\n```\nEvery effect has at least two config properties: `startsAt` and\n`endsAt`. These properties indicate when the event should start and end\nrespectively and relative to the overall element progress. So for\nexample, if `blend-background` starts at `0.5`, the effect will only\nstart once the current element reaches 0.5 of its progress. In this\ncontext, the progress is a value in the range of `[0, 1]` that\nindicates where this element is on the screen relative to the viewport."
                            },
                            {
                                "name": "disabled",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Disables CSS transitions and scroll effects on the element."
                            },
                            {
                                "name": "threshold",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Allows to set a `scrollTop` threshold. When greater than 0,\n`thresholdTriggered` is true only when the scroll target's `scrollTop`\nhas reached this value.\n\nFor example, if `threshold = 100`, `thresholdTriggered` is true when\nthe `scrollTop` is at least `100`."
                            },
                            {
                                "name": "thresholdTriggered",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True if the `scrollTop` threshold (set in `scrollTopThreshold`) has\nbeen reached."
                            },
                            {
                                "name": "_effectsRunFn",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "(Function",
                                        "null)[]",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "List of effects handlers that will take place during scroll."
                            },
                            {
                                "name": "_effects",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "(object",
                                        "null)[]",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "List of the effects definitions installed via the `effects` property."
                            },
                            {
                                "name": "_clampedScrollTop",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "The clamped value of `_scrollTop`."
                            },
                            {
                                "name": "scrollTarget",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "HTMLElement",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "Specifies the element that will handle the scroll event\non the behalf of the current element. This is typically a reference to an\nelement, but there are a few more posibilities:\n\n### Elements id\n\n```html\n<div id=\"scrollable-element\" style=\"overflow: auto;\">\n <x-element scroll-target=\"scrollable-element\">\n   <!-- Content-->\n </x-element>\n</div>\n```\nIn this case, the `scrollTarget` will point to the outer div element.\n\n### Document scrolling\n\nFor document scrolling, you can use the reserved word `document`:\n\n```html\n<x-element scroll-target=\"document\">\n  <!-- Content -->\n</x-element>\n```\n\n### Elements reference\n\n```js\nappHeader.scrollTarget = document.querySelector('#scrollable-element');\n```"
                            },
                            {
                                "name": "_shouldHaveListener",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": "boolean",
                                    "required": true
                                },
                                "description": "True if the event listener should be installed."
                            },
                            {
                                "name": "_defaultScrollTarget",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "The default scroll target. Consumers of this behavior may want to customize\nthe default scroll target."
                            },
                            {
                                "name": "_doc",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "Shortcut for the document element"
                            },
                            {
                                "name": "_scrollTop",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "Gets the number of pixels that the content of an element is scrolled\nupward."
                            },
                            {
                                "name": "_scrollLeft",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "Gets the number of pixels that the content of an element is scrolled to the\nleft."
                            },
                            {
                                "name": "_scrollTargetWidth",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "Gets the width of the scroll target."
                            },
                            {
                                "name": "_scrollTargetHeight",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "Gets the height of the scroll target."
                            }
                        ]
                    }
                },
                {
                    "name": "app-toolbar",
                    "description": "app-toolbar is a horizontal toolbar containing items that can be used for\nlabel, navigation, search and actions.\n\n### Example\n\nAdd a title to the toolbar.\n\n```html\n<app-toolbar>\n  <div main-title>App name</div>\n</app-toolbar>\n```\n\nAdd a button to the left and right side of the toolbar.\n\n```html\n<app-toolbar>\n  <paper-icon-button icon=\"menu\"></paper-icon-button>\n  <div main-title>App name</div>\n  <paper-icon-button icon=\"search\"></paper-icon-button>\n</app-toolbar>\n```\n\nYou can use the attributes `top-item` or `bottom-item` to completely fit an\nelement to the top or bottom of the toolbar respectively.\n\n### Content attributes\n\nAttribute            | Description\n---------------------|---------------------------------------------------------\n`main-title`         | The main title element.\n`condensed-title`    | The title element if used inside a condensed app-header.\n`spacer`             | Adds a left margin of `64px`.\n`bottom-item`        | Sticks the element to the bottom of the toolbar.\n`top-item`           | Sticks the element to the top of the toolbar.\n\n### Styling\n\nCustom property              | Description                  | Default\n-----------------------------|------------------------------|-----------------------\n`--app-toolbar-font-size`    | Toolbar font size            | 20px",
                    "source": {
                        "module": "@polymer/app-layout/app-toolbar/app-toolbar.d.ts",
                        "symbol": "AppToolbarElement"
                    }
                },
                {
                    "name": "app-location",
                    "description": "`app-location` is an element that provides synchronization between the\nbrowser location bar and the state of an app. When created, `app-location`\nelements will automatically watch the global location for changes. As changes\noccur, `app-location` produces and updates an object called `route`. This\n`route` object is suitable for passing into a `app-route`, and other similar\nelements.\n\nAn example of the public API of a route object that describes the URL\n`https://elements.polymer-project.org/elements/app-location`:\n\n    {\n      prefix: '',\n      path: '/elements/app-location'\n    }\n\nExample Usage:\n\n    <app-location route=\"{{route}}\"></app-location>\n    <app-route route=\"{{route}}\" pattern=\"/:page\" data=\"{{data}}\"></app-route>\n\nAs you can see above, the `app-location` element produces a `route` and that\nproperty is then bound into the `app-route` element. The bindings are two-\ndirectional, so when changes to the `route` object occur within `app-route`,\nthey automatically reflect back to the global location.\n\n### Hashes vs Paths\n\nBy default `app-location` routes using the pathname portion of the URL. This has\nbroad browser support but it does require cooperation of the backend server. An\n`app-location` can be configured to use the hash part of a URL instead using\nthe `use-hash-as-path` attribute, like so:\n\n    <app-location route=\"{{route}}\" use-hash-as-path></app-location>\n\n### Integrating with other routing code\n\nThere is no standard event that is fired when window.location is modified.\n`app-location` fires a `location-changed` event on `window` when it updates the\nlocation. It also listens for that same event, and re-reads the URL when it's\nfired. This makes it very easy to interop with other routing code.\n\nSo for example if you want to navigate to `/new_path` imperatively you could\ncall `window.location.pushState` or `window.location.replaceState` followed by\nfiring a `location-changed` event on `window`. i.e.\n\n    window.history.pushState({}, null, '/new_path');\n    window.dispatchEvent(new CustomEvent('location-changed'));",
                    "source": {
                        "module": "@polymer/app-route/app-location.d.ts",
                        "symbol": "AppLocationElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "useHashAsPath",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "In many scenarios, it is convenient to treat the `hash` as a stand-in\nalternative to the `path`. For example, if deploying an app to a static\nweb server (e.g., Github Pages) - where one does not have control over\nserver-side routing - it is usually a better experience to use the hash\nto represent paths through one's app.\n\nWhen this property is set to true, the `hash` will be used in place of\n\nthe `path` for generating a `route`."
                            },
                            {
                                "name": "urlSpaceRegex",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "RegExp",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "A regexp that defines the set of URLs that should be considered part\nof this web app.\n\nClicking on a link that matches this regex won't result in a full page\nnavigation, but will instead just update the URL state in place.\n\nThis regexp is given everything after the origin in an absolute\nURL. So to match just URLs that start with /search/ do:\n    url-space-regex=\"^/search/\""
                            },
                            {
                                "name": "_isReady",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Whether or not the ready function has been called."
                            },
                            {
                                "name": "dwellTime",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If the user was on a URL for less than `dwellTime` milliseconds, it\nwon't be added to the browser's history, but instead will be\nreplaced by the next entry.\n\nThis is to prevent large numbers of entries from clogging up the\nuser's browser history. Disable by setting to a negative number.\n\nSee `iron-location` for more information."
                            },
                            {
                                "name": "route",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "A model representing the deserialized path through the route tree, as\nwell as the current queryParams."
                            },
                            {
                                "name": "queryParams",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "A set of key/value pairs that are universally accessible to branches of\nthe route tree."
                            },
                            {
                                "name": "path",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The route path, which will be either the hash or the path, depending\non useHashAsPath."
                            }
                        ]
                    }
                },
                {
                    "name": "app-route-converter",
                    "description": "`app-route-converter` provides a means to convert a path and query\nparameters into a route object and vice versa. This produced route object\nis to be fed into route-consuming elements such as `app-route`.\n\n> n.b. This element is intended to be a primitive of the routing system and for\ncreating bespoke routing solutions from scratch. To simply include routing in\nan app, please refer to\n[app-location](https://github.com/PolymerElements/app-route/blob/master/app-location.html)\nand\n[app-route](https://github.com/PolymerElements/app-route/blob/master/app-route.html).\n\nAn example of a route object that describes\n`https://elements.polymer-project.org/elements/app-route-converter?foo=bar&baz=qux`\nand should be passed to other `app-route` elements:\n\n    {\n      prefix: '',\n      path: '/elements/app-route-converter',\n      __queryParams: {\n        foo: 'bar',\n        baz: 'qux'\n      }\n    }\n\n`__queryParams` is private to discourage directly data-binding to it. This is so\nthat routing elements like `app-route` can intermediate changes to the query\nparams and choose whether to propagate them upstream or not. `app-route` for\nexample will not propagate changes to its `queryParams` property if it is not\ncurrently active. A public queryParams object will also be produced in which you\nshould perform data-binding operations.\n\nExample Usage:\n\n    <iron-location path=\"{{path}}\" query=\"{{query}}\"></iron-location>\n    <iron-query-params\n        params-string=\"{{query}}\"\n        params-object=\"{{queryParams}}\">\n    </iron-query-params>\n    <app-route-converter\n        path=\"{{path}}\"\n        query-params=\"{{queryParams}}\"\n        route=\"{{route}}\">\n    </app-route-converter>\n    <app-route route='{{route}}' pattern='/:page' data='{{data}}'>\n    </app-route>\n\nThis is a simplified implementation of the `app-location` element. Here the\n`iron-location` produces a path and a query, the `iron-query-params` consumes\nthe query and produces a queryParams object, and the `app-route-converter`\nconsumes the path and the query params and converts it into a route which is in\nturn is consumed by the `app-route`.",
                    "source": {
                        "module": "@polymer/app-route/app-route-converter.d.ts",
                        "symbol": "AppRouteConverterElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "route",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "A model representing the deserialized path through the route tree, as\nwell as the current queryParams.\n\nA route object is the kernel of the routing system. It is intended to\nbe fed into consuming elements such as `app-route`."
                            },
                            {
                                "name": "queryParams",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "A set of key/value pairs that are universally accessible to branches of\nthe route tree."
                            },
                            {
                                "name": "path",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The serialized path through the route tree. This corresponds to the\n`window.location.pathname` value, and will update to reflect changes\nto that value."
                            }
                        ]
                    }
                },
                {
                    "name": "app-route",
                    "description": "`app-route` is an element that enables declarative, self-describing routing\nfor a web app.\n\nIn its typical usage, a `app-route` element consumes an object that describes\nsome state about the current route, via the `route` property. It then parses\nthat state using the `pattern` property, and produces two artifacts: some `data`\nrelated to the `route`, and a `tail` that contains the rest of the `route` that\ndid not match.\n\nHere is a basic example, when used with `app-location`:\n\n    <app-location route=\"{{route}}\"></app-location>\n    <app-route\n        route=\"{{route}}\"\n        pattern=\"/:page\"\n        data=\"{{data}}\"\n        tail=\"{{tail}}\">\n    </app-route>\n\nIn the above example, the `app-location` produces a `route` value. Then, the\n`route.path` property is matched by comparing it to the `pattern` property. If\nthe `pattern` property matches `route.path`, the `app-route` will set or update\nits `data` property with an object whose properties correspond to the parameters\nin `pattern`. So, in the above example, if `route.path` was `'/about'`, the\nvalue of `data` would be `{\"page\": \"about\"}`.\n\nThe `tail` property represents the remaining part of the route state after the\n`pattern` has been applied to a matching `route`.\n\nHere is another example, where `tail` is used:\n\n    <app-location route=\"{{route}}\"></app-location>\n    <app-route\n        route=\"{{route}}\"\n        pattern=\"/:page\"\n        data=\"{{routeData}}\"\n        tail=\"{{subroute}}\">\n    </app-route>\n    <app-route\n        route=\"{{subroute}}\"\n        pattern=\"/:id\"\n        data=\"{{subrouteData}}\">\n    </app-route>\n\nIn the above example, there are two `app-route` elements. The first\n`app-route` consumes a `route`. When the `route` is matched, the first\n`app-route` also produces `routeData` from its `data`, and `subroute` from\nits `tail`. The second `app-route` consumes the `subroute`, and when it\nmatches, it produces an object called `subrouteData` from its `data`.\n\nSo, when `route.path` is `'/about'`, the `routeData` object will look like\nthis: `{ page: 'about' }`\n\nAnd `subrouteData` will be null. However, if `route.path` changes to\n`'/article/123'`, the `routeData` object will look like this:\n`{ page: 'article' }`\n\nAnd the `subrouteData` will look like this: `{ id: '123' }`\n\n`app-route` is responsive to bi-directional changes to the `data` objects\nthey produce. So, if `routeData.page` changed from `'article'` to `'about'`,\nthe `app-route` will update `route.path`. This in-turn will update the\n`app-location`, and cause the global location bar to change its value.",
                    "source": {
                        "module": "@polymer/app-route/app-route.d.ts",
                        "symbol": "AppRouteElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "route",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The URL component managed by this element."
                            },
                            {
                                "name": "pattern",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The pattern of slash-separated segments to match `route.path` against.\n\nFor example the pattern \"/foo\" will match \"/foo\" or \"/foo/bar\"\nbut not \"/foobar\".\n\nPath segments like `/:named` are mapped to properties on the `data`\nobject."
                            },
                            {
                                "name": "data",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The parameterized values that are extracted from the route as\ndescribed by `pattern`."
                            },
                            {
                                "name": "autoActivate",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Auto activate route if path empty"
                            },
                            {
                                "name": "_queryParamsUpdating",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "queryParams",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "tail",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The part of `route.path` NOT consumed by `pattern`."
                            },
                            {
                                "name": "active",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Whether the current route is active. True if `route.path` matches the\n`pattern`, false otherwise."
                            },
                            {
                                "name": "_matched",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "string",
                                        "null"
                                    ],
                                    "required": true
                                }
                            }
                        ]
                    }
                },
                {
                    "name": "google-youtube",
                    "description": "This element supports a subset of the features of the google-youtube element\nv2.x.",
                    "source": {
                        "module": "@polymer/app-route/demo/youtube-demo/google-youtube.js",
                        "symbol": "GoogleYoutube"
                    },
                    "attributes": [
                        {
                            "name": "video-id",
                            "required": false,
                            "priority": "normal",
                            "value": {
                                "type": "string",
                                "required": true
                            }
                        },
                        {
                            "name": "state",
                            "required": false,
                            "priority": "normal",
                            "value": {
                                "type": "number",
                                "required": true
                            }
                        },
                        {
                            "name": "current-time",
                            "required": false,
                            "priority": "normal",
                            "value": {
                                "type": "number",
                                "required": true
                            }
                        },
                        {
                            "name": "is-ready",
                            "required": false,
                            "priority": "normal",
                            "value": {
                                "type": "boolean",
                                "required": false,
                                "default": "false"
                            }
                        },
                        {
                            "name": "duration",
                            "required": false,
                            "priority": "normal",
                            "value": {
                                "type": "number",
                                "required": true
                            }
                        },
                        {
                            "name": "__unready-commands",
                            "required": false,
                            "priority": "lowest",
                            "value": {
                                "type": "array",
                                "required": true,
                                "default": "[]"
                            }
                        },
                        {
                            "name": "__currenttime-interval",
                            "required": false,
                            "priority": "lowest",
                            "value": {
                                "type": "number",
                                "required": true
                            }
                        }
                    ],
                    "js": {
                        "properties": [
                            {
                                "name": "videoId",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "string",
                                    "required": true
                                }
                            },
                            {
                                "name": "state",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "number",
                                    "required": true
                                }
                            },
                            {
                                "name": "currentTime",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "number",
                                    "required": true
                                }
                            },
                            {
                                "name": "isReady",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "boolean",
                                    "required": true,
                                    "default": "false"
                                }
                            },
                            {
                                "name": "duration",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "number",
                                    "required": true
                                }
                            },
                            {
                                "name": "__unreadyCommands",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": "array",
                                    "required": true,
                                    "default": "[]"
                                }
                            },
                            {
                                "name": "__currenttimeInterval",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": "number",
                                    "required": true
                                }
                            }
                        ],
                        "events": [
                            {
                                "name": "google-youtube-ready"
                            }
                        ]
                    }
                },
                {
                    "name": "app-indexeddb-mirror",
                    "source": {
                        "module": "@polymer/app-storage/app-indexeddb-mirror/app-indexeddb-mirror.d.ts",
                        "symbol": "AppIndexeddbMirrorElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "key",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The key against which to persist data in the IndexedDB database.\nThis key uniquely maps to a key in an IndexedDB object store, so\nany instances of `app-indexeddb-mirror` with the same `key` will\noperate on the same persisted representation of the input `data`."
                            },
                            {
                                "name": "session",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Any string value that uniquely identifies the current session.\nWhenever this value changes, the data stored at `key` will be\ndeleted. This is useful for handling scenarios such as user\nsession changes (e.g., logout)."
                            },
                            {
                                "name": "workerUrl",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "A URL that points to the script to load for the corresponding\nWorker instance that will be used for minimally-blocking operations\non IndexedDB.\n\nBy default, this will be the path to\n`app-indexeddb-mirror-worker.js` as resolved by\n`Polymer.Base.resolveUrl` for the current element being created."
                            },
                            {
                                "name": "client",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "An instance of `Polymer.AppIndexedDBMirrorClient`, which is\nresponsible for negotiating transactions with the corresponding\nWorker spawned from `workerUrl`."
                            },
                            {
                                "name": "persistedData",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "When online, this property is a pass-through value mapped directly\nto the `data` property of this element.\n\nWhen offline, this property is a read-only copy of the `data` that\nhas been stored in the IndexedDB database at `key`."
                            },
                            {
                                "name": "importMeta",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [],
                                    "required": true
                                }
                            },
                            {
                                "name": "online",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "boolean",
                                    "required": true
                                },
                                "description": "True if the browser is online, and false if the browser is offline\nmatching the HTML browser state spec."
                            },
                            {
                                "name": "data",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The data to synchronize."
                            },
                            {
                                "name": "sequentialTransactions",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If this is true transactions will happen one after the other,\nnever in parallel.\n\nSpecifically, no transaction will begin until every previously\nenqueued transaction by this element has completed.\n\nIf it is false, new transactions will be executed as they are\nreceived."
                            },
                            {
                                "name": "log",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "When true, will perform detailed logging."
                            },
                            {
                                "name": "isNew",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "Override this getter to return true if the value has never been\npersisted to storage."
                            },
                            {
                                "name": "transactionsComplete",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "Promise<any>",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "A promise that will resolve once all queued transactions\nhave completed.\n\nThis field is updated as new transactions are enqueued, so it will\nonly wait for transactions which were enqueued when the field\nwas accessed.\n\nThis promise never rejects."
                            },
                            {
                                "name": "zeroValue",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "Override this getter to define the default value to use when\nthere's no data stored."
                            }
                        ]
                    }
                },
                {
                    "name": "app-localstorage-document",
                    "description": "app-localstorage-document synchronizes storage between an in-memory\nvalue and a location in the browser's localStorage system.\n\nlocalStorage is a simple and widely supported storage API that provides both\npermanent and session-based storage options. Using app-localstorage-document\nyou can easily integrate localStorage into your app via normal Polymer\ndatabinding.\n\napp-localstorage-document is the reference implementation of an element\nthat uses `AppStorageBehavior`. Reading its code is a good way to get\nstarted writing your own storage element.\n\nExample use:\n\n    <paper-input value=\"{{search}}\"></paper-input>\n    <app-localstorage-document key=\"search\" data=\"{{search}}\">\n    </app-localstorage-document>\n\napp-localstorage-document automatically synchronizes changes to the\nsame key across multiple tabs.\n\nOnly supports storing JSON-serializable values.",
                    "source": {
                        "module": "@polymer/app-storage/app-localstorage/app-localstorage-document.d.ts",
                        "symbol": "AppLocalstorageDocumentElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "key",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "String",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "Defines the logical location to store the data."
                            },
                            {
                                "name": "sessionOnly",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the data will automatically be cleared from storage when\nthe page session ends (i.e. when the user has navigated away from\nthe page)."
                            },
                            {
                                "name": "storage",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Either `window.localStorage` or `window.sessionStorage`, depending on\n`this.sessionOnly`."
                            },
                            {
                                "name": "data",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The data to synchronize."
                            },
                            {
                                "name": "sequentialTransactions",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If this is true transactions will happen one after the other,\nnever in parallel.\n\nSpecifically, no transaction will begin until every previously\nenqueued transaction by this element has completed.\n\nIf it is false, new transactions will be executed as they are\nreceived."
                            },
                            {
                                "name": "log",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "When true, will perform detailed logging."
                            },
                            {
                                "name": "isNew",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "Override this getter to return true if the value has never been\npersisted to storage."
                            },
                            {
                                "name": "transactionsComplete",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "Promise<any>",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "A promise that will resolve once all queued transactions\nhave completed.\n\nThis field is updated as new transactions are enqueued, so it will\nonly wait for transactions which were enqueued when the field\nwas accessed.\n\nThis promise never rejects."
                            },
                            {
                                "name": "zeroValue",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "Override this getter to define the default value to use when\nthere's no data stored."
                            }
                        ]
                    }
                },
                {
                    "name": "gold-cc-cvc-input",
                    "description": "`gold-cc-cvc-input` is a single-line text field with Material Design styling\nfor entering a credit card's CVC (Card Verification Code). It supports both\n4-digit Amex CVCs and non-Amex 3-digit CVCs\n\n    <gold-cc-cvc-input></gold-cc-cvc-input>\n\n    <gold-cc-cvc-input card-type=\"amex\"></gold-cc-cvc-input>\n\nIt may include an optional label, which by default is \"CVC\".\n\n    <gold-cc-cvc-input label=\"Card Verification Value\"></gold-cc-cvc-input>\n\nIt can be used together with a `gold-cc-input` by binding the `cardType`\nproperty:\n\n    <gold-cc-input card-type=\"{{cardType}}\"></gold-cc-input>\n    <gold-cc-cvc-input card-type=\"[[cardType]]\"></gold-cc-cvc-input>\n\n### Validation\n\nThe input considers a valid amex CVC to be 4 digits long, and 3 digits\notherwise. The `amex` attribute can also be bound to a `gold-cc-input`'s\n`card-type` attribute.\n\nThe input can be automatically validated as the user is typing by using\nthe `auto-validate` and `required` attributes. For manual validation, the\nelement also has a `validate()` method, which returns the validity of the\ninput as well sets any appropriate error messages and styles.\n\nSee `Polymer.PaperInputBehavior` for more API docs.\n\n### Styling\n\nSee `Polymer.PaperInputContainer` for a list of custom properties used to\nstyle this element.\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--gold-cc-cvc-input-icon` | Mixin applied to the icon | `{}`",
                    "source": {
                        "module": "@polymer/gold-cc-cvc-input/gold-cc-cvc-input.d.ts",
                        "symbol": "GoldCcCvcInputElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "cardType",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The type of card that the CVC is for."
                            },
                            {
                                "name": "_requiredLength",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_amex",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "importMeta",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [],
                                    "required": true
                                }
                            },
                            {
                                "name": "label",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The label for this input."
                            },
                            {
                                "name": "value",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The value for this element."
                            },
                            {
                                "name": "invalid",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Returns true if the value is invalid. If you're using PaperInputBehavior\nto implement your own paper-input-like element, bind this to both the\n`<paper-input-container>`'s and the input's `invalid` property.\n\nIf `autoValidate` is true, the `invalid` attribute is managed\nautomatically, which can clobber attempts to manage it manually."
                            },
                            {
                                "name": "allowedPattern",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set this to specify the pattern allowed by `preventInvalidInput`. If\nyou're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `allowedPattern`\nproperty."
                            },
                            {
                                "name": "type",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The type of the input. The supported types are the\n[native input's\ntypes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_<input>_types).\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the (Polymer 1) `<input is=\"iron-input\">`'s or\n(Polymer 2)\n`<iron-input>`'s `type` property."
                            },
                            {
                                "name": "list",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The datalist of the input (if any). This should match the id of an\nexisting `<datalist>`. If you're using PaperInputBehavior to implement\nyour own paper-input-like element, bind this to the `<input\nis=\"iron-input\">`'s `list` property."
                            },
                            {
                                "name": "pattern",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "A pattern to validate the `input` with. If you're using\nPaperInputBehavior to implement your own paper-input-like element, bind\nthis to the `<input is=\"iron-input\">`'s `pattern` property."
                            },
                            {
                                "name": "required",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to mark the input as required. If used in a form, a\ncustom element that uses this behavior should also use\nIronValidatableBehavior and define a custom validation method.\nOtherwise, a `required` element will always be considered valid.\nIt's also strongly recommended to provide a visual style for the element\nwhen its value is invalid."
                            },
                            {
                                "name": "errorMessage",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The error message to display when the input is invalid. If you're using\nPaperInputBehavior to implement your own paper-input-like element,\nbind this to the `<paper-input-error>`'s content, if using."
                            },
                            {
                                "name": "charCounter",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to show a character counter."
                            },
                            {
                                "name": "noLabelFloat",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to disable the floating label. If you're using\nPaperInputBehavior to implement your own paper-input-like element, bind\nthis to the `<paper-input-container>`'s `noLabelFloat` property."
                            },
                            {
                                "name": "alwaysFloatLabel",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to always float the label. If you're using PaperInputBehavior\nto implement your own paper-input-like element, bind this to the\n`<paper-input-container>`'s `alwaysFloatLabel` property."
                            },
                            {
                                "name": "autoValidate",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to auto-validate the input value. If you're using\nPaperInputBehavior to implement your own paper-input-like element, bind\nthis to the `<paper-input-container>`'s `autoValidate` property."
                            },
                            {
                                "name": "validator",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Name of the validator to use. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `<input is=\"iron-input\">`'s `validator` property."
                            },
                            {
                                "name": "autocomplete",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autocomplete`\nproperty."
                            },
                            {
                                "name": "autofocus",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "boolean",
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autofocus`\nproperty."
                            },
                            {
                                "name": "inputmode",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `inputmode`\nproperty."
                            },
                            {
                                "name": "minlength",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The minimum length of the input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `minlength`\nproperty."
                            },
                            {
                                "name": "maxlength",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The maximum length of the input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `maxlength`\nproperty."
                            },
                            {
                                "name": "min",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The minimum (numeric or date-time) input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `min` property."
                            },
                            {
                                "name": "max",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The maximum (numeric or date-time) input value.\nCan be a String (e.g. `\"2000-01-01\"`) or a Number (e.g. `2`).\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `max` property."
                            },
                            {
                                "name": "step",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Limits the numeric or date-time increments.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `step` property."
                            },
                            {
                                "name": "name",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The name of this element."
                            },
                            {
                                "name": "placeholder",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "A placeholder string in addition to the label. If this is set, the label\nwill always float."
                            },
                            {
                                "name": "readonly",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `readonly`\nproperty."
                            },
                            {
                                "name": "size",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `size` property."
                            },
                            {
                                "name": "autocapitalize",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "string",
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autocapitalize`\nproperty."
                            },
                            {
                                "name": "autocorrect",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autocorrect`\nproperty."
                            },
                            {
                                "name": "autosave",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autosave`\nproperty, used with type=search."
                            },
                            {
                                "name": "results",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `results` property,\nused with type=search."
                            },
                            {
                                "name": "accept",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `accept` property,\nused with type=file."
                            },
                            {
                                "name": "multiple",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the`<input is=\"iron-input\">`'s `multiple` property,\nused with type=file."
                            },
                            {
                                "name": "inputElement",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "HTMLElement",
                                    "required": true
                                },
                                "description": "Returns a reference to the input element."
                            },
                            {
                                "name": "_focusableElement",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "Returns a reference to the focusable element. Overridden from\nPaperInputBehavior to correctly focus the native input."
                            },
                            {
                                "name": "keyEventTarget",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "EventTarget",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "The EventTarget that will be firing relevant KeyboardEvents. Set it to\n`null` to disable the listeners."
                            },
                            {
                                "name": "stopKeyboardEventPropagation",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents."
                            },
                            {
                                "name": "_boundKeyHandlers",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "any[]",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_imperativeKeyBindings",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "own properties of everything on the \"prototype\"."
                            },
                            {
                                "name": "keyBindings",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "object",
                                    "required": true
                                },
                                "description": "To be used to express what combination of keys  will trigger the relative\ncallback. e.g. `keyBindings: { 'esc': '_onEscPressed'}`"
                            },
                            {
                                "name": "focused",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the element currently has focus."
                            },
                            {
                                "name": "disabled",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to disable this input. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nboth the `<paper-input-container>`'s and the input's `disabled` property."
                            },
                            {
                                "name": "_oldTabIndex",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Value of the `tabindex` attribute before `disabled` was activated.\n`null` means the attribute was not present."
                            },
                            {
                                "name": "_boundFocusBlurHandler",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "Function",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            }
                        ]
                    }
                },
                {
                    "name": "date-input",
                    "source": {
                        "module": "@polymer/gold-cc-expiration-input/date-input.d.ts",
                        "symbol": "DateInputElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "required",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to mark the input as required."
                            },
                            {
                                "name": "month",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The month component of the date displayed."
                            },
                            {
                                "name": "year",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The year component of the date displayed."
                            },
                            {
                                "name": "date",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The date object used by the validator. Has two properties, month and\nyear."
                            },
                            {
                                "name": "ariaLabelPrefix",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "disabled",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to disable the month and year input elements."
                            },
                            {
                                "name": "autofocus",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to autofocus the month input element."
                            },
                            {
                                "name": "inputmode",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Bound to the month and year input elements' `inputmode` property."
                            },
                            {
                                "name": "readonly",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to mark the month and year inputs as not editable."
                            },
                            {
                                "name": "validator",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Name of the validator to use."
                            },
                            {
                                "name": "invalid",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True if the last call to `validate` is invalid."
                            },
                            {
                                "name": "_validator",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "Recompute this every time it's needed, because we don't know if the\nunderlying IronValidatableBehaviorMeta has changed."
                            },
                            {
                                "name": "keyEventTarget",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "EventTarget",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "The EventTarget that will be firing relevant KeyboardEvents. Set it to\n`null` to disable the listeners."
                            },
                            {
                                "name": "stopKeyboardEventPropagation",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents."
                            },
                            {
                                "name": "_boundKeyHandlers",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "any[]",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_imperativeKeyBindings",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "own properties of everything on the \"prototype\"."
                            },
                            {
                                "name": "keyBindings",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "object",
                                    "required": true
                                },
                                "description": "To be used to express what combination of keys  will trigger the relative\ncallback. e.g. `keyBindings: { 'esc': '_onEscPressed'}`"
                            }
                        ]
                    }
                },
                {
                    "name": "date-validator",
                    "source": {
                        "module": "@polymer/gold-cc-expiration-input/date-validator.d.ts",
                        "symbol": "DateValidatorElement"
                    }
                },
                {
                    "name": "gold-cc-expiration-input",
                    "description": "`gold-cc-expiration-input` is a  single-line text field with Material Design\nstyling for entering a credit card's expiration date\n\n    <gold-cc-expiration-input></gold-cc-expiration-input>\n    <gold-cc-expiration-input value=\"11/15\"></gold-cc-expiration-input>\n\nIt may include an optional label, which by default is \"Expiration Date\".\n\n    <gold-cc-expiration-input label=\"Date\"></gold-cc-expiration-input>\n\n\n### Validation\n\nThe input can check whether the entered date is a valid, future date.\n\nThe input can be automatically validated as the user is typing by using\nthe `auto-validate` and `required` attributes. For manual validation, the\nelement also has a `validate()` method, which returns the validity of the\ninput as well sets any appropriate error messages and styles.\n\nSee `Polymer.PaperInputBehavior` for more API docs.\n\n### Styling\n\nSee `Polymer.PaperInputContainer` for a list of custom properties used to\nstyle this element.",
                    "source": {
                        "module": "@polymer/gold-cc-expiration-input/gold-cc-expiration-input.d.ts",
                        "symbol": "GoldCcExpirationInputElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "hostAttributes",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "The underlying dateInput is tabbable"
                            },
                            {
                                "name": "label",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The label for this input."
                            },
                            {
                                "name": "value",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The value for this element."
                            },
                            {
                                "name": "invalid",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Returns true if the value is invalid. If you're using PaperInputBehavior\nto implement your own paper-input-like element, bind this to both the\n`<paper-input-container>`'s and the input's `invalid` property.\n\nIf `autoValidate` is true, the `invalid` attribute is managed\nautomatically, which can clobber attempts to manage it manually."
                            },
                            {
                                "name": "allowedPattern",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set this to specify the pattern allowed by `preventInvalidInput`. If\nyou're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `allowedPattern`\nproperty."
                            },
                            {
                                "name": "type",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The type of the input. The supported types are the\n[native input's\ntypes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_<input>_types).\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the (Polymer 1) `<input is=\"iron-input\">`'s or\n(Polymer 2)\n`<iron-input>`'s `type` property."
                            },
                            {
                                "name": "list",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The datalist of the input (if any). This should match the id of an\nexisting `<datalist>`. If you're using PaperInputBehavior to implement\nyour own paper-input-like element, bind this to the `<input\nis=\"iron-input\">`'s `list` property."
                            },
                            {
                                "name": "pattern",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "A pattern to validate the `input` with. If you're using\nPaperInputBehavior to implement your own paper-input-like element, bind\nthis to the `<input is=\"iron-input\">`'s `pattern` property."
                            },
                            {
                                "name": "required",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to mark the input as required. If used in a form, a\ncustom element that uses this behavior should also use\nIronValidatableBehavior and define a custom validation method.\nOtherwise, a `required` element will always be considered valid.\nIt's also strongly recommended to provide a visual style for the element\nwhen its value is invalid."
                            },
                            {
                                "name": "errorMessage",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The error message to display when the input is invalid. If you're using\nPaperInputBehavior to implement your own paper-input-like element,\nbind this to the `<paper-input-error>`'s content, if using."
                            },
                            {
                                "name": "charCounter",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to show a character counter."
                            },
                            {
                                "name": "noLabelFloat",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to disable the floating label. If you're using\nPaperInputBehavior to implement your own paper-input-like element, bind\nthis to the `<paper-input-container>`'s `noLabelFloat` property."
                            },
                            {
                                "name": "alwaysFloatLabel",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to always float the label. If you're using PaperInputBehavior\nto implement your own paper-input-like element, bind this to the\n`<paper-input-container>`'s `alwaysFloatLabel` property."
                            },
                            {
                                "name": "autoValidate",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to auto-validate the input value. If you're using\nPaperInputBehavior to implement your own paper-input-like element, bind\nthis to the `<paper-input-container>`'s `autoValidate` property."
                            },
                            {
                                "name": "validator",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Name of the validator to use. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `<input is=\"iron-input\">`'s `validator` property."
                            },
                            {
                                "name": "autocomplete",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autocomplete`\nproperty."
                            },
                            {
                                "name": "autofocus",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "boolean",
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autofocus`\nproperty."
                            },
                            {
                                "name": "inputmode",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `inputmode`\nproperty."
                            },
                            {
                                "name": "minlength",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The minimum length of the input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `minlength`\nproperty."
                            },
                            {
                                "name": "maxlength",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The maximum length of the input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `maxlength`\nproperty."
                            },
                            {
                                "name": "min",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The minimum (numeric or date-time) input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `min` property."
                            },
                            {
                                "name": "max",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The maximum (numeric or date-time) input value.\nCan be a String (e.g. `\"2000-01-01\"`) or a Number (e.g. `2`).\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `max` property."
                            },
                            {
                                "name": "step",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Limits the numeric or date-time increments.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `step` property."
                            },
                            {
                                "name": "name",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The name of this element."
                            },
                            {
                                "name": "placeholder",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "A placeholder string in addition to the label. If this is set, the label\nwill always float."
                            },
                            {
                                "name": "readonly",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `readonly`\nproperty."
                            },
                            {
                                "name": "size",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `size` property."
                            },
                            {
                                "name": "autocapitalize",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "string",
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autocapitalize`\nproperty."
                            },
                            {
                                "name": "autocorrect",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autocorrect`\nproperty."
                            },
                            {
                                "name": "autosave",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autosave`\nproperty, used with type=search."
                            },
                            {
                                "name": "results",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `results` property,\nused with type=search."
                            },
                            {
                                "name": "accept",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `accept` property,\nused with type=file."
                            },
                            {
                                "name": "multiple",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the`<input is=\"iron-input\">`'s `multiple` property,\nused with type=file."
                            },
                            {
                                "name": "inputElement",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "HTMLElement",
                                    "required": true
                                },
                                "description": "Returns a reference to the input element."
                            },
                            {
                                "name": "_focusableElement",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": "HTMLElement",
                                    "required": true
                                },
                                "description": "Returns a reference to the focusable element."
                            },
                            {
                                "name": "keyEventTarget",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "EventTarget",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "The EventTarget that will be firing relevant KeyboardEvents. Set it to\n`null` to disable the listeners."
                            },
                            {
                                "name": "stopKeyboardEventPropagation",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents."
                            },
                            {
                                "name": "_boundKeyHandlers",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "any[]",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_imperativeKeyBindings",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "own properties of everything on the \"prototype\"."
                            },
                            {
                                "name": "keyBindings",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "object",
                                    "required": true
                                },
                                "description": "To be used to express what combination of keys  will trigger the relative\ncallback. e.g. `keyBindings: { 'esc': '_onEscPressed'}`"
                            },
                            {
                                "name": "focused",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the element currently has focus."
                            },
                            {
                                "name": "disabled",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to disable this input. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nboth the `<paper-input-container>`'s and the input's `disabled` property."
                            },
                            {
                                "name": "_oldTabIndex",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Value of the `tabindex` attribute before `disabled` was activated.\n`null` means the attribute was not present."
                            },
                            {
                                "name": "_boundFocusBlurHandler",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "Function",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            }
                        ]
                    }
                },
                {
                    "name": "gold-cc-input",
                    "source": {
                        "module": "@polymer/gold-cc-input/gold-cc-input.d.ts",
                        "symbol": "GoldCcInputElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "cardType",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The type of the credit card, if it is valid. Empty otherwise."
                            },
                            {
                                "name": "cardTypes",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "any[]",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "A list of allowable card-types. If empty, all card-types are valid"
                            },
                            {
                                "name": "importMeta",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [],
                                    "required": true
                                }
                            },
                            {
                                "name": "_validator",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "Recompute this every time it's needed, because we don't know if the\nunderlying IronValidatableBehaviorMeta has changed."
                            },
                            {
                                "name": "label",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The label for this input."
                            },
                            {
                                "name": "value",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The value for this element."
                            },
                            {
                                "name": "invalid",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True if the last call to `validate` is invalid."
                            },
                            {
                                "name": "allowedPattern",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set this to specify the pattern allowed by `preventInvalidInput`. If\nyou're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `allowedPattern`\nproperty."
                            },
                            {
                                "name": "type",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The type of the input. The supported types are the\n[native input's\ntypes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_<input>_types).\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the (Polymer 1) `<input is=\"iron-input\">`'s or\n(Polymer 2)\n`<iron-input>`'s `type` property."
                            },
                            {
                                "name": "list",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The datalist of the input (if any). This should match the id of an\nexisting `<datalist>`. If you're using PaperInputBehavior to implement\nyour own paper-input-like element, bind this to the `<input\nis=\"iron-input\">`'s `list` property."
                            },
                            {
                                "name": "pattern",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "A pattern to validate the `input` with. If you're using\nPaperInputBehavior to implement your own paper-input-like element, bind\nthis to the `<input is=\"iron-input\">`'s `pattern` property."
                            },
                            {
                                "name": "required",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to mark the input as required. If used in a form, a\ncustom element that uses this behavior should also use\nIronValidatableBehavior and define a custom validation method.\nOtherwise, a `required` element will always be considered valid.\nIt's also strongly recommended to provide a visual style for the element\nwhen its value is invalid."
                            },
                            {
                                "name": "errorMessage",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The error message to display when the input is invalid. If you're using\nPaperInputBehavior to implement your own paper-input-like element,\nbind this to the `<paper-input-error>`'s content, if using."
                            },
                            {
                                "name": "charCounter",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to show a character counter."
                            },
                            {
                                "name": "noLabelFloat",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to disable the floating label. If you're using\nPaperInputBehavior to implement your own paper-input-like element, bind\nthis to the `<paper-input-container>`'s `noLabelFloat` property."
                            },
                            {
                                "name": "alwaysFloatLabel",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to always float the label. If you're using PaperInputBehavior\nto implement your own paper-input-like element, bind this to the\n`<paper-input-container>`'s `alwaysFloatLabel` property."
                            },
                            {
                                "name": "autoValidate",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to auto-validate the input value. If you're using\nPaperInputBehavior to implement your own paper-input-like element, bind\nthis to the `<paper-input-container>`'s `autoValidate` property."
                            },
                            {
                                "name": "validator",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Name of the validator to use."
                            },
                            {
                                "name": "autocomplete",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autocomplete`\nproperty."
                            },
                            {
                                "name": "autofocus",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "boolean",
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autofocus`\nproperty."
                            },
                            {
                                "name": "inputmode",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `inputmode`\nproperty."
                            },
                            {
                                "name": "minlength",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The minimum length of the input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `minlength`\nproperty."
                            },
                            {
                                "name": "maxlength",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The maximum length of the input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `maxlength`\nproperty."
                            },
                            {
                                "name": "min",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The minimum (numeric or date-time) input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `min` property."
                            },
                            {
                                "name": "max",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The maximum (numeric or date-time) input value.\nCan be a String (e.g. `\"2000-01-01\"`) or a Number (e.g. `2`).\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `max` property."
                            },
                            {
                                "name": "step",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Limits the numeric or date-time increments.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `step` property."
                            },
                            {
                                "name": "name",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The name of this element."
                            },
                            {
                                "name": "placeholder",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "A placeholder string in addition to the label. If this is set, the label\nwill always float."
                            },
                            {
                                "name": "readonly",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `readonly`\nproperty."
                            },
                            {
                                "name": "size",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `size` property."
                            },
                            {
                                "name": "autocapitalize",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "string",
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autocapitalize`\nproperty."
                            },
                            {
                                "name": "autocorrect",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autocorrect`\nproperty."
                            },
                            {
                                "name": "autosave",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autosave`\nproperty, used with type=search."
                            },
                            {
                                "name": "results",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `results` property,\nused with type=search."
                            },
                            {
                                "name": "accept",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `accept` property,\nused with type=file."
                            },
                            {
                                "name": "multiple",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the`<input is=\"iron-input\">`'s `multiple` property,\nused with type=file."
                            },
                            {
                                "name": "inputElement",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "HTMLElement",
                                    "required": true
                                },
                                "description": "Returns a reference to the input element."
                            },
                            {
                                "name": "_focusableElement",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "Returns a reference to the focusable element. Overridden from\nPaperInputBehavior to correctly focus the native input."
                            },
                            {
                                "name": "keyEventTarget",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "EventTarget",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "The EventTarget that will be firing relevant KeyboardEvents. Set it to\n`null` to disable the listeners."
                            },
                            {
                                "name": "stopKeyboardEventPropagation",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents."
                            },
                            {
                                "name": "_boundKeyHandlers",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "any[]",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_imperativeKeyBindings",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "own properties of everything on the \"prototype\"."
                            },
                            {
                                "name": "keyBindings",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "object",
                                    "required": true
                                },
                                "description": "To be used to express what combination of keys  will trigger the relative\ncallback. e.g. `keyBindings: { 'esc': '_onEscPressed'}`"
                            },
                            {
                                "name": "focused",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the element currently has focus."
                            },
                            {
                                "name": "disabled",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to disable this input. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nboth the `<paper-input-container>`'s and the input's `disabled` property."
                            },
                            {
                                "name": "_oldTabIndex",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Value of the `tabindex` attribute before `disabled` was activated.\n`null` means the attribute was not present."
                            },
                            {
                                "name": "_boundFocusBlurHandler",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "Function",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            }
                        ]
                    }
                },
                {
                    "name": "gold-phone-input",
                    "description": "`<gold-phone-input>` is a single-line text field with Material Design styling\nfor entering a phone number.\n\n    <gold-phone-input></gold-phone-input>\n\nIt may include an optional label, which by default is \"Phone number\".\n\n    <gold-phone-input label=\"call this\"></gold-phone-input>\n\n### Validation\n\nBy default, the phone number is considered to be a US phone number, and\nwill be validated according to the pattern `XXX-XXX-XXXX`, where `X` is a\ndigit, and `-` is the separating dash. If you want to customize the input\nfor a different area code or number pattern, use the `country-code` and\n`phone-number-pattern` attributes\n\n    <gold-phone-input\n        country-code=\"33\"\n        phone-number-pattern=\"X-XX-XX-XX-XX\">\n    </gold-phone-input>\n\nThe input can be automatically validated as the user is typing by using\nthe `auto-validate` and `required` attributes. For manual validation, the\nelement also has a `validate()` method, which returns the validity of the\ninput as well sets any appropriate error messages and styles.\n\nSee `Polymer.PaperInputBehavior` for more API docs.\n\n### Styling\n\nSee `Polymer.PaperInputContainer` for a list of custom properties used to\nstyle this element.\n\n`--gold-phone-input-country-code` | Mixin applied to the country code span",
                    "source": {
                        "module": "@polymer/gold-phone-input/gold-phone-input.d.ts",
                        "symbol": "GoldPhoneInputElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "countryCode",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The country code that should be recognized and parsed."
                            },
                            {
                                "name": "phoneNumberPattern",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The format of a valid phone number, including formatting but excluding\nthe country code. Use 'X' to denote the digits separated by dashes."
                            },
                            {
                                "name": "internationalValue",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "String",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "International format of the input value."
                            },
                            {
                                "name": "label",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The label for this input."
                            },
                            {
                                "name": "value",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The value for this element."
                            },
                            {
                                "name": "invalid",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Returns true if the value is invalid. If you're using PaperInputBehavior\nto implement your own paper-input-like element, bind this to both the\n`<paper-input-container>`'s and the input's `invalid` property.\n\nIf `autoValidate` is true, the `invalid` attribute is managed\nautomatically, which can clobber attempts to manage it manually."
                            },
                            {
                                "name": "allowedPattern",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set this to specify the pattern allowed by `preventInvalidInput`. If\nyou're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `allowedPattern`\nproperty."
                            },
                            {
                                "name": "type",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The type of the input. The supported types are the\n[native input's\ntypes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_<input>_types).\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the (Polymer 1) `<input is=\"iron-input\">`'s or\n(Polymer 2)\n`<iron-input>`'s `type` property."
                            },
                            {
                                "name": "list",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The datalist of the input (if any). This should match the id of an\nexisting `<datalist>`. If you're using PaperInputBehavior to implement\nyour own paper-input-like element, bind this to the `<input\nis=\"iron-input\">`'s `list` property."
                            },
                            {
                                "name": "pattern",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "A pattern to validate the `input` with. If you're using\nPaperInputBehavior to implement your own paper-input-like element, bind\nthis to the `<input is=\"iron-input\">`'s `pattern` property."
                            },
                            {
                                "name": "required",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to mark the input as required. If used in a form, a\ncustom element that uses this behavior should also use\nIronValidatableBehavior and define a custom validation method.\nOtherwise, a `required` element will always be considered valid.\nIt's also strongly recommended to provide a visual style for the element\nwhen its value is invalid."
                            },
                            {
                                "name": "errorMessage",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The error message to display when the input is invalid. If you're using\nPaperInputBehavior to implement your own paper-input-like element,\nbind this to the `<paper-input-error>`'s content, if using."
                            },
                            {
                                "name": "charCounter",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to show a character counter."
                            },
                            {
                                "name": "noLabelFloat",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to disable the floating label. If you're using\nPaperInputBehavior to implement your own paper-input-like element, bind\nthis to the `<paper-input-container>`'s `noLabelFloat` property."
                            },
                            {
                                "name": "alwaysFloatLabel",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to always float the label. If you're using PaperInputBehavior\nto implement your own paper-input-like element, bind this to the\n`<paper-input-container>`'s `alwaysFloatLabel` property."
                            },
                            {
                                "name": "autoValidate",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to auto-validate the input value. If you're using\nPaperInputBehavior to implement your own paper-input-like element, bind\nthis to the `<paper-input-container>`'s `autoValidate` property."
                            },
                            {
                                "name": "validator",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Name of the validator to use. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `<input is=\"iron-input\">`'s `validator` property."
                            },
                            {
                                "name": "autocomplete",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autocomplete`\nproperty."
                            },
                            {
                                "name": "autofocus",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "boolean",
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autofocus`\nproperty."
                            },
                            {
                                "name": "inputmode",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `inputmode`\nproperty."
                            },
                            {
                                "name": "minlength",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The minimum length of the input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `minlength`\nproperty."
                            },
                            {
                                "name": "maxlength",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The maximum length of the input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `maxlength`\nproperty."
                            },
                            {
                                "name": "min",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The minimum (numeric or date-time) input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `min` property."
                            },
                            {
                                "name": "max",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The maximum (numeric or date-time) input value.\nCan be a String (e.g. `\"2000-01-01\"`) or a Number (e.g. `2`).\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `max` property."
                            },
                            {
                                "name": "step",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Limits the numeric or date-time increments.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `step` property."
                            },
                            {
                                "name": "name",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The name of this element."
                            },
                            {
                                "name": "placeholder",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "A placeholder string in addition to the label. If this is set, the label\nwill always float."
                            },
                            {
                                "name": "readonly",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `readonly`\nproperty."
                            },
                            {
                                "name": "size",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `size` property."
                            },
                            {
                                "name": "autocapitalize",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "string",
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autocapitalize`\nproperty."
                            },
                            {
                                "name": "autocorrect",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autocorrect`\nproperty."
                            },
                            {
                                "name": "autosave",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autosave`\nproperty, used with type=search."
                            },
                            {
                                "name": "results",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `results` property,\nused with type=search."
                            },
                            {
                                "name": "accept",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `accept` property,\nused with type=file."
                            },
                            {
                                "name": "multiple",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the`<input is=\"iron-input\">`'s `multiple` property,\nused with type=file."
                            },
                            {
                                "name": "inputElement",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "HTMLElement",
                                    "required": true
                                },
                                "description": "Returns a reference to the input element."
                            },
                            {
                                "name": "_focusableElement",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "Returns a reference to the focusable element. Overridden from\nPaperInputBehavior to correctly focus the native input."
                            },
                            {
                                "name": "keyEventTarget",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "EventTarget",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "The EventTarget that will be firing relevant KeyboardEvents. Set it to\n`null` to disable the listeners."
                            },
                            {
                                "name": "stopKeyboardEventPropagation",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents."
                            },
                            {
                                "name": "_boundKeyHandlers",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "any[]",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_imperativeKeyBindings",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "own properties of everything on the \"prototype\"."
                            },
                            {
                                "name": "keyBindings",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "object",
                                    "required": true
                                },
                                "description": "To be used to express what combination of keys  will trigger the relative\ncallback. e.g. `keyBindings: { 'esc': '_onEscPressed'}`"
                            },
                            {
                                "name": "focused",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the element currently has focus."
                            },
                            {
                                "name": "disabled",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to disable this input. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nboth the `<paper-input-container>`'s and the input's `disabled` property."
                            },
                            {
                                "name": "_oldTabIndex",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Value of the `tabindex` attribute before `disabled` was activated.\n`null` means the attribute was not present."
                            },
                            {
                                "name": "_boundFocusBlurHandler",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "Function",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            }
                        ]
                    }
                },
                {
                    "name": "gold-zip-input",
                    "description": "`gold-zip-input` is a single-line text field with Material Design styling\nfor entering a US zip code.\n\n    <gold-zip-input></gold-zip-input>\n\nIt may include an optional label, which by default is \"Zip Code\".\n\n    <gold-zip-input label=\"Mailing zip code\"></gold-zip-input>\n\n### Validation\n\nThe input supports both 5 digit zip codes (90210) or the full 9 digit ones,\nseparated by a dash (90210-9999).\n\nThe input can be automatically validated as the user is typing by using\nthe `auto-validate` and `required` attributes. For manual validation, the\nelement also has a `validate()` method, which returns the validity of the\ninput as well sets any appropriate error messages and styles.\n\nSee `Polymer.PaperInputBehavior` for more API docs.\n\n### Styling\n\nSee `Polymer.PaperInputContainer` for a list of custom properties used to\nstyle this element.",
                    "source": {
                        "module": "@polymer/gold-zip-input/gold-zip-input.d.ts",
                        "symbol": "GoldZipInputElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "label",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The label for this input."
                            },
                            {
                                "name": "value",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The value for this element."
                            },
                            {
                                "name": "invalid",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Returns true if the value is invalid. If you're using PaperInputBehavior\nto implement your own paper-input-like element, bind this to both the\n`<paper-input-container>`'s and the input's `invalid` property.\n\nIf `autoValidate` is true, the `invalid` attribute is managed\nautomatically, which can clobber attempts to manage it manually."
                            },
                            {
                                "name": "allowedPattern",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set this to specify the pattern allowed by `preventInvalidInput`. If\nyou're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `allowedPattern`\nproperty."
                            },
                            {
                                "name": "type",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The type of the input. The supported types are the\n[native input's\ntypes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_<input>_types).\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the (Polymer 1) `<input is=\"iron-input\">`'s or\n(Polymer 2)\n`<iron-input>`'s `type` property."
                            },
                            {
                                "name": "list",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The datalist of the input (if any). This should match the id of an\nexisting `<datalist>`. If you're using PaperInputBehavior to implement\nyour own paper-input-like element, bind this to the `<input\nis=\"iron-input\">`'s `list` property."
                            },
                            {
                                "name": "pattern",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "A pattern to validate the `input` with. If you're using\nPaperInputBehavior to implement your own paper-input-like element, bind\nthis to the `<input is=\"iron-input\">`'s `pattern` property."
                            },
                            {
                                "name": "required",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to mark the input as required. If used in a form, a\ncustom element that uses this behavior should also use\nIronValidatableBehavior and define a custom validation method.\nOtherwise, a `required` element will always be considered valid.\nIt's also strongly recommended to provide a visual style for the element\nwhen its value is invalid."
                            },
                            {
                                "name": "errorMessage",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The error message to display when the input is invalid. If you're using\nPaperInputBehavior to implement your own paper-input-like element,\nbind this to the `<paper-input-error>`'s content, if using."
                            },
                            {
                                "name": "charCounter",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to show a character counter."
                            },
                            {
                                "name": "noLabelFloat",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to disable the floating label. If you're using\nPaperInputBehavior to implement your own paper-input-like element, bind\nthis to the `<paper-input-container>`'s `noLabelFloat` property."
                            },
                            {
                                "name": "alwaysFloatLabel",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to always float the label. If you're using PaperInputBehavior\nto implement your own paper-input-like element, bind this to the\n`<paper-input-container>`'s `alwaysFloatLabel` property."
                            },
                            {
                                "name": "autoValidate",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to auto-validate the input value. If you're using\nPaperInputBehavior to implement your own paper-input-like element, bind\nthis to the `<paper-input-container>`'s `autoValidate` property."
                            },
                            {
                                "name": "validator",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Name of the validator to use. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `<input is=\"iron-input\">`'s `validator` property."
                            },
                            {
                                "name": "autocomplete",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autocomplete`\nproperty."
                            },
                            {
                                "name": "autofocus",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "boolean",
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autofocus`\nproperty."
                            },
                            {
                                "name": "inputmode",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `inputmode`\nproperty."
                            },
                            {
                                "name": "minlength",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The minimum length of the input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `minlength`\nproperty."
                            },
                            {
                                "name": "maxlength",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The maximum length of the input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `maxlength`\nproperty."
                            },
                            {
                                "name": "min",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The minimum (numeric or date-time) input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `min` property."
                            },
                            {
                                "name": "max",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The maximum (numeric or date-time) input value.\nCan be a String (e.g. `\"2000-01-01\"`) or a Number (e.g. `2`).\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `max` property."
                            },
                            {
                                "name": "step",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Limits the numeric or date-time increments.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `step` property."
                            },
                            {
                                "name": "name",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The name of this element."
                            },
                            {
                                "name": "placeholder",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "A placeholder string in addition to the label. If this is set, the label\nwill always float."
                            },
                            {
                                "name": "readonly",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `readonly`\nproperty."
                            },
                            {
                                "name": "size",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `size` property."
                            },
                            {
                                "name": "autocapitalize",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "string",
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autocapitalize`\nproperty."
                            },
                            {
                                "name": "autocorrect",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autocorrect`\nproperty."
                            },
                            {
                                "name": "autosave",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autosave`\nproperty, used with type=search."
                            },
                            {
                                "name": "results",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `results` property,\nused with type=search."
                            },
                            {
                                "name": "accept",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `accept` property,\nused with type=file."
                            },
                            {
                                "name": "multiple",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the`<input is=\"iron-input\">`'s `multiple` property,\nused with type=file."
                            },
                            {
                                "name": "inputElement",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "HTMLElement",
                                    "required": true
                                },
                                "description": "Returns a reference to the input element."
                            },
                            {
                                "name": "_focusableElement",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "Returns a reference to the focusable element. Overridden from\nPaperInputBehavior to correctly focus the native input."
                            },
                            {
                                "name": "keyEventTarget",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "EventTarget",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "The EventTarget that will be firing relevant KeyboardEvents. Set it to\n`null` to disable the listeners."
                            },
                            {
                                "name": "stopKeyboardEventPropagation",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents."
                            },
                            {
                                "name": "_boundKeyHandlers",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "any[]",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_imperativeKeyBindings",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "own properties of everything on the \"prototype\"."
                            },
                            {
                                "name": "keyBindings",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "object",
                                    "required": true
                                },
                                "description": "To be used to express what combination of keys  will trigger the relative\ncallback. e.g. `keyBindings: { 'esc': '_onEscPressed'}`"
                            },
                            {
                                "name": "focused",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the element currently has focus."
                            },
                            {
                                "name": "disabled",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to disable this input. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nboth the `<paper-input-container>`'s and the input's `disabled` property."
                            },
                            {
                                "name": "_oldTabIndex",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Value of the `tabindex` attribute before `disabled` was activated.\n`null` means the attribute was not present."
                            },
                            {
                                "name": "_boundFocusBlurHandler",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "Function",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            }
                        ]
                    }
                },
                {
                    "name": "zip-validator",
                    "source": {
                        "module": "@polymer/gold-zip-input/zip-validator.d.ts",
                        "symbol": "ZipValidatorElement"
                    }
                },
                {
                    "name": "iron-a11y-announcer",
                    "source": {
                        "module": "@polymer/iron-a11y-announcer/iron-a11y-announcer.d.ts",
                        "symbol": "IronA11yAnnouncer"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "mode",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The value of mode is used to set the `aria-live` attribute\nfor the element that will be announced. Valid values are: `off`,\n`polite` and `assertive`."
                            },
                            {
                                "name": "timeout",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The timeout on refreshing the announcement text. Larger timeouts are\nneeded for certain screen readers to re-announce the same message."
                            },
                            {
                                "name": "_text",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            }
                        ]
                    }
                },
                {
                    "name": "iron-a11y-keys",
                    "source": {
                        "module": "@polymer/iron-a11y-keys/iron-a11y-keys.d.ts",
                        "symbol": "IronA11yKeysElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "target",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "Node",
                                        "null"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "keys",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Space delimited list of keys where each key follows the format:\n`[MODIFIER+]*KEY[:EVENT]`.\ne.g. `keys=\"space ctrl+shift+tab enter:keyup\"`.\nMore detail can be found in the \"Grammar\" section of the documentation"
                            },
                            {
                                "name": "keyEventTarget",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "EventTarget",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "The EventTarget that will be firing relevant KeyboardEvents. Set it to\n`null` to disable the listeners."
                            },
                            {
                                "name": "stopKeyboardEventPropagation",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents."
                            },
                            {
                                "name": "_boundKeyHandlers",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "any[]",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_imperativeKeyBindings",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "own properties of everything on the \"prototype\"."
                            },
                            {
                                "name": "keyBindings",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "object",
                                    "required": true
                                },
                                "description": "To be used to express what combination of keys  will trigger the relative\ncallback. e.g. `keyBindings: { 'esc': '_onEscPressed'}`"
                            }
                        ]
                    }
                },
                {
                    "name": "iron-ajax",
                    "description": "The `iron-ajax` element exposes network request functionality.\n\n    <iron-ajax\n        auto\n        url=\"https://www.googleapis.com/youtube/v3/search\"\n        params='{\"part\":\"snippet\", \"q\":\"polymer\", \"key\": \"YOUTUBE_API_KEY\",\n\"type\": \"video\"}' handle-as=\"json\" on-response=\"handleResponse\"\n        debounce-duration=\"300\"></iron-ajax>\n\nWith `auto` set to `true`, the element performs a request whenever\nits `url`, `params` or `body` properties are changed. Automatically generated\nrequests will be debounced in the case that multiple attributes are changed\nsequentially.\n\nNote: The `params` attribute must be double quoted JSON.\n\nYou can trigger a request explicitly by calling `generateRequest` on the\nelement.",
                    "source": {
                        "module": "@polymer/iron-ajax/iron-ajax.d.ts",
                        "symbol": "IronAjaxElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "url",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The URL target of the request."
                            },
                            {
                                "name": "params",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "An object that contains query parameters to be appended to the\nspecified `url` when generating a request. If you wish to set the body\ncontent when making a POST request, you should use the `body` property\ninstead."
                            },
                            {
                                "name": "method",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The HTTP method to use such as 'GET', 'POST', 'PUT', or 'DELETE'.\nDefault is 'GET'."
                            },
                            {
                                "name": "headers",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "HTTP request headers to send.\n\nExample:\n\n    <iron-ajax\n        auto\n        url=\"http://somesite.com\"\n        headers='{\"X-Requested-With\": \"XMLHttpRequest\"}'\n        handle-as=\"json\"></iron-ajax>\n\nNote: setting a `Content-Type` header here will override the value\nspecified by the `contentType` property of this element."
                            },
                            {
                                "name": "contentType",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Content type to use when sending data. If the `contentType` property\nis set and a `Content-Type` header is specified in the `headers`\nproperty, the `headers` property value will take precedence.\n\nVaries the handling of the `body` param."
                            },
                            {
                                "name": "body",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Body content to send with the request, typically used with \"POST\"\nrequests.\n\nIf body is a string it will be sent unmodified.\n\nIf Content-Type is set to a value listed below, then\nthe body will be encoded accordingly.\n\n   * `content-type=\"application/json\"`\n     * body is encoded like `{\"foo\":\"bar baz\",\"x\":1}`\n   * `content-type=\"application/x-www-form-urlencoded\"`\n     * body is encoded like `foo=bar+baz&x=1`\n\nOtherwise the body will be passed to the browser unmodified, and it\nwill handle any encoding (e.g. for FormData, Blob, ArrayBuffer)."
                            },
                            {
                                "name": "sync",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Toggle whether XHR is synchronous or asynchronous. Don't change this\nto true unless You Know What You Are Doing™."
                            },
                            {
                                "name": "handleAs",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Specifies what data to store in the `response` property, and\nto deliver as `event.detail.response` in `response` events.\n\nOne of:\n\n   `text`: uses `XHR.responseText`.\n\n   `xml`: uses `XHR.responseXML`.\n\n   `json`: uses `XHR.responseText` parsed as JSON.\n\n   `arraybuffer`: uses `XHR.response`.\n\n   `blob`: uses `XHR.response`.\n\n   `document`: uses `XHR.response`."
                            },
                            {
                                "name": "withCredentials",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set the withCredentials flag on the request."
                            },
                            {
                                "name": "timeout",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set the timeout flag on the request."
                            },
                            {
                                "name": "auto",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, automatically performs an Ajax request when either `url` or\n`params` changes."
                            },
                            {
                                "name": "verbose",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, error messages will automatically be logged to the console."
                            },
                            {
                                "name": "lastRequest",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The most recent request made by this iron-ajax element."
                            },
                            {
                                "name": "lastProgress",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The `progress` property of this element's `lastRequest`."
                            },
                            {
                                "name": "loading",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True while lastRequest is in flight."
                            },
                            {
                                "name": "lastResponse",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "lastRequest's response.\n\nNote that lastResponse and lastError are set when lastRequest finishes,\nso if loading is true, then lastResponse and lastError will correspond\nto the result of the previous request.\n\nThe type of the response is determined by the value of `handleAs` at\nthe time that the request was generated."
                            },
                            {
                                "name": "lastError",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "lastRequest's error, if any."
                            },
                            {
                                "name": "activeRequests",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "any[]",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "An Array of all in-flight requests originating from this iron-ajax\nelement."
                            },
                            {
                                "name": "debounceDuration",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Length of time in milliseconds to debounce multiple automatically\ngenerated requests."
                            },
                            {
                                "name": "jsonPrefix",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Prefix to be stripped from a JSON response before parsing it.\n\nIn order to prevent an attack using CSRF with Array responses\n(http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx/)\nmany backends will mitigate this by prefixing all JSON response bodies\nwith a string that would be nonsensical to a JavaScript parser."
                            },
                            {
                                "name": "bubbles",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "By default, iron-ajax's events do not bubble. Setting this attribute will\ncause its request and response events as well as its iron-ajax-request,\n-response,  and -error events to bubble to the window object. The vanilla\nerror event never bubbles when using shadow dom even if this.bubbles is\ntrue because a scoped flag is not passed with it (first link) and because\nthe shadow dom spec did not used to allow certain events, including\nevents named error, to leak outside of shadow trees (second link).\nhttps://www.w3.org/TR/shadow-dom/#scoped-flag\nhttps://www.w3.org/TR/2015/WD-shadow-dom-20151215/#events-that-are-not-leaked-into-ancestor-trees"
                            },
                            {
                                "name": "rejectWithRequest",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Changes the [`completes`](iron-request#property-completes) promise chain\nfrom `generateRequest` to reject with an object\ncontaining the original request, as well an error message.\nIf false (default), the promise rejects with an error message only."
                            },
                            {
                                "name": "_boundHandleResponse",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "Function",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "hostAttributes",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "queryString",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "string",
                                    "required": true
                                },
                                "description": "The query string that should be appended to the `url`, serialized from\nthe current value of `params`."
                            },
                            {
                                "name": "requestUrl",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "string",
                                    "required": true
                                },
                                "description": "The `url` with query string (if `params` are specified), suitable for\nproviding to an `iron-request` instance."
                            },
                            {
                                "name": "requestHeaders",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "An object that maps header names to header values, first applying the\nthe value of `Content-Type` and then overlaying the headers specified\nin the `headers` property."
                            }
                        ]
                    }
                },
                {
                    "name": "iron-request",
                    "description": "iron-request can be used to perform XMLHttpRequests.\n\n    <iron-request id=\"xhr\"></iron-request>\n    ...\n    this.$.xhr.send({url: url, body: params});",
                    "source": {
                        "module": "@polymer/iron-ajax/iron-request.d.ts",
                        "symbol": "IronRequestElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "xhr",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "XMLHttpRequest",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "A reference to the XMLHttpRequest instance used to generate the\nnetwork request."
                            },
                            {
                                "name": "response",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "A reference to the parsed response body, if the `xhr` has completely\nresolved."
                            },
                            {
                                "name": "status",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "A reference to the status code, if the `xhr` has completely resolved."
                            },
                            {
                                "name": "statusText",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "A reference to the status text, if the `xhr` has completely resolved."
                            },
                            {
                                "name": "completes",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "Promise<any>",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "A promise that resolves when the `xhr` response comes back, or rejects\nif there is an error before the `xhr` completes.\nThe resolve callback is called with the original request as an argument.\nBy default, the reject callback is called with an `Error` as an argument.\nIf `rejectWithRequest` is true, the reject callback is called with an\nobject with two keys: `request`, the original request, and `error`, the\nerror object."
                            },
                            {
                                "name": "progress",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "An object that contains progress information emitted by the XHR if\navailable."
                            },
                            {
                                "name": "aborted",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Aborted will be true if an abort of the request is attempted."
                            },
                            {
                                "name": "errored",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Errored will be true if the browser fired an error event from the\nXHR object (mainly network errors)."
                            },
                            {
                                "name": "timedOut",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "TimedOut will be true if the XHR threw a timeout event."
                            },
                            {
                                "name": "hostAttributes",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "succeeded",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "boolean",
                                    "required": true
                                },
                                "description": "Succeeded is true if the request succeeded. The request succeeded if it\nloaded without error, wasn't aborted, and the status code is ≥ 200, and\n< 300, or if the status code is 0.\n\nThe status code 0 is accepted as a success because some schemes - e.g.\nfile:// - don't provide status codes."
                            }
                        ]
                    }
                },
                {
                    "name": "iron-autogrow-textarea",
                    "description": "`iron-autogrow-textarea` is an element containing a textarea that grows in\nheight as more lines of input are entered. Unless an explicit height or the\n`maxRows` property is set, it will never scroll.\n\nExample:\n\n    <iron-autogrow-textarea></iron-autogrow-textarea>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--iron-autogrow-textarea` | Mixin applied to the textarea | `{}`\n`--iron-autogrow-textarea-placeholder` | Mixin applied to the textarea placeholder | `{}`",
                    "source": {
                        "module": "@polymer/iron-autogrow-textarea/iron-autogrow-textarea.d.ts",
                        "symbol": "IronAutogrowTextareaElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "value",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "number"
                                    ],
                                    "required": true
                                },
                                "description": "Use this property instead of `bind-value` for two-way data binding."
                            },
                            {
                                "name": "bindValue",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "number"
                                    ],
                                    "required": true
                                },
                                "description": "This property is deprecated, and just mirrors `value`. Use `value`\ninstead."
                            },
                            {
                                "name": "rows",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The initial number of rows."
                            },
                            {
                                "name": "maxRows",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The maximum number of rows this element can grow to until it\nscrolls. 0 means no maximum."
                            },
                            {
                                "name": "autocomplete",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Bound to the textarea's `autocomplete` attribute."
                            },
                            {
                                "name": "autofocus",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "boolean",
                                    "required": true
                                },
                                "description": "Bound to the textarea's `autofocus` attribute."
                            },
                            {
                                "name": "autocapitalize",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Bound to the textarea's `autocapitalize` attribute."
                            },
                            {
                                "name": "inputmode",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Bound to the textarea's `inputmode` attribute."
                            },
                            {
                                "name": "placeholder",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Bound to the textarea's `placeholder` attribute."
                            },
                            {
                                "name": "readonly",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Bound to the textarea's `readonly` attribute."
                            },
                            {
                                "name": "required",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to mark the textarea as required."
                            },
                            {
                                "name": "minlength",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The minimum length of the input value."
                            },
                            {
                                "name": "maxlength",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The maximum length of the input value."
                            },
                            {
                                "name": "label",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Bound to the textarea's `aria-label` attribute."
                            },
                            {
                                "name": "textarea",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "HTMLTextAreaElement",
                                    "required": true
                                },
                                "description": "Returns the underlying textarea."
                            },
                            {
                                "name": "selectionStart",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "number",
                                    "required": true
                                },
                                "description": "Returns textarea's selection start."
                            },
                            {
                                "name": "selectionEnd",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "number",
                                    "required": true
                                },
                                "description": "Returns textarea's selection end."
                            },
                            {
                                "name": "focused",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the element currently has focus."
                            },
                            {
                                "name": "disabled",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the user cannot interact with this element."
                            },
                            {
                                "name": "_oldTabIndex",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Value of the `tabindex` attribute before `disabled` was activated.\n`null` means the attribute was not present."
                            },
                            {
                                "name": "_boundFocusBlurHandler",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "Function",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "validator",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Name of the validator to use."
                            },
                            {
                                "name": "invalid",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True if the last call to `validate` is invalid."
                            },
                            {
                                "name": "_validator",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "Recompute this every time it's needed, because we don't know if the\nunderlying IronValidatableBehaviorMeta has changed."
                            }
                        ]
                    }
                },
                {
                    "name": "iron-collapse",
                    "description": "`iron-collapse` creates a collapsible block of content.  By default, the content\nwill be collapsed.  Use `opened` or `toggle()` to show/hide the content.\n\n    <button on-click=\"toggle\">toggle collapse</button>\n\n    <iron-collapse id=\"collapse\">\n      <div>Content goes here...</div>\n    </iron-collapse>\n\n    ...\n\n    toggle: function() {\n      this.$.collapse.toggle();\n    }\n\n`iron-collapse` adjusts the max-height/max-width of the collapsible element to\nshow/hide the content.  So avoid putting padding/margin/border on the\ncollapsible directly, and instead put a div inside and style that.\n\n    <style>\n      .collapse-content {\n        padding: 15px;\n        border: 1px solid #dedede;\n      }\n    </style>\n\n    <iron-collapse>\n      <div class=\"collapse-content\">\n        <div>Content goes here...</div>\n      </div>\n    </iron-collapse>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--iron-collapse-transition-duration` | Animation transition duration | `300ms`",
                    "source": {
                        "module": "@polymer/iron-collapse/iron-collapse.d.ts",
                        "symbol": "IronCollapseElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "horizontal",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the orientation is horizontal; otherwise is vertical."
                            },
                            {
                                "name": "opened",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set opened to true to show the collapse element and to false to hide it."
                            },
                            {
                                "name": "transitioning",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "When true, the element is transitioning its opened state. When false,\nthe element has finished opening/closing."
                            },
                            {
                                "name": "noAnimation",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set noAnimation to true to disable animations."
                            },
                            {
                                "name": "hostAttributes",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "dimension",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [],
                                    "required": true
                                }
                            },
                            {
                                "name": "_parentResizable",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The closest ancestor element that implements `IronResizableBehavior`."
                            },
                            {
                                "name": "_notifyingDescendant",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True if this element is currently notifying its descendant elements of\nresize."
                            }
                        ]
                    }
                },
                {
                    "name": "iron-component-page",
                    "source": {
                        "module": "@polymer/iron-component-page/iron-component-page.d.ts",
                        "symbol": "IronComponentPageElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "descriptorUrl",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "URL of the Polymer Analyzer descriptor to fetch and display."
                            },
                            {
                                "name": "baseHref",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "By default all routing is performed using the URL fragment\n(e.g. `docs.html#/elements/my-element`).\n\nIf your server supports it and you would like to use the real URL\npath instead (e.g. `/api/docs/elements/my-element`), set this to\nthe base path where the page is mounted, omitting the trailing\nslash (e.g. `/api/docs` or *empty string* for the root path)."
                            },
                            {
                                "name": "rootNamespace",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Instead of displaying items relative to the top level of\n`descriptor`, start from this namespace."
                            },
                            {
                                "name": "demoSrcPrefix",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "URL prefix for demo iframes."
                            },
                            {
                                "name": "_loading",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_descriptorError",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_descriptor",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_path",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_narrow",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_title",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            }
                        ]
                    }
                },
                {
                    "name": "demo-snippet",
                    "description": "`demo-snippet` is a helper element that displays the source of a code snippet\nand its rendered demo. It can be used for both native elements and Polymer\nelements.\n\n    Example of a native element demo\n\n        <demo-snippet>\n          <template>\n            <input type=\"date\">\n          </template>\n        </demo-snippet>\n\n    Example of a Polymer <paper-checkbox> demo\n\n        <demo-snippet>\n          <template>\n            <paper-checkbox>Checkbox</paper-checkbox>\n            <paper-checkbox checked>Checkbox</paper-checkbox>\n          </template>\n        </demo-snippet>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--demo-snippet` | Mixin applied to the entire element | `{}`\n`--demo-snippet-demo` | Mixin applied to just the demo section | `{}`\n`--demo-snippet-code` | Mixin applied to just the code section | `{}`",
                    "source": {
                        "module": "@polymer/iron-demo-helpers/demo-snippet.d.ts",
                        "symbol": "DemoSnippetElement"
                    }
                },
                {
                    "name": "url-bar",
                    "description": "`url-bar` is a helper element that displays a simple read-only URL bar if\nand only if the page is in an iframe. In this way we can demo elements that\ndeal with the URL in our iframe-based demo environments.\n\nIf the page is not in an iframe, the url-bar element is not displayed.\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--url-bar` | Mixin applied to the entire element | `{}`",
                    "source": {
                        "module": "@polymer/iron-demo-helpers/url-bar.d.ts",
                        "symbol": "UrlBarElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "url",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "inIframe",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "path",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "query",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "hash",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            }
                        ]
                    }
                },
                {
                    "name": "iron-doc-api",
                    "source": {
                        "module": "@polymer/iron-doc-viewer/iron-doc-api.d.ts",
                        "symbol": "IronDocApiElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "_showProtectedProperties",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_showProtectedMethods",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_showProtectedEvents",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_staticMethods",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                }
                            },
                            {
                                "name": "_hasMethods",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                }
                            },
                            {
                                "name": "descriptor",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The [Polymer\nAnalyzer](https://github.com/Polymer/polymer-analyzer)-generated element\ndescriptor to display details for."
                            },
                            {
                                "name": "baseHref",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The base href where this doc viewer is located."
                            },
                            {
                                "name": "fragmentPrefix",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Prefix for fragment identifiers used in anchors.\nFor static routing `iron-component-page` can\nset this to a string identifying the current component."
                            },
                            {
                                "name": "_showProtected",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Whether protected members should be hidden or shown."
                            },
                            {
                                "name": "_showInherited",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Whether inherited members should be hidden or shown."
                            }
                        ]
                    }
                },
                {
                    "name": "iron-doc-behavior",
                    "description": "`iron-doc-behavior` renders documentation about a Polymer 1.x behavior from a\nJSON descriptor output by\n[Polymer Analyzer](https://github.com/Polymer/polymer-analyzer).",
                    "source": {
                        "module": "@polymer/iron-doc-viewer/iron-doc-behavior.d.ts",
                        "symbol": "IronDocBehaviorElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "title",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [],
                                    "required": true
                                }
                            },
                            {
                                "name": "descriptor",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The [Polymer\nAnalyzer](https://github.com/Polymer/polymer-analyzer)-generated element\ndescriptor to display details for."
                            },
                            {
                                "name": "baseHref",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The base href where this doc viewer is located."
                            },
                            {
                                "name": "fragmentPrefix",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Prefix for fragment identifiers used in anchors.\nFor static routing `iron-component-page` can\nset this to a string identifying the current component."
                            },
                            {
                                "name": "_showProtected",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Whether protected members should be hidden or shown."
                            },
                            {
                                "name": "_showInherited",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Whether inherited members should be hidden or shown."
                            }
                        ]
                    }
                },
                {
                    "name": "iron-doc-class",
                    "description": "`iron-doc-class` renders documentation about a JavaScript class from a JSON\ndescriptor output by\n[Polymer Analyzer](https://github.com/Polymer/polymer-analyzer).",
                    "source": {
                        "module": "@polymer/iron-doc-viewer/iron-doc-class.d.ts",
                        "symbol": "IronDocClassElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "title",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [],
                                    "required": true
                                }
                            },
                            {
                                "name": "descriptor",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The [Polymer\nAnalyzer](https://github.com/Polymer/polymer-analyzer)-generated element\ndescriptor to display details for."
                            },
                            {
                                "name": "baseHref",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The base href where this doc viewer is located."
                            },
                            {
                                "name": "fragmentPrefix",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Prefix for fragment identifiers used in anchors.\nFor static routing `iron-component-page` can\nset this to a string identifying the current component."
                            },
                            {
                                "name": "_showProtected",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Whether protected members should be hidden or shown."
                            },
                            {
                                "name": "_showInherited",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Whether inherited members should be hidden or shown."
                            }
                        ]
                    }
                },
                {
                    "name": "iron-doc-demo",
                    "source": {
                        "module": "@polymer/iron-doc-viewer/iron-doc-demo.d.ts",
                        "symbol": "IronDocDemoElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "demo",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "srcPrefix",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "title",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [],
                                    "required": true
                                }
                            }
                        ]
                    }
                },
                {
                    "name": "iron-doc-element",
                    "description": "`iron-doc-element` renders documentation about a custom element from a JSON\ndescriptor output by\n[Polymer Analyzer](https://github.com/Polymer/polymer-analyzer).",
                    "source": {
                        "module": "@polymer/iron-doc-viewer/iron-doc-element.d.ts",
                        "symbol": "IronDocElementElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "title",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [],
                                    "required": true
                                }
                            },
                            {
                                "name": "descriptor",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The [Polymer\nAnalyzer](https://github.com/Polymer/polymer-analyzer)-generated element\ndescriptor to display details for."
                            },
                            {
                                "name": "baseHref",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The base href where this doc viewer is located."
                            },
                            {
                                "name": "fragmentPrefix",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Prefix for fragment identifiers used in anchors.\nFor static routing `iron-component-page` can\nset this to a string identifying the current component."
                            },
                            {
                                "name": "_showProtected",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Whether protected members should be hidden or shown."
                            },
                            {
                                "name": "_showInherited",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Whether inherited members should be hidden or shown."
                            }
                        ]
                    }
                },
                {
                    "name": "iron-doc-function",
                    "description": "Renders documentation describing a function or method.",
                    "source": {
                        "module": "@polymer/iron-doc-viewer/iron-doc-function.d.ts",
                        "symbol": "IronDocFunctionElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "anchorId",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "static",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_privacy",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_showParamList",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "addImportPath",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            }
                        ]
                    }
                },
                {
                    "name": "iron-doc-hide-bar",
                    "source": {
                        "module": "@polymer/iron-doc-viewer/iron-doc-hide-bar.d.ts",
                        "symbol": "IronDocHideBarElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "visible",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            }
                        ]
                    }
                },
                {
                    "name": "iron-doc-mixin",
                    "description": "`iron-doc-element` renders documentation about a JavaScript mixin from a JSON\ndescriptor output by\n[Polymer Analyzer](https://github.com/Polymer/polymer-analyzer).",
                    "source": {
                        "module": "@polymer/iron-doc-viewer/iron-doc-mixin.d.ts",
                        "symbol": "IronDocMixinElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "title",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [],
                                    "required": true
                                }
                            },
                            {
                                "name": "descriptor",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The [Polymer\nAnalyzer](https://github.com/Polymer/polymer-analyzer)-generated element\ndescriptor to display details for."
                            },
                            {
                                "name": "baseHref",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The base href where this doc viewer is located."
                            },
                            {
                                "name": "fragmentPrefix",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Prefix for fragment identifiers used in anchors.\nFor static routing `iron-component-page` can\nset this to a string identifying the current component."
                            },
                            {
                                "name": "_showProtected",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Whether protected members should be hidden or shown."
                            },
                            {
                                "name": "_showInherited",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Whether inherited members should be hidden or shown."
                            }
                        ]
                    }
                },
                {
                    "name": "iron-doc-module",
                    "description": "`iron-doc-module` renders documentation about a JavaScript Module from a\nJSON descriptor output by\n[Polymer Analyzer](https://github.com/Polymer/polymer-analyzer).\n\nThe descriptor should be an analysis format Analysis object, filtered\ndown to contain only the exported contents of a single module.",
                    "source": {
                        "module": "@polymer/iron-doc-viewer/iron-doc-module.d.ts",
                        "symbol": "IronDocModuleElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "moduleSpecifier",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The module specifier of this module, used to give an example of\nhow to import it. So if this is 'foo' we will tell users to do:\n`import {} from 'foo';`"
                            },
                            {
                                "name": "descriptor",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The [Polymer\nAnalyzer](https://github.com/Polymer/polymer-analyzer)-generated element\ndescriptor to display details for."
                            },
                            {
                                "name": "baseHref",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The base href where this doc viewer is located."
                            },
                            {
                                "name": "fragmentPrefix",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Prefix for fragment identifiers used in anchors.\nFor static routing `iron-component-page` can\nset this to a string identifying the current component."
                            },
                            {
                                "name": "_showProtected",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Whether protected members should be hidden or shown."
                            },
                            {
                                "name": "_showInherited",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Whether inherited members should be hidden or shown."
                            }
                        ]
                    }
                },
                {
                    "name": "iron-doc-namespace",
                    "description": "`iron-doc-namespace` renders documentation about a JavaScript namespace from a\nJSON descriptor output by\n[Polymer Analyzer](https://github.com/Polymer/polymer-analyzer).",
                    "source": {
                        "module": "@polymer/iron-doc-viewer/iron-doc-namespace.d.ts",
                        "symbol": "IronDocNamespaceElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "title",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [],
                                    "required": true
                                }
                            },
                            {
                                "name": "descriptor",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The [Polymer\nAnalyzer](https://github.com/Polymer/polymer-analyzer)-generated element\ndescriptor to display details for."
                            },
                            {
                                "name": "baseHref",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The base href where this doc viewer is located."
                            },
                            {
                                "name": "fragmentPrefix",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Prefix for fragment identifiers used in anchors.\nFor static routing `iron-component-page` can\nset this to a string identifying the current component."
                            },
                            {
                                "name": "_showProtected",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Whether protected members should be hidden or shown."
                            },
                            {
                                "name": "_showInherited",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Whether inherited members should be hidden or shown."
                            }
                        ]
                    }
                },
                {
                    "name": "iron-doc-nav",
                    "source": {
                        "module": "@polymer/iron-doc-viewer/iron-doc-nav.d.ts",
                        "symbol": "IronDocNavElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "descriptor",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "path",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "baseHref",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_sections",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "any[]",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            }
                        ]
                    }
                },
                {
                    "name": "iron-doc-property",
                    "description": "Renders documentation describing a specific property of an element, mixin,\nclass, etc.",
                    "source": {
                        "module": "@polymer/iron-doc-viewer/iron-doc-property.d.ts",
                        "symbol": "IronDocPropertyElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "descriptor",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_privacy",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "anchorId",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Unique anchor ID for deep-linking."
                            }
                        ]
                    }
                },
                {
                    "name": "iron-doc-summary",
                    "source": {
                        "module": "@polymer/iron-doc-viewer/iron-doc-summary.d.ts",
                        "symbol": "IronDocSummaryElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "name",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "description",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "href",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            }
                        ]
                    }
                },
                {
                    "name": "iron-doc-viewer",
                    "description": "`iron-doc-viewer` renders documentation about elements, mixins, classes, and\nmore from a JSON descriptor output by\n[Polymer Analyzer](https://github.com/Polymer/polymer-analyzer).\n\nProvide the descriptor JSON as a data binding to `descriptor`:\n\n    <iron-doc-viewer descriptor=\"[[descriptor]]\"></iron-doc-viewer>\n\n`iron-doc-viewer` will initially display all items contained in the given\ndescriptor (e.g. elements, mixins, classes). `path` is used to display detail\nabout specific items within the descriptor (e.g. \"/elements/my-component\"), and\nby default is bound to the current `window.location` path.\n\n### Styling\n\nMost users should include the default theme alongside this element:\n\n    <script type=\"module\">\n      import '@polymer/iron-doc-viewer/default-theme.js';\n    </script>\n\n    <custom-style>\n      <style is=\"custom-style\" include=\"iron-doc-default-theme\"></style>\n    </custom-style>\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--iron-doc-font-code` | Mixin applied to code snippets. | `{}`\n`--iron-doc-font-body` | Mixin applied to non-code text. | `{}`",
                    "source": {
                        "module": "@polymer/iron-doc-viewer/iron-doc-viewer.d.ts",
                        "symbol": "IronDocViewerElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "descriptor",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The [Polymer\nAnalyzer](https://github.com/Polymer/polymer-analyzer)-generated\nelement descriptor to display details for."
                            },
                            {
                                "name": "baseHref",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "By default all routing is performed using the URL fragment\n(e.g. `docs.html#/elements/my-element`).\n\nIf your server supports it and you would like to use the real URL\npath instead (e.g. `/api/docs/elements/my-element`), set this to\nthe base path where the page is mounted, omitting the trailing\nslash (e.g. `/api/docs` or *empty string* for the root path)."
                            },
                            {
                                "name": "demoSrcPrefix",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "URL prefix for demo iframes."
                            },
                            {
                                "name": "path",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Path to the item in the descriptor to display.\n\nExamples:\n  - `/` for the root namespace\n  - `/elements/paper-button`\n  - `/mixins/paper-button-behavior`\n\nDefaults to the current `window.location` path.\n\nIf `baseHref` is set, it will be trimmed from the prefix of this\n`path`."
                            },
                            {
                                "name": "rootNamespace",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Instead of displaying items relative to the top level of\n`descriptor`, start from this namespace."
                            },
                            {
                                "name": "title",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "string",
                                    "required": true
                                },
                                "description": "Display title for the currently selected item."
                            },
                            {
                                "name": "demo",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True if the viewer is currently displaying a demo."
                            },
                            {
                                "name": "_descriptorType",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_urlPath",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_urlHash",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_currentDescriptor",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_fragmentPrefix",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_scrollTo",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_demo",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            }
                        ]
                    }
                },
                {
                    "name": "iron-dropdown",
                    "description": "`<iron-dropdown>` is a generalized element that is useful when you have\nhidden content (`dropdown-content`) that is revealed due to some change in\nstate that should cause it to do so.\n\nNote that this is a low-level element intended to be used as part of other\ncomposite elements that cause dropdowns to be revealed.\n\nExamples of elements that might be implemented using an `iron-dropdown`\ninclude comboboxes, menubuttons, selects. The list goes on.\n\nThe `<iron-dropdown>` element exposes attributes that allow the position\nof the `dropdown-content` relative to the `dropdown-trigger` to be\nconfigured.\n\n    <iron-dropdown horizontal-align=\"right\" vertical-align=\"top\">\n      <div slot=\"dropdown-content\">Hello!</div>\n    </iron-dropdown>\n\nIn the above example, the `<div>` assigned to the `dropdown-content` slot will\nbe hidden until the dropdown element has `opened` set to true, or when the\n`open` method is called on the element.",
                    "source": {
                        "module": "@polymer/iron-dropdown/iron-dropdown.d.ts",
                        "symbol": "IronDropdownElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "openAnimationConfig",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "An animation config. If provided, this will be used to animate the\nopening of the dropdown. Pass an Array for multiple animations.\nSee `neon-animation` documentation for more animation configuration\ndetails."
                            },
                            {
                                "name": "closeAnimationConfig",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "An animation config. If provided, this will be used to animate the\nclosing of the dropdown. Pass an Array for multiple animations.\nSee `neon-animation` documentation for more animation configuration\ndetails."
                            },
                            {
                                "name": "focusTarget",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If provided, this will be the element that will be focused when\nthe dropdown opens."
                            },
                            {
                                "name": "noAnimations",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to disable animations when opening and closing the\ndropdown."
                            },
                            {
                                "name": "allowOutsideScroll",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "By default, the dropdown will constrain scrolling on the page\nto itself when opened.\nSet to true in order to prevent scroll from being constrained\nto the dropdown when it opens.\nThis property is a shortcut to set `scrollAction` to lock or refit.\nPrefer directly setting the `scrollAction` property."
                            },
                            {
                                "name": "containedElement",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "The element that is contained by the dropdown, if any."
                            },
                            {
                                "name": "animationConfig",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Animation configuration. See README for more info."
                            },
                            {
                                "name": "entryAnimation",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Convenience property for setting an 'entry' animation. Do not set\n`animationConfig.entry` manually if using this. The animated node is set\nto `this` if using this property."
                            },
                            {
                                "name": "exitAnimation",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Convenience property for setting an 'exit' animation. Do not set\n`animationConfig.exit` manually if using this. The animated node is set\nto `this` if using this property."
                            },
                            {
                                "name": "opened",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True if the overlay is currently displayed."
                            },
                            {
                                "name": "canceled",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True if the overlay was canceled when it was last closed."
                            },
                            {
                                "name": "withBackdrop",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to display a backdrop behind the overlay. It traps the focus\nwithin the light DOM of the overlay."
                            },
                            {
                                "name": "noAutoFocus",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to disable auto-focusing the overlay or child nodes with\nthe `autofocus` attribute` when the overlay is opened."
                            },
                            {
                                "name": "noCancelOnEscKey",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to disable canceling the overlay with the ESC key."
                            },
                            {
                                "name": "noCancelOnOutsideClick",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to disable canceling the overlay by clicking outside it."
                            },
                            {
                                "name": "closingReason",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Contains the reason(s) this overlay was last closed (see\n`iron-overlay-closed`). `IronOverlayBehavior` provides the `canceled`\nreason; implementers of the behavior can provide other reasons in\naddition to `canceled`."
                            },
                            {
                                "name": "restoreFocusOnClose",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to enable restoring of focus when overlay is closed."
                            },
                            {
                                "name": "allowClickThrough",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to allow clicks to go through overlays.\nWhen the user clicks outside this overlay, the click may\nclose the overlay below."
                            },
                            {
                                "name": "alwaysOnTop",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to keep overlay always on top."
                            },
                            {
                                "name": "scrollAction",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Determines which action to perform when scroll outside an opened overlay\nhappens. Possible values: lock - blocks scrolling from happening, refit -\ncomputes the new position on the overlay cancel - causes the overlay to\nclose"
                            },
                            {
                                "name": "_focusedChild",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "Node",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "The node being focused."
                            },
                            {
                                "name": "backdropElement",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "Element",
                                    "required": true
                                },
                                "description": "The backdrop element."
                            },
                            {
                                "name": "_focusNode",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": "Node",
                                    "required": true
                                },
                                "description": "Returns the node to give focus to."
                            },
                            {
                                "name": "_focusableNodes",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": "Node[]",
                                    "required": true
                                },
                                "description": "Array of nodes that can receive focus (overlay included), ordered by\n`tabindex`. This is used to retrieve which is the first and last focusable\nnodes in order to wrap the focus for overlays `with-backdrop`.\n\nIf you know what is your content (specifically the first and last focusable\nchildren), you can override this method to return only `[firstFocusable,\nlastFocusable];`"
                            },
                            {
                                "name": "_parentResizable",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The closest ancestor element that implements `IronResizableBehavior`."
                            },
                            {
                                "name": "_notifyingDescendant",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True if this element is currently notifying its descendant elements of\nresize."
                            },
                            {
                                "name": "sizingTarget",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "Element",
                                    "required": true
                                },
                                "description": "The element that will receive a `max-height`/`width`. By default it is\nthe same as `this`, but it can be set to a child element. This is useful,\nfor example, for implementing a scrolling region inside the element."
                            },
                            {
                                "name": "fitInto",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The element to fit `this` into."
                            },
                            {
                                "name": "noOverlap",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Will position the element around the positionTarget without overlapping\nit."
                            },
                            {
                                "name": "positionTarget",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "Element",
                                    "required": true
                                },
                                "description": "The element that should be used to position the element. If not set, it\nwill default to the parent node."
                            },
                            {
                                "name": "horizontalAlign",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The orientation against which to align the dropdown content\nhorizontally relative to the dropdown trigger.\nOverridden from `Polymer.IronFitBehavior`."
                            },
                            {
                                "name": "verticalAlign",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The orientation against which to align the dropdown content\nvertically relative to the dropdown trigger.\nOverridden from `Polymer.IronFitBehavior`."
                            },
                            {
                                "name": "dynamicAlign",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, it will use `horizontalAlign` and `verticalAlign` values as\npreferred alignment and if there's not enough space, it will pick the\nvalues which minimize the cropping."
                            },
                            {
                                "name": "horizontalOffset",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "A pixel value that will be added to the position calculated for the\ngiven `horizontalAlign`, in the direction of alignment. You can think\nof it as increasing or decreasing the distance to the side of the\nscreen given by `horizontalAlign`.\n\nIf `horizontalAlign` is \"left\" or \"center\", this offset will increase or\ndecrease the distance to the left side of the screen: a negative offset\nwill move the dropdown to the left; a positive one, to the right.\n\nConversely if `horizontalAlign` is \"right\", this offset will increase\nor decrease the distance to the right side of the screen: a negative\noffset will move the dropdown to the right; a positive one, to the left."
                            },
                            {
                                "name": "verticalOffset",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "A pixel value that will be added to the position calculated for the\ngiven `verticalAlign`, in the direction of alignment. You can think\nof it as increasing or decreasing the distance to the side of the\nscreen given by `verticalAlign`.\n\nIf `verticalAlign` is \"top\" or \"middle\", this offset will increase or\ndecrease the distance to the top side of the screen: a negative offset\nwill move the dropdown upwards; a positive one, downwards.\n\nConversely if `verticalAlign` is \"bottom\", this offset will increase\nor decrease the distance to the bottom side of the screen: a negative\noffset will move the dropdown downwards; a positive one, upwards."
                            },
                            {
                                "name": "autoFitOnAttach",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to auto-fit on attach."
                            },
                            {
                                "name": "expandSizingTargetForScrollbars",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true and scrollbars are added to `sizingTarget` after it is\npositioned, the size of the added scrollbars will be added to its\n`maxWidth` and `maxHeight`."
                            },
                            {
                                "name": "_fitInfo",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "object",
                                        "null"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_fitWidth",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                }
                            },
                            {
                                "name": "_fitHeight",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                }
                            },
                            {
                                "name": "_fitLeft",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                }
                            },
                            {
                                "name": "_fitTop",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                }
                            },
                            {
                                "name": "_defaultPositionTarget",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "The element that should be used to position the element,\nif no position target is configured."
                            },
                            {
                                "name": "_localeHorizontalAlign",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "The horizontal align value, accounting for the RTL/LTR text direction."
                            },
                            {
                                "name": "keyEventTarget",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "EventTarget",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "The EventTarget that will be firing relevant KeyboardEvents. Set it to\n`null` to disable the listeners."
                            },
                            {
                                "name": "stopKeyboardEventPropagation",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents."
                            },
                            {
                                "name": "_boundKeyHandlers",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "any[]",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_imperativeKeyBindings",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "own properties of everything on the \"prototype\"."
                            },
                            {
                                "name": "keyBindings",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "object",
                                    "required": true
                                },
                                "description": "To be used to express what combination of keys  will trigger the relative\ncallback. e.g. `keyBindings: { 'esc': '_onEscPressed'}`"
                            },
                            {
                                "name": "focused",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the element currently has focus."
                            },
                            {
                                "name": "disabled",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the user cannot interact with this element."
                            },
                            {
                                "name": "_oldTabIndex",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Value of the `tabindex` attribute before `disabled` was activated.\n`null` means the attribute was not present."
                            },
                            {
                                "name": "_boundFocusBlurHandler",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "Function",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            }
                        ]
                    }
                },
                {
                    "name": "iron-icon",
                    "description": "The `iron-icon` element displays an icon. By default an icon renders as a 24px\nsquare.\n\nExample using src:\n\n    <iron-icon src=\"star.png\"></iron-icon>\n\nExample setting size to 32px x 32px:\n\n    <iron-icon class=\"big\" src=\"big_star.png\"></iron-icon>\n\n    <style is=\"custom-style\">\n      .big {\n        --iron-icon-height: 32px;\n        --iron-icon-width: 32px;\n      }\n    </style>\n\nThe iron elements include several sets of icons. To use the default set of\nicons, import `iron-icons.js` and use the `icon` attribute to specify an icon:\n\n    <script type=\"module\">\n      import \"@polymer/iron-icons/iron-icons.js\";\n    </script>\n\n    <iron-icon icon=\"menu\"></iron-icon>\n\nTo use a different built-in set of icons, import the specific\n`iron-icons/<iconset>-icons.js`, and specify the icon as `<iconset>:<icon>`.\nFor example, to use a communication icon, you would use:\n\n    <script type=\"module\">\n      import \"@polymer/iron-icons/communication-icons.js\";\n    </script>\n\n    <iron-icon icon=\"communication:email\"></iron-icon>\n\nYou can also create custom icon sets of bitmap or SVG icons.\n\nExample of using an icon named `cherry` from a custom iconset with the ID\n`fruit`:\n\n    <iron-icon icon=\"fruit:cherry\"></iron-icon>\n\nSee `<iron-iconset>` and `<iron-iconset-svg>` for more information about how to\ncreate a custom iconset.\n\nSee the `iron-icons` demo to see the icons available in the various iconsets.\n\n### Styling\n\nThe following custom properties are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--iron-icon` | Mixin applied to the icon | {}\n`--iron-icon-width` | Width of the icon | `24px`\n`--iron-icon-height` | Height of the icon | `24px`\n`--iron-icon-fill-color` | Fill color of the svg icon | `currentcolor`\n`--iron-icon-stroke-color` | Stroke color of the svg icon | none",
                    "source": {
                        "module": "@polymer/iron-icon/iron-icon.d.ts",
                        "symbol": "IronIconElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "icon",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The name of the icon to use. The name should be of the form:\n`iconset_name:icon_name`."
                            },
                            {
                                "name": "theme",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The name of the theme to used, if one is specified by the\niconset."
                            },
                            {
                                "name": "src",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If using iron-icon without an iconset, you can set the src to be\nthe URL of an individual icon image file. Note that this will take\nprecedence over a given icon attribute."
                            },
                            {
                                "name": "_meta",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": "IronMeta",
                                    "required": true
                                }
                            },
                            {
                                "name": "_DEFAULT_ICONSET",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": "string",
                                    "required": true
                                }
                            }
                        ]
                    }
                },
                {
                    "name": "iron-iconset-svg",
                    "description": "The `iron-iconset-svg` element allows users to define their own icon sets\nthat contain svg icons. The svg icon elements should be children of the\n`iron-iconset-svg` element. Multiple icons should be given distinct id's.\n\nUsing svg elements to create icons has a few advantages over traditional\nbitmap graphics like jpg or png. Icons that use svg are vector based so\nthey are resolution independent and should look good on any device. They\nare stylable via css. Icons can be themed, colorized, and even animated.\n\nExample:\n\n    <iron-iconset-svg name=\"my-svg-icons\" size=\"24\">\n      <svg>\n        <defs>\n          <g id=\"shape\">\n            <rect x=\"12\" y=\"0\" width=\"12\" height=\"24\" />\n            <circle cx=\"12\" cy=\"12\" r=\"12\" />\n          </g>\n        </defs>\n      </svg>\n    </iron-iconset-svg>\n\nThis will automatically register the icon set \"my-svg-icons\" to the iconset\ndatabase.  To use these icons from within another element, make a\n`iron-iconset` element and call the `byId` method\nto retrieve a given iconset. To apply a particular icon inside an\nelement use the `applyIcon` method. For example:\n\n    iconset.applyIcon(iconNode, 'car');",
                    "source": {
                        "module": "@polymer/iron-iconset-svg/iron-iconset-svg.d.ts",
                        "symbol": "IronIconsetSvgElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "name",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The name of the iconset."
                            },
                            {
                                "name": "size",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The size of an individual icon. Note that icons must be square."
                            },
                            {
                                "name": "rtlMirroring",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to enable mirroring of icons where specified when they are\nstamped. Icons that should be mirrored should be decorated with a\n`mirror-in-rtl` attribute.\n\nNOTE: For performance reasons, direction will be resolved once per\ndocument per iconset, so moving icons in and out of RTL subtrees will\nnot cause their mirrored state to change."
                            },
                            {
                                "name": "useGlobalRtlAttribute",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to measure RTL based on the dir attribute on the body or\nhtml elements (measured on document.body or document.documentElement as\navailable)."
                            }
                        ]
                    }
                },
                {
                    "name": "iron-iconset",
                    "description": "The `iron-iconset` element allows users to define their own icon set using\nan image file. (To create an iconset using SVG icons, see\n[`iron-iconset-svg`](iron-iconset-svg).)\n\nThe `src` property specifies the url of the icon image. Multiple icons may\nbe included in this image and they may be organized into rows. The `icons`\nproperty is a space separated list of names corresponding to the icons. The\nnames must be ordered as the icons are ordered in the icon image. Icons are\nexpected to be square and are the size specified by the `size` property. The\n`width` property corresponds to the width of the icon image and must be\nspecified if icons are arranged into multiple rows in the image.\n\nAll `iron-iconset` elements are available for use by other `iron-iconset`\nelements via a database keyed by id. Typically, an element author that wants\nto support a set of custom icons uses a `iron-iconset` to retrieve and use\nanother, user-defined icon set, or simply uses the [`iron-icon`](iron-icon)\nelement to display an icon by specifying its icon set name and id.\n\nExample:\n\n    <iron-iconset id=\"my-icons\" src=\"my-icons.png\" width=\"96\" size=\"24\"\n        icons=\"location place starta stopb bus car train walk\">\n    </iron-iconset>\n\nThis will automatically register the icon set \"my-icons\" to the iconset\ndatabase. To use these icons from within another element, make a\n`iron-iconset` element and call the `byId` method to retrieve a given\niconset. To apply a particular icon to an element, use the `applyIcon`\nmethod. For example:\n\n    iconset.applyIcon(iconNode, 'car');\n\nThemed icon sets are also supported. The `iron-iconset` can contain child\n`property` elements that specify a theme with an offsetX and offsetY of the\ntheme within the icon resource. For example.\n\n    <iron-iconset id=\"my-icons\" src=\"my-icons.png\" width=\"96\" size=\"24\"\n        icons=\"location place starta stopb bus car train walk\">\n      <property theme=\"special\" offsetX=\"256\" offsetY=\"24\"></property>\n    </iron-iconset>\n\nThen a themed icon can be applied like this:\n\n    iconset.applyIcon(iconNode, 'car', 'special');\n\nSee also:\n\n- [`iron-iconset-svg`](iron-iconset-svg). Build icon sets with SVG elements.\n- [`iron-icons`](iron-icons). Predefined icon sets.\n- [`iron-icon`](iron-icon). Simple element to display an icon.",
                    "source": {
                        "module": "@polymer/iron-iconset/iron-iconset.d.ts",
                        "symbol": "IronIconsetElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "src",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The URL of the iconset image."
                            },
                            {
                                "name": "name",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The name of the iconset."
                            },
                            {
                                "name": "width",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The width of the iconset image. This must only be specified if the\nicons are arranged into separate rows inside the image."
                            },
                            {
                                "name": "icons",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "A space separated list of names corresponding to icons in the iconset\nimage file. This list must be ordered the same as the icon images\nin the image file."
                            },
                            {
                                "name": "size",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The size of an individual icon. Note that icons must be square."
                            },
                            {
                                "name": "_offsetX",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The horizontal offset of the icon images in the inconset src image.\nThis is typically used if the image resource contains additional images\nbeside those intended for the iconset."
                            },
                            {
                                "name": "_offsetY",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The vertical offset of the icon images in the inconset src image.\nThis is typically used if the image resource contains additional images\nbeside those intended for the iconset."
                            },
                            {
                                "name": "iconNames",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "any[]",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Array of fully-qualified names of icons in this set."
                            },
                            {
                                "name": "hostAttributes",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null"
                                    ],
                                    "required": true
                                }
                            }
                        ]
                    }
                },
                {
                    "name": "iron-image",
                    "description": "`iron-image` is an element for displaying an image that provides useful sizing and\npreloading options not found on the standard `<img>` tag.\n\nThe `sizing` option allows the image to be either cropped (`cover`) or\nletterboxed (`contain`) to fill a fixed user-size placed on the element.\n\nThe `preload` option prevents the browser from rendering the image until the\nimage is fully loaded.  In the interim, either the element's CSS `background-color`\ncan be be used as the placeholder, or the `placeholder` property can be\nset to a URL (preferably a data-URI, for instant rendering) for an\nplaceholder image.\n\nThe `fade` option (only valid when `preload` is set) will cause the placeholder\nimage/color to be faded out once the image is rendered.\n\nExamples:\n\n  Basically identical to `<img src=\"...\">` tag:\n\n    <iron-image src=\"http://lorempixel.com/400/400\"></iron-image>\n\n  Will letterbox the image to fit:\n\n    <iron-image style=\"width:400px; height:400px;\" sizing=\"contain\"\n      src=\"http://lorempixel.com/600/400\"></iron-image>\n\n  Will crop the image to fit:\n\n    <iron-image style=\"width:400px; height:400px;\" sizing=\"cover\"\n      src=\"http://lorempixel.com/600/400\"></iron-image>\n\n  Will show light-gray background until the image loads:\n\n    <iron-image style=\"width:400px; height:400px; background-color: lightgray;\"\n      sizing=\"cover\" preload src=\"http://lorempixel.com/600/400\"></iron-image>\n\n  Will show a base-64 encoded placeholder image until the image loads:\n\n    <iron-image style=\"width:400px; height:400px;\" placeholder=\"data:image/gif;base64,...\"\n      sizing=\"cover\" preload src=\"http://lorempixel.com/600/400\"></iron-image>\n\n  Will fade the light-gray background out once the image is loaded:\n\n    <iron-image style=\"width:400px; height:400px; background-color: lightgray;\"\n      sizing=\"cover\" preload fade src=\"http://lorempixel.com/600/400\"></iron-image>\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--iron-image-placeholder` | Mixin applied to #placeholder | `{}`\n`--iron-image-width` | Sets the width of the wrapped image | `auto`\n`--iron-image-height` | Sets the height of the wrapped image | `auto`",
                    "source": {
                        "module": "@polymer/iron-image/iron-image.d.ts",
                        "symbol": "IronImageElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "src",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The URL of an image."
                            },
                            {
                                "name": "alt",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "A short text alternative for the image."
                            },
                            {
                                "name": "crossorigin",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "CORS enabled images support:\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image"
                            },
                            {
                                "name": "preventLoad",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "When true, the image is prevented from loading and any placeholder is\nshown.  This may be useful when a binding to the src property is known to\nbe invalid, to prevent 404 requests."
                            },
                            {
                                "name": "sizing",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Sets a sizing option for the image.  Valid values are `contain` (full\naspect ratio of the image is contained within the element and\nletterboxed) or `cover` (image is cropped in order to fully cover the\nbounds of the element), or `null` (default: image takes natural size)."
                            },
                            {
                                "name": "position",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "When a sizing option is used (`cover` or `contain`), this determines\nhow the image is aligned within the element bounds."
                            },
                            {
                                "name": "preload",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "When `true`, any change to the `src` property will cause the\n`placeholder` image to be shown until the new image has loaded."
                            },
                            {
                                "name": "placeholder",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "This image will be used as a background/placeholder until the src image\nhas loaded.  Use of a data-URI for placeholder is encouraged for instant\nrendering."
                            },
                            {
                                "name": "fade",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "When `preload` is true, setting `fade` to true will cause the image to\nfade into place."
                            },
                            {
                                "name": "loaded",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Read-only value that is true when the image is loaded."
                            },
                            {
                                "name": "loading",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Read-only value that tracks the loading state of the image when the\n`preload` option is used."
                            },
                            {
                                "name": "error",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Read-only value that indicates that the last set `src` failed to load."
                            },
                            {
                                "name": "width",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Can be used to set the width of image (e.g. via binding); size may also\nbe set via CSS."
                            },
                            {
                                "name": "height",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Can be used to set the height of image (e.g. via binding); size may also\nbe set via CSS."
                            }
                        ]
                    }
                },
                {
                    "name": "iron-input",
                    "description": "`<iron-input>` is a wrapper to a native `<input>` element, that adds two-way\nbinding and prevention of invalid input. To use it, you must distribute a native\n`<input>` yourself. You can continue to use the native `input` as you would\nnormally:\n\n    <iron-input>\n      <input>\n    </iron-input>\n\n    <iron-input>\n      <input type=\"email\" disabled>\n    </iron-input>\n\n### Two-way binding\n\nBy default you can only get notified of changes to a native `<input>`'s `value`\ndue to user input:\n\n    <input value=\"{{myValue::input}}\">\n\nThis means that if you imperatively set the value (i.e. `someNativeInput.value =\n'foo'`), no events will be fired and this change cannot be observed.\n\n`iron-input` adds the `bind-value` property that mirrors the native `input`'s\n'`value` property; this property can be used for two-way data binding.\n`bind-value` will notify if it is changed either by user input or by script.\n\n    <iron-input bind-value=\"{{myValue}}\">\n      <input>\n    </iron-input>\n\nNote: this means that if you want to imperatively set the native `input`'s, you\n_must_ set `bind-value` instead, so that the wrapper `iron-input` can be\nnotified.\n\n### Validation\n\n`iron-input` uses the native `input`'s validation. For simplicity, `iron-input`\nhas a `validate()` method (which internally just checks the distributed\n`input`'s validity), which sets an `invalid` attribute that can also be used for\nstyling.\n\nTo validate automatically as you type, you can use the `auto-validate`\nattribute.\n\n`iron-input` also fires an `iron-input-validate` event after `validate()` is\ncalled. You can use it to implement a custom validator:\n\n    var CatsOnlyValidator = {\n      validate: function(ironInput) {\n        var valid = !ironInput.bindValue || ironInput.bindValue === 'cat';\n        ironInput.invalid = !valid;\n        return valid;\n      }\n    }\n    ironInput.addEventListener('iron-input-validate', function() {\n      CatsOnly.validate(input2);\n    });\n\nYou can also use an element implementing an\n[`IronValidatorBehavior`](/element/PolymerElements/iron-validatable-behavior).\nThis example can also be found in the demo for this element:\n\n    <iron-input validator=\"cats-only\">\n      <input>\n    </iron-input>\n\n### Preventing invalid input\n\nIt may be desirable to only allow users to enter certain characters. You can use\nthe `allowed-pattern` attribute to accomplish this. This feature is separate\nfrom validation, and `allowed-pattern` does not affect how the input is\nvalidated.\n\n    // Only allow typing digits, but a valid input has exactly 5 digits.\n    <iron-input allowed-pattern=\"[0-9]\">\n      <input pattern=\"\\d{5}\">\n    </iron-input>",
                    "source": {
                        "module": "@polymer/iron-input/iron-input.d.ts",
                        "symbol": "IronInputElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "bindValue",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Use this property instead of `value` for two-way data binding, or to\nset a default value for the input. **Do not** use the distributed\ninput's `value` property to set a default value."
                            },
                            {
                                "name": "value",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Computed property that echoes `bindValue` (mostly used for Polymer 1.0\nbackcompatibility, if you were one-way binding to the Polymer 1.0\n`input is=\"iron-input\"` value attribute)."
                            },
                            {
                                "name": "allowedPattern",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Regex-like list of characters allowed as input; all characters not in the\nlist will be rejected. The recommended format should be a list of allowed\ncharacters, for example, `[a-zA-Z0-9.+-!;:]`.\n\nThis pattern represents the allowed characters for the field; as the user\ninputs text, each individual character will be checked against the\npattern (rather than checking the entire value as a whole). If a\ncharacter is not a match, it will be rejected.\n\nPasted input will have each character checked individually; if any\ncharacter doesn't match `allowedPattern`, the entire pasted string will\nbe rejected.\n\nNote: if you were using `iron-input` in 1.0, you were also required to\nset `prevent-invalid-input`. This is no longer needed as of Polymer 2.0,\nand will be set automatically for you if an `allowedPattern` is provided."
                            },
                            {
                                "name": "autoValidate",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to auto-validate the input value as you type."
                            },
                            {
                                "name": "_inputElement",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The native input element."
                            },
                            {
                                "name": "inputElement",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "Returns the distributed input element."
                            },
                            {
                                "name": "_patternRegExp",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                }
                            },
                            {
                                "name": "validator",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Name of the validator to use."
                            },
                            {
                                "name": "invalid",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True if the last call to `validate` is invalid."
                            },
                            {
                                "name": "_validator",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "Recompute this every time it's needed, because we don't know if the\nunderlying IronValidatableBehaviorMeta has changed."
                            }
                        ]
                    }
                },
                {
                    "name": "iron-jsonp-library",
                    "description": "Loads specified jsonp library.\n\n  Example:\n\n      <iron-jsonp-library\n        library-url=\"https://apis.google.com/js/plusone.js?onload=%%callback%%\"\n        notify-event=\"api-load\"\n        library-loaded=\"{{loaded}}\"></iron-jsonp-library>\n\n  Will emit 'api-load' event when loaded, and set 'loaded' to true\n\n  Implemented by  Polymer.IronJsonpLibraryBehavior. Use it\n  to create specific library loader elements.",
                    "source": {
                        "module": "@polymer/iron-jsonp-library/iron-jsonp-library.d.ts",
                        "symbol": "IronJsonpLibraryElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "libraryUrl",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Library url. Must contain string `%%callback%%`.\n\n`%%callback%%` is a placeholder for jsonp wrapper function name\n\nEx: https://maps.googleapis.com/maps/api/js?callback=%%callback%%"
                            },
                            {
                                "name": "callbackName",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set if library requires specific callback name.\nName will be automatically generated if not set."
                            },
                            {
                                "name": "notifyEvent",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "event with name specified in 'notifyEvent' attribute\nwill fire upon successful load"
                            },
                            {
                                "name": "libraryLoaded",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True if library has been successfully loaded"
                            },
                            {
                                "name": "libraryErrorMessage",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Not null if library has failed to load"
                            }
                        ]
                    }
                },
                {
                    "name": "iron-list",
                    "description": "`iron-list` displays a virtual, 'infinite' list. The template inside\nthe iron-list element represents the DOM to create for each list item.\nThe `items` property specifies an array of list item data.\n\nFor performance reasons, not every item in the list is rendered at once;\ninstead a small subset of actual template elements *(enough to fill the\nviewport)* are rendered and reused as the user scrolls. As such, it is important\nthat all state of the list template is bound to the model driving it, since the\nview may be reused with a new model at any time. Particularly, any state that\nmay change as the result of a user interaction with the list item must be bound\nto the model to avoid view state inconsistency.\n\n### Sizing iron-list\n\n`iron-list` must either be explicitly sized, or delegate scrolling to an\nexplicitly sized parent. By \"explicitly sized\", we mean it either has an\nexplicit CSS `height` property set via a class or inline style, or else is sized\nby other layout means (e.g. the `flex` or `fit` classes).\n\n#### Flexbox - [jsbin](https://jsbin.com/vejoni/edit?html,output)\n\n```html\n<template is=\"x-list\">\n  <style>\n    :host {\n      display: block;\n      height: 100vh;\n      display: flex;\n      flex-direction: column;\n    }\n\n    iron-list {\n      flex: 1 1 auto;\n    }\n  </style>\n  <app-toolbar>App name</app-toolbar>\n  <iron-list items=\"[[items]]\">\n    <template>\n      <div>\n        ...\n      </div>\n    </template>\n  </iron-list>\n</template>\n```\n#### Explicit size - [jsbin](https://jsbin.com/vopucus/edit?html,output)\n```html\n<template is=\"x-list\">\n  <style>\n    :host {\n      display: block;\n    }\n\n    iron-list {\n      height: 100vh; /* don't use % values unless the parent element is sized.\n\\/\n    }\n  </style>\n  <iron-list items=\"[[items]]\">\n    <template>\n      <div>\n        ...\n      </div>\n    </template>\n  </iron-list>\n</template>\n```\n#### Main document scrolling -\n[jsbin](https://jsbin.com/wevirow/edit?html,output)\n```html\n<head>\n  <style>\n    body {\n      height: 100vh;\n      margin: 0;\n      display: flex;\n      flex-direction: column;\n    }\n\n    app-toolbar {\n      position: fixed;\n      top: 0;\n      left: 0;\n      right: 0;\n    }\n\n    iron-list {\n      /* add padding since the app-toolbar is fixed at the top *\\/\n      padding-top: 64px;\n    }\n  </style>\n</head>\n<body>\n  <app-toolbar>App name</app-toolbar>\n  <iron-list scroll-target=\"document\">\n    <template>\n      <div>\n        ...\n      </div>\n    </template>\n  </iron-list>\n</body>\n```\n\n`iron-list` must be given a `<template>` which contains exactly one element. In\nthe examples above we used a `<div>`, but you can provide any element (including\ncustom elements).\n\n### Template model\n\nList item templates should bind to template models of the following structure:\n\n```js\n{\n  index: 0,        // index in the item array\n  selected: false, // true if the current item is selected\n  tabIndex: -1,    // a dynamically generated tabIndex for focus management\n  item: {}         // user data corresponding to items[index]\n}\n```\n\nAlternatively, you can change the property name used as data index by changing\nthe `indexAs` property. The `as` property defines the name of the variable to\nadd to the binding scope for the array.\n\nFor example, given the following `data` array:\n\n##### data.json\n\n```js\n[\n  {\"name\": \"Bob\"},\n  {\"name\": \"Tim\"},\n  {\"name\": \"Mike\"}\n]\n```\n\nThe following code would render the list (note the name property is bound from\nthe model object provided to the template scope):\n\n```html\n<iron-ajax url=\"data.json\" last-response=\"{{data}}\" auto></iron-ajax>\n<iron-list items=\"[[data]]\" as=\"item\">\n  <template>\n    <div>\n      Name: [[item.name]]\n    </div>\n  </template>\n</iron-list>\n```\n\n### Grid layout\n\n`iron-list` supports a grid layout in addition to linear layout by setting\nthe `grid` attribute.  In this case, the list template item must have both fixed\nwidth and height (e.g. via CSS). Based on this, the number of items\nper row are determined automatically based on the size of the list viewport.\n\n### Accessibility\n\n`iron-list` automatically manages the focus state for the items. It also\nprovides a `tabIndex` property within the template scope that can be used for\nkeyboard navigation. For example, users can press the up and down keys to move\nto previous and next items in the list:\n\n```html\n<iron-list items=\"[[data]]\" as=\"item\">\n  <template>\n    <div tabindex$=\"[[tabIndex]]\">\n      Name: [[item.name]]\n    </div>\n  </template>\n</iron-list>\n```\n\n### Styling\n\nYou can use the `--iron-list-items-container` mixin to style the container of\nitems:\n\n```css\niron-list {\n --iron-list-items-container: {\n    margin: auto;\n  };\n}\n```\n\n### Resizing\n\n`iron-list` lays out the items when it receives a notification via the\n`iron-resize` event. This event is fired by any element that implements\n`IronResizableBehavior`.\n\nBy default, elements such as `iron-pages`, `paper-tabs` or `paper-dialog` will\ntrigger this event automatically. If you hide the list manually (e.g. you use\n`display: none`) you might want to implement `IronResizableBehavior` or fire\nthis event manually right after the list became visible again. For example:\n\n```js\ndocument.querySelector('iron-list').fire('iron-resize');\n```\n\n### When should `<iron-list>` be used?\n\n`iron-list` should be used when a page has significantly more DOM nodes than the\nones visible on the screen. e.g. the page has 500 nodes, but only 20 are visible\nat a time. This is why we refer to it as a `virtual` list. In this case, a\n`dom-repeat` will still create 500 nodes which could slow down the web app, but\n`iron-list` will only create 20.\n\nHowever, having an `iron-list` does not mean that you can load all the data at\nonce. Say you have a million records in the database, you want to split the data\ninto pages so you can bring in a page at the time. The page could contain 500\nitems, and iron-list will only render 20.",
                    "source": {
                        "module": "@polymer/iron-list/iron-list.d.ts",
                        "symbol": "IronListElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "items",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "any[]",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "An array containing items determining how many instances of the template\nto stamp and that that each template instance should bind to."
                            },
                            {
                                "name": "as",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The name of the variable to add to the binding scope for the array\nelement associated with a given template instance."
                            },
                            {
                                "name": "indexAs",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The name of the variable to add to the binding scope with the index\nfor the row."
                            },
                            {
                                "name": "selectedAs",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The name of the variable to add to the binding scope to indicate\nif the row is selected."
                            },
                            {
                                "name": "grid",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "When true, the list is rendered as a grid. Grid items must have\nfixed width and height set via CSS. e.g.\n\n```html\n<iron-list grid>\n  <template>\n     <div style=\"width: 100px; height: 100px;\"> 100x100 </div>\n  </template>\n</iron-list>\n```"
                            },
                            {
                                "name": "selectionEnabled",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "When true, tapping a row will select the item, placing its data model\nin the set of selected items retrievable via the selection property.\n\nNote that tapping focusable elements within the list item will not\nresult in selection, since they are presumed to have their * own action."
                            },
                            {
                                "name": "selectedItem",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "When `multiSelection` is false, this is the currently selected item, or\n`null` if no item is selected."
                            },
                            {
                                "name": "selectedItems",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "When `multiSelection` is true, this is an array that contains the\nselected items."
                            },
                            {
                                "name": "multiSelection",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "When `true`, multiple items may be selected at once (in this case,\n`selected` is an array of currently selected items).  When `false`,\nonly one item may be selected at a time."
                            },
                            {
                                "name": "scrollOffset",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The offset top from the scrolling element to the iron-list element.\nThis value can be computed using the position returned by\n`getBoundingClientRect()` although it's preferred to use a constant value\nwhen possible.\n\nThis property is useful when an external scrolling element is used and\nthere's some offset between the scrolling element and the list. For\nexample: a header is placed above the list."
                            },
                            {
                                "name": "_ratio",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": "number",
                                    "required": true
                                },
                                "description": "The ratio of hidden tiles that should remain in the scroll direction.\nRecommended value ~0.5, so it will distribute tiles evenly in both\ndirections."
                            },
                            {
                                "name": "_scrollerPaddingTop",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": "number",
                                    "required": true
                                },
                                "description": "The padding-top value for the list."
                            },
                            {
                                "name": "_scrollPosition",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": "number",
                                    "required": true
                                },
                                "description": "This value is a cached value of `scrollTop` from the last `scroll` event."
                            },
                            {
                                "name": "_physicalSize",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": "number",
                                    "required": true
                                },
                                "description": "The sum of the heights of all the tiles in the DOM."
                            },
                            {
                                "name": "_physicalAverage",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": "number",
                                    "required": true
                                },
                                "description": "The average `offsetHeight` of the tiles observed till now."
                            },
                            {
                                "name": "_physicalAverageCount",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": "number",
                                    "required": true
                                },
                                "description": "The number of tiles which `offsetHeight` > 0 observed until now."
                            },
                            {
                                "name": "_physicalTop",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": "number",
                                    "required": true
                                },
                                "description": "The Y position of the item rendered in the `_physicalStart`\ntile relative to the scrolling list."
                            },
                            {
                                "name": "_virtualCount",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": "number",
                                    "required": true
                                },
                                "description": "The number of items in the list."
                            },
                            {
                                "name": "_estScrollHeight",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": "number",
                                    "required": true
                                },
                                "description": "The estimated scroll height based on `_physicalAverage`"
                            },
                            {
                                "name": "_scrollHeight",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": "number",
                                    "required": true
                                },
                                "description": "The scroll height of the dom node"
                            },
                            {
                                "name": "_viewportHeight",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": "number",
                                    "required": true
                                },
                                "description": "The height of the list. This is referred as the viewport in the context of\nlist."
                            },
                            {
                                "name": "_viewportWidth",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": "number",
                                    "required": true
                                },
                                "description": "The width of the list. This is referred as the viewport in the context of\nlist."
                            },
                            {
                                "name": "_physicalItems",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "HTMLElement[]",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "An array of DOM nodes that are currently in the tree"
                            },
                            {
                                "name": "_physicalSizes",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "number[]",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "An array of heights for each item in `_physicalItems`"
                            },
                            {
                                "name": "_firstVisibleIndexVal",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "number",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "A cached value for the first visible index.\nSee `firstVisibleIndex`"
                            },
                            {
                                "name": "_lastVisibleIndexVal",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "number",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "A cached value for the last visible index.\nSee `lastVisibleIndex`"
                            },
                            {
                                "name": "_maxPages",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": "number",
                                    "required": true
                                },
                                "description": "The max number of pages to render. One page is equivalent to the height of\nthe list."
                            },
                            {
                                "name": "_focusedItem",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": "null",
                                    "required": true
                                },
                                "description": "The currently focused physical item."
                            },
                            {
                                "name": "_focusedVirtualIndex",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "The virtual index of the focused item."
                            },
                            {
                                "name": "_focusedPhysicalIndex",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "The physical index of the focused item."
                            },
                            {
                                "name": "_focusBackfillItem",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "HTMLElement",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "The item that backfills the `_offscreenFocusedItem` in the physical items\nlist when that item is moved offscreen."
                            },
                            {
                                "name": "_itemsPerRow",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": "number",
                                    "required": true
                                },
                                "description": "The maximum items per row"
                            },
                            {
                                "name": "_itemWidth",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": "number",
                                    "required": true
                                },
                                "description": "The width of each grid item"
                            },
                            {
                                "name": "_rowHeight",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": "number",
                                    "required": true
                                },
                                "description": "The height of the row in grid layout."
                            },
                            {
                                "name": "_templateCost",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": "number",
                                    "required": true
                                },
                                "description": "The cost of stamping a template in ms."
                            },
                            {
                                "name": "_parentModel",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": "boolean",
                                    "required": true
                                },
                                "description": "Needed to pass event.model property to declarative event handlers -\nsee polymer/polymer#4339."
                            },
                            {
                                "name": "_physicalBottom",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "The bottom of the physical content."
                            },
                            {
                                "name": "_scrollBottom",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "The bottom of the scroll."
                            },
                            {
                                "name": "_virtualEnd",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "The n-th item rendered in the last physical item."
                            },
                            {
                                "name": "_hiddenContentSize",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "The height of the physical content that isn't on the screen."
                            },
                            {
                                "name": "_itemsParent",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "The parent node for the _userTemplate."
                            },
                            {
                                "name": "_maxScrollTop",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "The maximum scroll top value."
                            },
                            {
                                "name": "_maxVirtualStart",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "The largest n-th value for an item such that it can be rendered in\n`_physicalStart`."
                            },
                            {
                                "name": "_virtualStart",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                }
                            },
                            {
                                "name": "_physicalStart",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                }
                            },
                            {
                                "name": "_physicalEnd",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "The k-th tile that is at the bottom of the scrolling list."
                            },
                            {
                                "name": "_physicalCount",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                }
                            },
                            {
                                "name": "_optPhysicalSize",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "An optimal physical size such that we will have enough physical items\nto fill up the viewport and recycle when the user scrolls.\n\nThis default value assumes that we will at least have the equivalent\nto a viewport of physical items above and below the user's viewport."
                            },
                            {
                                "name": "_isVisible",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "True if the current list is visible."
                            },
                            {
                                "name": "firstVisibleIndex",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "Gets the index of the first visible item in the viewport."
                            },
                            {
                                "name": "lastVisibleIndex",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "Gets the index of the last visible item in the viewport."
                            },
                            {
                                "name": "_virtualRowCount",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                }
                            },
                            {
                                "name": "_estRowsInView",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                }
                            },
                            {
                                "name": "_physicalRows",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                }
                            },
                            {
                                "name": "_scrollOffset",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                }
                            },
                            {
                                "name": "mutableData",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Instance-level flag for configuring the dirty-checking strategy\nfor this element.  When true, Objects and Arrays will skip dirty\nchecking, otherwise strict equality checking will be used."
                            },
                            {
                                "name": "scrollTarget",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "HTMLElement",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "Specifies the element that will handle the scroll event\non the behalf of the current element. This is typically a reference to an\nelement, but there are a few more posibilities:\n\n### Elements id\n\n```html\n<div id=\"scrollable-element\" style=\"overflow: auto;\">\n <x-element scroll-target=\"scrollable-element\">\n   <!-- Content-->\n </x-element>\n</div>\n```\nIn this case, the `scrollTarget` will point to the outer div element.\n\n### Document scrolling\n\nFor document scrolling, you can use the reserved word `document`:\n\n```html\n<x-element scroll-target=\"document\">\n  <!-- Content -->\n</x-element>\n```\n\n### Elements reference\n\n```js\nappHeader.scrollTarget = document.querySelector('#scrollable-element');\n```"
                            },
                            {
                                "name": "_shouldHaveListener",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": "boolean",
                                    "required": true
                                },
                                "description": "True if the event listener should be installed."
                            },
                            {
                                "name": "_defaultScrollTarget",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "The default scroll target. Consumers of this behavior may want to customize\nthe default scroll target."
                            },
                            {
                                "name": "_doc",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "Shortcut for the document element"
                            },
                            {
                                "name": "_scrollTop",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "Gets the number of pixels that the content of an element is scrolled\nupward."
                            },
                            {
                                "name": "_scrollLeft",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "Gets the number of pixels that the content of an element is scrolled to the\nleft."
                            },
                            {
                                "name": "_scrollTargetWidth",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "Gets the width of the scroll target."
                            },
                            {
                                "name": "_scrollTargetHeight",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "Gets the height of the scroll target."
                            },
                            {
                                "name": "_parentResizable",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The closest ancestor element that implements `IronResizableBehavior`."
                            },
                            {
                                "name": "_notifyingDescendant",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True if this element is currently notifying its descendant elements of\nresize."
                            }
                        ]
                    }
                },
                {
                    "name": "iron-location",
                    "description": "The `iron-location` element manages binding to and from the current URL.\n\niron-location is the first, and lowest level element in the Polymer team's\nrouting system. This is a beta release of iron-location as we continue work\non higher level elements, and as such iron-location may undergo breaking\nchanges.\n\n#### Properties\n\nWhen the URL is: `/search?query=583#details` iron-location's properties will be:\n\n  - path: `'/search'`\n  - query: `'query=583'`\n  - hash: `'details'`\n\nThese bindings are bidirectional. Modifying them will in turn modify the URL.\n\niron-location is only active while it is attached to the document.\n\n#### Links\n\nWhile iron-location is active in the document it will intercept clicks on links\nwithin your site, updating the URL pushing the updated URL out through the\ndatabinding system. iron-location only intercepts clicks with the intent to\nopen in the same window, so middle mouse clicks and ctrl/cmd clicks work fine.\n\nYou can customize this behavior with the `urlSpaceRegex`.\n\n#### Dwell Time\n\niron-location protects against accidental history spamming by only adding\nentries to the user's history if the URL stays unchanged for `dwellTime`\nmilliseconds.",
                    "source": {
                        "module": "@polymer/iron-location/iron-location.d.ts",
                        "symbol": "IronLocationElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "path",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The pathname component of the URL."
                            },
                            {
                                "name": "query",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The query string portion of the URL."
                            },
                            {
                                "name": "hash",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The hash component of the URL."
                            },
                            {
                                "name": "dwellTime",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If the user was on a URL for less than `dwellTime` milliseconds, it\nwon't be added to the browser's history, but instead will be replaced\nby the next entry.\n\nThis is to prevent large numbers of entries from clogging up the user's\nbrowser history. Disable by setting to a negative number."
                            },
                            {
                                "name": "urlSpaceRegex",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "RegExp",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "A regexp that defines the set of URLs that should be considered part\nof this web app.\n\nClicking on a link that matches this regex won't result in a full page\nnavigation, but will instead just update the URL state in place.\n\nThis regexp is given everything after the origin in an absolute\nURL. So to match just URLs that start with /search/ do:\n    url-space-regex=\"^/search/\""
                            },
                            {
                                "name": "encodeSpaceAsPlusInQuery",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "A flag that specifies whether the spaces in query that would normally be\nencoded as %20 should be encoded as +.\n\nGiven an example text \"hello world\", it is encoded in query as\n- \"hello%20world\" without the parameter\n- \"hello+world\" with the parameter"
                            },
                            {
                                "name": "_urlSpaceRegExp",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "RegExp",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "urlSpaceRegex, but coerced into a regexp."
                            },
                            {
                                "name": "_lastChangedAt",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_initialized",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "hostAttributes",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null"
                                    ],
                                    "required": true
                                }
                            }
                        ]
                    }
                },
                {
                    "name": "iron-query-params",
                    "source": {
                        "module": "@polymer/iron-location/iron-query-params.d.ts",
                        "symbol": "IronQueryParamsElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "paramsString",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "paramsObject",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_dontReact",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "hostAttributes",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null"
                                    ],
                                    "required": true
                                }
                            }
                        ]
                    }
                },
                {
                    "name": "iron-media-query",
                    "description": "`iron-media-query` can be used to data bind to a CSS media query.\nThe `query` property is a bare CSS media query.\nThe `query-matches` property is a boolean representing whether the page matches\nthat media query.\n\nExample:\n\n```html\n<iron-media-query query=\"(min-width: 600px)\" query-matches=\"{{queryMatches}}\">\n</iron-media-query>\n```",
                    "source": {
                        "module": "@polymer/iron-media-query/iron-media-query.d.ts",
                        "symbol": "IronMediaQueryElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "queryMatches",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The Boolean return value of the media query."
                            },
                            {
                                "name": "query",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The CSS media query to evaluate."
                            },
                            {
                                "name": "full",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the query attribute is assumed to be a complete media query\nstring rather than a single media feature."
                            },
                            {
                                "name": "_boundMQHandler",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "(p0: MediaQueryList",
                                        "null) => any"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_mq",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "MediaQueryList",
                                        "null"
                                    ],
                                    "required": true
                                }
                            }
                        ]
                    }
                },
                {
                    "name": "iron-meta",
                    "description": "`iron-meta` is a generic element you can use for sharing information across the\nDOM tree. It uses [monostate pattern](http://c2.com/cgi/wiki?MonostatePattern)\nsuch that any instance of iron-meta has access to the shared information. You\ncan use `iron-meta` to share whatever you want (or create an extension [like\nx-meta] for enhancements).\n\nThe `iron-meta` instances containing your actual data can be loaded in an\nimport, or constructed in any way you see fit. The only requirement is that you\ncreate them before you try to access them.\n\nExamples:\n\nIf I create an instance like this:\n\n    <iron-meta key=\"info\" value=\"foo/bar\"></iron-meta>\n\nNote that value=\"foo/bar\" is the metadata I've defined. I could define more\nattributes or use child nodes to define additional metadata.\n\nNow I can access that element (and it's metadata) from any iron-meta instance\nvia the byKey method, e.g.\n\n    meta.byKey('info');\n\nPure imperative form would be like:\n\n    document.createElement('iron-meta').byKey('info');\n\nOr, in a Polymer element, you can include a meta in your template:\n\n    <iron-meta id=\"meta\"></iron-meta>\n    ...\n    this.$.meta.byKey('info');",
                    "source": {
                        "module": "@polymer/iron-meta/iron-meta.d.ts",
                        "symbol": "IronMetaElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "type",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "string",
                                    "required": true
                                },
                                "description": "The type of meta-data.  All meta-data of the same type is stored\ntogether."
                            },
                            {
                                "name": "key",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "The key used to store `value` under the `type` namespace."
                            },
                            {
                                "name": "value",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "The meta-data to store or retrieve."
                            },
                            {
                                "name": "self",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, `value` is set to the iron-meta instance itself."
                            },
                            {
                                "name": "hostAttributes",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "list",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [],
                                    "required": true
                                }
                            }
                        ]
                    }
                },
                {
                    "name": "iron-overlay-backdrop",
                    "description": "`iron-overlay-backdrop` is a backdrop used by `Polymer.IronOverlayBehavior`. It\nshould be a singleton.\n\n### Styling\n\nThe following custom properties and mixins are available for styling.\n\nCustom property | Description | Default\n-------------------------------------------|------------------------|---------\n`--iron-overlay-backdrop-background-color` | Backdrop background color | #000\n`--iron-overlay-backdrop-opacity`          | Backdrop opacity | 0.6\n`--iron-overlay-backdrop`                  | Mixin applied to `iron-overlay-backdrop`.                      | {}\n`--iron-overlay-backdrop-opened`           | Mixin applied to `iron-overlay-backdrop` when it is displayed | {}",
                    "source": {
                        "module": "@polymer/iron-overlay-behavior/iron-overlay-backdrop.d.ts",
                        "symbol": "IronOverlayBackdropElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "opened",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Returns true if the backdrop is opened."
                            }
                        ]
                    }
                },
                {
                    "name": "iron-pages",
                    "description": "`iron-pages` is used to select one of its children to show. One use is to cycle\nthrough a list of children \"pages\".\n\nExample:\n\n    <iron-pages selected=\"0\">\n      <div>One</div>\n      <div>Two</div>\n      <div>Three</div>\n    </iron-pages>\n\n    <script>\n      document.addEventListener('click', function(e) {\n        var pages = document.querySelector('iron-pages');\n        pages.selectNext();\n      });\n    </script>",
                    "source": {
                        "module": "@polymer/iron-pages/iron-pages.d.ts",
                        "symbol": "IronPagesElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "attrForSelected",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you want to use an attribute value or property of an element for\n`selected` instead of the index, set this to the name of the attribute\nor property. Hyphenated values are converted to camel case when used to\nlook up the property of a selectable element. Camel cased values are\n*not* converted to hyphenated values for attribute lookup. It's\nrecommended that you provide the hyphenated form of the name so that\nselection works in both cases. (Use `attr-or-property-name` instead of\n`attrOrPropertyName`.)"
                            },
                            {
                                "name": "selected",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "number"
                                    ],
                                    "required": true
                                },
                                "description": "Gets or sets the selected element. The default is to use the index of the\nitem."
                            },
                            {
                                "name": "selectedItem",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "Returns the currently selected item."
                            },
                            {
                                "name": "activateEvent",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "handler immediately changes it back"
                            },
                            {
                                "name": "selectable",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "This is a CSS selector string.  If this is set, only items that match the\nCSS selector are selectable."
                            },
                            {
                                "name": "selectedClass",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The class to set on elements when selected."
                            },
                            {
                                "name": "selectedAttribute",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The attribute to set on elements when selected."
                            },
                            {
                                "name": "fallbackSelection",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Default fallback if the selection based on selected with\n`attrForSelected` is not found."
                            },
                            {
                                "name": "items",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "any[]",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The list of items from which a selection can be made."
                            },
                            {
                                "name": "_excludedLocalNames",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The set of excluded elements where the key is the `localName`\nof the element that will be ignored from the item list."
                            },
                            {
                                "name": "_shouldUpdateSelection",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "UNUSED, FOR API COMPATIBILITY"
                            },
                            {
                                "name": "_parentResizable",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The closest ancestor element that implements `IronResizableBehavior`."
                            },
                            {
                                "name": "_notifyingDescendant",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True if this element is currently notifying its descendant elements of\nresize."
                            }
                        ]
                    }
                },
                {
                    "name": "iron-selector",
                    "source": {
                        "module": "@polymer/iron-selector/iron-selector.d.ts",
                        "symbol": "IronSelectorElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "multi",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, multiple selections are allowed."
                            },
                            {
                                "name": "selectedValues",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "any[]",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Gets or sets the selected elements. This is used instead of `selected`\nwhen `multi` is true."
                            },
                            {
                                "name": "selectedItems",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "any[]",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Returns an array of currently selected items."
                            },
                            {
                                "name": "attrForSelected",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you want to use an attribute value or property of an element for\n`selected` instead of the index, set this to the name of the attribute\nor property. Hyphenated values are converted to camel case when used to\nlook up the property of a selectable element. Camel cased values are\n*not* converted to hyphenated values for attribute lookup. It's\nrecommended that you provide the hyphenated form of the name so that\nselection works in both cases. (Use `attr-or-property-name` instead of\n`attrOrPropertyName`.)"
                            },
                            {
                                "name": "selected",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "number"
                                    ],
                                    "required": true
                                },
                                "description": "Gets or sets the selected element. The default is to use the index of the\nitem."
                            },
                            {
                                "name": "selectedItem",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "Returns the currently selected item."
                            },
                            {
                                "name": "activateEvent",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The event that fires from items when they are selected. Selectable\nwill listen for this event from items and update the selection state.\nSet to empty string to listen to no events."
                            },
                            {
                                "name": "selectable",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "This is a CSS selector string.  If this is set, only items that match the\nCSS selector are selectable."
                            },
                            {
                                "name": "selectedClass",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The class to set on elements when selected."
                            },
                            {
                                "name": "selectedAttribute",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The attribute to set on elements when selected."
                            },
                            {
                                "name": "fallbackSelection",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Default fallback if the selection based on selected with\n`attrForSelected` is not found."
                            },
                            {
                                "name": "items",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "any[]",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The list of items from which a selection can be made."
                            },
                            {
                                "name": "_excludedLocalNames",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The set of excluded elements where the key is the `localName`\nof the element that will be ignored from the item list."
                            },
                            {
                                "name": "_shouldUpdateSelection",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "UNUSED, FOR API COMPATIBILITY"
                            }
                        ]
                    }
                },
                {
                    "name": "iron-swipeable-container",
                    "description": "`<iron-swipeable-container>` is a container that allows any of its nested\nchildren (native or custom elements) to be swiped away. By default it supports\na curved or horizontal transition, but the transition duration and properties\ncan be customized.\n\nExample:\n\n    <iron-swipeable-container>\n      <div>I can be swiped</div>\n      <paper-card heading=\"Me too!\"></paper-card>\n    </iron-swipeable-container>\n\nTo disable swiping on individual children, you must give them the\n`.disable-swipe` class. Alternatively, to disable swiping on the whole\ncontainer, you can use its `disable-swipe` attribute:\n\n    <iron-swipeable-container>\n      <div class=\"disable-swipe\">I cannot be swiped be swiped</div>\n      <paper-card heading=\"But I can!\"></paper-card>\n    </iron-swipeable-container>\n\n    <iron-swipeable-container disable-swipe>\n      <div>I cannot be swiped</div>\n      <paper-card heading=\"Me neither :(\"></paper-card>\n    </iron-swipeable-container>\n\nIt is a good idea to disable text selection on any of the children that you\nwant to be swiped:\n\n    .swipe {\n      -moz-user-select: none;\n      -ms-user-select: none;\n      -webkit-user-select: none;\n      user-select: none;\n      cursor: default;\n    }",
                    "source": {
                        "module": "@polymer/iron-swipeable-container/iron-swipeable-container.d.ts",
                        "symbol": "IronSwipeableContainerElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "swipeStyle",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The style in which to swipe the card. Currently supported\noptions are `curve | horizontal`. If left unspecified, the default\nis assumed to be `horizontal`."
                            },
                            {
                                "name": "disabled",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, then the container will not allow swiping."
                            },
                            {
                                "name": "widthRatio",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The ratio of the width of the element that the translation animation\nshould happen over. For example, if the `widthRatio` is 3, the\nanimation will take place on a distance 3 times the width of the\nelement being swiped."
                            },
                            {
                                "name": "opacityRate",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The ratio of the total animation distance after which the opacity\ntransformation begins. For example, if the `widthRatio` is 1 and\nthe `opacityRate` is 0.5, then the element needs to travel half its\nwidth before its opacity starts decreasing."
                            },
                            {
                                "name": "transition",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The CSS transition applied while swiping."
                            }
                        ]
                    }
                },
                {
                    "name": "marked-element",
                    "description": "Element wrapper for the [marked](https://github.com/chjj/marked) library.\n\n`<marked-element>` accepts Markdown source and renders it to a child\nelement with the class `markdown-html`. This child element can be styled\nas you would a normal DOM element. If you do not provide a child element\nwith the `markdown-html` class, the Markdown source will still be rendered,\nbut to a shadow DOM child that cannot be styled.\n\n\n### Markdown Content\n\nThe Markdown source can be specified several ways:\n\n#### Use the `markdown` attribute to bind markdown\n\n    <marked-element markdown=\"`Markdown` is _awesome_!\">\n      <div slot=\"markdown-html\"></div>\n    </marked-element>\n\n#### Use `<script type=\"text/markdown\">` element child to inline markdown\n\n    <marked-element>\n      <div slot=\"markdown-html\"></div>\n      <script type=\"text/markdown\">\n        Check out my markdown!\n\n        We can even embed elements without fear of the HTML parser mucking up their\n        textual representation:\n\n        ```html\n        <awesome-sauce>\n          <div>Oops, I'm about to forget to close this div.\n        </awesome-sauce>\n        ```\n      </script>\n    </marked-element>\n\n#### Use `<script type=\"text/markdown\" src=\"URL\">` element child to specify remote markdown\n\n    <marked-element>\n      <div slot=\"markdown-html\"></div>\n      <script type=\"text/markdown\" src=\"../guidelines.md\"></script>\n    </marked-element>\n\nNote that the `<script type=\"text/markdown\">` approach is *static*. Changes to\nthe script content will *not* update the rendered markdown!\n\nThough, you can data bind to the `src` attribute to change the markdown.\n\n```html\n<marked-element>\n  <div slot=\"markdown-html\"></div>\n  <script type=\"text/markdown\" src$=\"[[source]]\"></script>\n</marked-element>\n...\n<script>\n  ...\n  this.source = '../guidelines.md';\n</script>\n```\n\n### Styling\nIf you are using a child with the `markdown-html` class, you can style it\nas you would a regular DOM element:\n\n    [slot=\"markdown-html\"] p {\n      color: red;\n    }\n\n    [slot=\"markdown-html\"] td:first-child {\n      padding-left: 24px;\n    }",
                    "source": {
                        "module": "@polymer/marked-element/marked-element.d.ts",
                        "symbol": "MarkedElementElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "markdown",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The markdown source that should be rendered by this element."
                            },
                            {
                                "name": "breaks",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Enable GFM line breaks (regular newlines instead of two spaces for\nbreaks)"
                            },
                            {
                                "name": "pedantic",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Conform to obscure parts of markdown.pl as much as possible. Don't fix\nany of the original markdown bugs or poor behavior."
                            },
                            {
                                "name": "renderer",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "Function",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Function used to customize a renderer based on the [API specified in the\nMarked\nlibrary](https://github.com/chjj/marked#overriding-renderer-methods).\nIt takes one argument: a marked renderer object, which is mutated by the\nfunction."
                            },
                            {
                                "name": "sanitize",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Sanitize the output. Ignore any HTML that has been input."
                            },
                            {
                                "name": "sanitizer",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "Function",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Function used to customize a sanitize behavior.\nIt takes one argument: element String without text Contents.\n\ne.g. `<div>` `<a href=\"/\">` `</p>'.\nNote: To enable this function, must set `sanitize` to true.\nWARNING: If you are using this option to untrusted text, you must to\nprevent XSS Attacks."
                            },
                            {
                                "name": "disableRemoteSanitization",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, disables the default sanitization of any markdown received by\na request and allows fetched unsanitized markdown\n\ne.g. fetching markdown via `src` that has HTML.\nNote: this value overrides `sanitize` if a request is made."
                            },
                            {
                                "name": "smartypants",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Use \"smart\" typographic punctuation for things like quotes and dashes."
                            },
                            {
                                "name": "callback",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "Function",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Callback function invoked by Marked after HTML has been rendered.\nIt must take two arguments: err and text and must return the resulting\ntext."
                            },
                            {
                                "name": "xhr",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "XMLHttpRequest",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "A reference to the XMLHttpRequest instance used to generate the\nnetwork request."
                            },
                            {
                                "name": "outputElement",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [],
                                    "required": true
                                }
                            }
                        ]
                    }
                },
                {
                    "name": "cascaded-animation",
                    "description": "`<cascaded-animation>` applies an animation on an array of elements with a delay\nbetween each. the delay defaults to 50ms.\n\nConfiguration:\n```\n{\n  name: 'cascaded-animation',\n  animation: <animation-name>,\n  nodes: <array-of-nodes>,\n  nodeDelay: <node-delay-in-ms>,\n  timing: <animation-timing>\n}\n```",
                    "source": {
                        "module": "@polymer/neon-animation/animations/cascaded-animation.d.ts",
                        "symbol": "CascadedAnimationElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "animationTiming",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Defines the animation timing."
                            },
                            {
                                "name": "isNeonAnimation",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "boolean",
                                    "required": true
                                },
                                "description": "Can be used to determine that elements implement this behavior."
                            }
                        ]
                    }
                },
                {
                    "name": "fade-in-animation",
                    "description": "`<fade-in-animation>` animates the opacity of an element from 0 to 1.\n\nConfiguration:\n```\n{\n  name: 'fade-in-animation',\n  node: <node>\n  timing: <animation-timing>\n}\n```",
                    "source": {
                        "module": "@polymer/neon-animation/animations/fade-in-animation.d.ts",
                        "symbol": "FadeInAnimationElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "animationTiming",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Defines the animation timing."
                            },
                            {
                                "name": "isNeonAnimation",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "boolean",
                                    "required": true
                                },
                                "description": "Can be used to determine that elements implement this behavior."
                            }
                        ]
                    }
                },
                {
                    "name": "fade-out-animation",
                    "description": "`<fade-out-animation>` animates the opacity of an element from 1 to 0.\n\nConfiguration:\n```\n{\n  name: 'fade-out-animation',\n  node: <node>\n  timing: <animation-timing>\n}\n```",
                    "source": {
                        "module": "@polymer/neon-animation/animations/fade-out-animation.d.ts",
                        "symbol": "FadeOutAnimationElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "animationTiming",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Defines the animation timing."
                            },
                            {
                                "name": "isNeonAnimation",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "boolean",
                                    "required": true
                                },
                                "description": "Can be used to determine that elements implement this behavior."
                            }
                        ]
                    }
                },
                {
                    "name": "hero-animation",
                    "description": "`<hero-animation>` is a shared element animation that scales and transform an\nelement such that it appears to be shared between two pages. Use this in\n`<neon-animated-pages>`. The source page should use this animation in an 'exit'\nanimation and set the `fromPage` configuration property to itself, and the\ndestination page should use this animation in an `entry` animation and set the\n`toPage` configuration property to itself. They should also define the hero\nelements in the `sharedElements` property (not a configuration property, see\n`NeonSharedElementAnimatableBehavior`).\n\nConfiguration:\n```\n{\n  name: 'hero-animation',\n  id: <shared-element-id>,\n  timing: <animation-timing>,\n  toPage: <node>, /* define for the destination page *\\/\n  fromPage: <node>, /* define for the source page *\\/\n}\n```",
                    "source": {
                        "module": "@polymer/neon-animation/animations/hero-animation.d.ts",
                        "symbol": "HeroAnimationElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "sharedElements",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Cached copy of shared elements."
                            },
                            {
                                "name": "animationTiming",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Defines the animation timing."
                            },
                            {
                                "name": "isNeonAnimation",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "boolean",
                                    "required": true
                                },
                                "description": "Can be used to determine that elements implement this behavior."
                            }
                        ]
                    }
                },
                {
                    "name": "opaque-animation",
                    "description": "`<opaque-animation>` makes an element `opacity:1` for the duration of the\nanimation. Used to prevent webkit/safari from drawing a frame before an\nanimation for elements that animate from display:none.",
                    "source": {
                        "module": "@polymer/neon-animation/animations/opaque-animation.d.ts",
                        "symbol": "OpaqueAnimationElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "animationTiming",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Defines the animation timing."
                            },
                            {
                                "name": "isNeonAnimation",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "boolean",
                                    "required": true
                                },
                                "description": "Can be used to determine that elements implement this behavior."
                            }
                        ]
                    }
                },
                {
                    "name": "reverse-ripple-animation",
                    "description": "`<reverse-ripple-animation>` scales and transform an element such that it\nappears to ripple down from this element, to either a shared element, or a\nscreen position.\n\nIf using as a shared element animation in `<neon-animated-pages>`, use this\nanimation in an `exit` animation in the source page and in an `entry` animation\nin the destination page. Also, define the reverse-ripple elements in the\n`sharedElements` property (not a configuration property, see\n`NeonSharedElementAnimatableBehavior`).\nIf using a screen position, define the `gesture` property.\nConfiguration:\n```\n{\n  name: 'reverse-ripple-animation`.\n  id: <shared-element-id>, /* set this or gesture *\\/\n  gesture: {x: <page-x>, y: <page-y>}, /* set this or id *\\/\n  timing: <animation-timing>,\n  toPage: <node>, /* define for the destination page *\\/\n  fromPage: <node>, /* define for the source page *\\/\n}\n```",
                    "source": {
                        "module": "@polymer/neon-animation/animations/reverse-ripple-animation.d.ts",
                        "symbol": "ReverseRippleAnimationElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "sharedElements",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Cached copy of shared elements."
                            },
                            {
                                "name": "animationTiming",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Defines the animation timing."
                            },
                            {
                                "name": "isNeonAnimation",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "boolean",
                                    "required": true
                                },
                                "description": "Can be used to determine that elements implement this behavior."
                            }
                        ]
                    }
                },
                {
                    "name": "ripple-animation",
                    "description": "`<ripple-animation>` scales and transform an element such that it appears to\nripple from either a shared element, or from a screen position, to full screen.\n\nIf using as a shared element animation in `<neon-animated-pages>`, use this\nanimation in an `exit` animation in the source page and in an `entry` animation\nin the destination page. Also, define the hero elements in the `sharedElements`\nproperty (not a configuration property, see\n`NeonSharedElementAnimatableBehavior`).\n\nIf using a screen position, define the `gesture` property.\n\nConfiguration:\n```\n{\n  name: 'ripple-animation`.\n  id: <shared-element-id>, /* set this or gesture *\\/\n  gesture: {x: <page-x>, y: <page-y>}, /* set this or id *\\/\n  timing: <animation-timing>,\n  toPage: <node>, /* define for the destination page *\\/\n  fromPage: <node>, /* define for the source page *\\/\n}\n```",
                    "source": {
                        "module": "@polymer/neon-animation/animations/ripple-animation.d.ts",
                        "symbol": "RippleAnimationElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "sharedElements",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Cached copy of shared elements."
                            },
                            {
                                "name": "animationTiming",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Defines the animation timing."
                            },
                            {
                                "name": "isNeonAnimation",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "boolean",
                                    "required": true
                                },
                                "description": "Can be used to determine that elements implement this behavior."
                            }
                        ]
                    }
                },
                {
                    "name": "scale-down-animation",
                    "description": "`<scale-down-animation>` animates the scale transform of an element from 1 to 0.\nBy default it scales in both the x and y axes.\n\nConfiguration:\n```\n{\n  name: 'scale-down-animation',\n  node: <node>,\n  axis: 'x' | 'y' | '',\n  transformOrigin: <transform-origin>,\n  timing: <animation-timing>\n}\n```",
                    "source": {
                        "module": "@polymer/neon-animation/animations/scale-down-animation.d.ts",
                        "symbol": "ScaleDownAnimationElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "animationTiming",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Defines the animation timing."
                            },
                            {
                                "name": "isNeonAnimation",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "boolean",
                                    "required": true
                                },
                                "description": "Can be used to determine that elements implement this behavior."
                            }
                        ]
                    }
                },
                {
                    "name": "scale-up-animation",
                    "description": "`<scale-up-animation>` animates the scale transform of an element from 0 to 1.\nBy default it scales in both the x and y axes.\n\nConfiguration:\n```\n{\n  name: 'scale-up-animation',\n  node: <node>,\n  axis: 'x' | 'y' | '',\n  transformOrigin: <transform-origin>,\n  timing: <animation-timing>\n}\n```",
                    "source": {
                        "module": "@polymer/neon-animation/animations/scale-up-animation.d.ts",
                        "symbol": "ScaleUpAnimationElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "animationTiming",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Defines the animation timing."
                            },
                            {
                                "name": "isNeonAnimation",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "boolean",
                                    "required": true
                                },
                                "description": "Can be used to determine that elements implement this behavior."
                            }
                        ]
                    }
                },
                {
                    "name": "slide-down-animation",
                    "description": "`<slide-down-animation>` animates the transform of an element from `none`\n`translateY(100%)`. The `transformOrigin` defaults to `50% 0`.\n\nConfiguration:\n```\n{\n  name: 'slide-down-animation',\n  node: <node>,\n  transformOrigin: <transform-origin>,\n  timing: <animation-timing>\n}\n```",
                    "source": {
                        "module": "@polymer/neon-animation/animations/slide-down-animation.d.ts",
                        "symbol": "SlideDownAnimationElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "animationTiming",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Defines the animation timing."
                            },
                            {
                                "name": "isNeonAnimation",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "boolean",
                                    "required": true
                                },
                                "description": "Can be used to determine that elements implement this behavior."
                            }
                        ]
                    }
                },
                {
                    "name": "slide-from-bottom-animation",
                    "description": "`<slide-from-bottom-animation>` animates the transform of an element from `none`\nto `translateY(100%)`. The `transformOrigin` defaults to `50% 0`.\n\nConfiguration:\n```\n{\n  name: 'slide-from-bottom-animation',\n  node: <node>,\n  transformOrigin: <transform-origin>,\n  timing: <animation-timing>\n}\n```",
                    "source": {
                        "module": "@polymer/neon-animation/animations/slide-from-bottom-animation.d.ts",
                        "symbol": "SlideFromBottomAnimationElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "animationTiming",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Defines the animation timing."
                            },
                            {
                                "name": "isNeonAnimation",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "boolean",
                                    "required": true
                                },
                                "description": "Can be used to determine that elements implement this behavior."
                            }
                        ]
                    }
                },
                {
                    "name": "slide-from-left-animation",
                    "description": "`<slide-from-left-animation>` animates the transform of an element from\n`translateX(-100%)` to `none`.\nThe `transformOrigin` defaults to `0 50%`.\n\nConfiguration:\n```\n{\n  name: 'slide-from-left-animation',\n  node: <node>,\n  transformOrigin: <transform-origin>,\n  timing: <animation-timing>\n}\n```",
                    "source": {
                        "module": "@polymer/neon-animation/animations/slide-from-left-animation.d.ts",
                        "symbol": "SlideFromLeftAnimationElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "animationTiming",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Defines the animation timing."
                            },
                            {
                                "name": "isNeonAnimation",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "boolean",
                                    "required": true
                                },
                                "description": "Can be used to determine that elements implement this behavior."
                            }
                        ]
                    }
                },
                {
                    "name": "slide-from-right-animation",
                    "description": "`<slide-from-right-animation>` animates the transform of an element from\n`translateX(100%)` to `none`.\nThe `transformOrigin` defaults to `0 50%`.\n\nConfiguration:\n```\n{\n  name: 'slide-from-right-animation',\n  node: <node>,\n  transformOrigin: <transform-origin>,\n  timing: <animation-timing>\n}\n```",
                    "source": {
                        "module": "@polymer/neon-animation/animations/slide-from-right-animation.d.ts",
                        "symbol": "SlideFromRightAnimationElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "animationTiming",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Defines the animation timing."
                            },
                            {
                                "name": "isNeonAnimation",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "boolean",
                                    "required": true
                                },
                                "description": "Can be used to determine that elements implement this behavior."
                            }
                        ]
                    }
                },
                {
                    "name": "slide-from-top-animation",
                    "description": "`<slide-from-top-animation>` animates the transform of an element from\n`translateY(-100%)` to `none`. The `transformOrigin` defaults to `50% 0`.\n\nConfiguration:\n```\n{\n  name: 'slide-from-top-animation',\n  node: <node>,\n  transformOrigin: <transform-origin>,\n  timing: <animation-timing>\n}\n```",
                    "source": {
                        "module": "@polymer/neon-animation/animations/slide-from-top-animation.d.ts",
                        "symbol": "SlideFromTopAnimationElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "animationTiming",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Defines the animation timing."
                            },
                            {
                                "name": "isNeonAnimation",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "boolean",
                                    "required": true
                                },
                                "description": "Can be used to determine that elements implement this behavior."
                            }
                        ]
                    }
                },
                {
                    "name": "slide-left-animation",
                    "description": "`<slide-left-animation>` animates the transform of an element from `none` to\n`translateX(-100%)`. The `transformOrigin` defaults to `0 50%`.\n\nConfiguration:\n```\n{\n  name: 'slide-left-animation',\n  node: <node>,\n  transformOrigin: <transform-origin>,\n  timing: <animation-timing>\n}\n```",
                    "source": {
                        "module": "@polymer/neon-animation/animations/slide-left-animation.d.ts",
                        "symbol": "SlideLeftAnimationElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "animationTiming",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Defines the animation timing."
                            },
                            {
                                "name": "isNeonAnimation",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "boolean",
                                    "required": true
                                },
                                "description": "Can be used to determine that elements implement this behavior."
                            }
                        ]
                    }
                },
                {
                    "name": "slide-right-animation",
                    "description": "`<slide-right-animation>` animates the transform of an element from `none` to\n`translateX(100%)`. The `transformOrigin` defaults to `0 50%`.\n\nConfiguration:\n```\n{\n  name: 'slide-right-animation',\n  node: <node>,\n  transformOrigin: <transform-origin>,\n  timing: <animation-timing>\n}\n```",
                    "source": {
                        "module": "@polymer/neon-animation/animations/slide-right-animation.d.ts",
                        "symbol": "SlideRightAnimationElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "animationTiming",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Defines the animation timing."
                            },
                            {
                                "name": "isNeonAnimation",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "boolean",
                                    "required": true
                                },
                                "description": "Can be used to determine that elements implement this behavior."
                            }
                        ]
                    }
                },
                {
                    "name": "slide-up-animation",
                    "description": "`<slide-up-animation>` animates the transform of an element from `translateY(0)`\nto `translateY(-100%)`. The `transformOrigin` defaults to `50% 0`.\n\nConfiguration:\n```\n{\n  name: 'slide-up-animation',\n  node: <node>,\n  transformOrigin: <transform-origin>,\n  timing: <animation-timing>\n}\n```",
                    "source": {
                        "module": "@polymer/neon-animation/animations/slide-up-animation.d.ts",
                        "symbol": "SlideUpAnimationElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "animationTiming",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Defines the animation timing."
                            },
                            {
                                "name": "isNeonAnimation",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "boolean",
                                    "required": true
                                },
                                "description": "Can be used to determine that elements implement this behavior."
                            }
                        ]
                    }
                },
                {
                    "name": "transform-animation",
                    "description": "`<transform-animation>` animates a custom transform on an element. Use this to\nanimate multiple transform properties, or to apply a custom transform value.\n\nConfiguration:\n```\n{\n  name: 'transform-animation',\n  node: <node>,\n  transformOrigin: <transform-origin>,\n  transformFrom: <transform-from-string>,\n  transformTo: <transform-to-string>,\n  timing: <animation-timing>\n}\n```",
                    "source": {
                        "module": "@polymer/neon-animation/animations/transform-animation.d.ts",
                        "symbol": "TransformAnimationElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "animationTiming",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Defines the animation timing."
                            },
                            {
                                "name": "isNeonAnimation",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "boolean",
                                    "required": true
                                },
                                "description": "Can be used to determine that elements implement this behavior."
                            }
                        ]
                    }
                },
                {
                    "name": "neon-animatable",
                    "description": "`<neon-animatable>` is a simple container element implementing\n`NeonAnimatableBehavior`. This is a convenience element for use with\n`<neon-animated-pages>`.\n\n```\n<neon-animated-pages selected=\"0\"\n                     entry-animation=\"slide-from-right-animation\"\n                     exit-animation=\"slide-left-animation\">\n  <neon-animatable>1</neon-animatable>\n  <neon-animatable>2</neon-animatable>\n</neon-animated-pages>\n```",
                    "source": {
                        "module": "@polymer/neon-animation/neon-animatable.d.ts",
                        "symbol": "NeonAnimatableElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "_parentResizable",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The closest ancestor element that implements `IronResizableBehavior`."
                            },
                            {
                                "name": "_notifyingDescendant",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True if this element is currently notifying its descendant elements of\nresize."
                            },
                            {
                                "name": "animationConfig",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Animation configuration. See README for more info."
                            },
                            {
                                "name": "entryAnimation",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Convenience property for setting an 'entry' animation. Do not set\n`animationConfig.entry` manually if using this. The animated node is set\nto `this` if using this property."
                            },
                            {
                                "name": "exitAnimation",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Convenience property for setting an 'exit' animation. Do not set\n`animationConfig.exit` manually if using this. The animated node is set\nto `this` if using this property."
                            }
                        ]
                    }
                },
                {
                    "name": "neon-animated-pages",
                    "description": "Material design: [Meaningful\ntransitions](https://www.google.com/design/spec/animation/meaningful-transitions.html)\n\n`neon-animated-pages` manages a set of pages and runs an animation when\nswitching between them. Its children pages should implement\n`NeonAnimatableBehavior` and define `entry` and `exit` animations to be\nrun when switching to or switching out of the page.",
                    "source": {
                        "module": "@polymer/neon-animation/neon-animated-pages.d.ts",
                        "symbol": "NeonAnimatedPagesElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "animateInitialSelection",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "its animation config."
                            },
                            {
                                "name": "animationConfig",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Animation configuration. See README for more info."
                            },
                            {
                                "name": "entryAnimation",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Convenience property for setting an 'entry' animation. Do not set\n`animationConfig.entry` manually if using this. The animated node is set\nto `this` if using this property."
                            },
                            {
                                "name": "exitAnimation",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Convenience property for setting an 'exit' animation. Do not set\n`animationConfig.exit` manually if using this. The animated node is set\nto `this` if using this property."
                            },
                            {
                                "name": "attrForSelected",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you want to use an attribute value or property of an element for\n`selected` instead of the index, set this to the name of the attribute\nor property. Hyphenated values are converted to camel case when used to\nlook up the property of a selectable element. Camel cased values are\n*not* converted to hyphenated values for attribute lookup. It's\nrecommended that you provide the hyphenated form of the name so that\nselection works in both cases. (Use `attr-or-property-name` instead of\n`attrOrPropertyName`.)"
                            },
                            {
                                "name": "selected",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "number"
                                    ],
                                    "required": true
                                },
                                "description": "Gets or sets the selected element. The default is to use the index of the\nitem."
                            },
                            {
                                "name": "selectedItem",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "Returns the currently selected item."
                            },
                            {
                                "name": "activateEvent",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The event that fires from items when they are selected. Selectable\nwill listen for this event from items and update the selection state.\nSet to empty string to listen to no events."
                            },
                            {
                                "name": "selectable",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "This is a CSS selector string.  If this is set, only items that match the\nCSS selector are selectable."
                            },
                            {
                                "name": "selectedClass",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The class to set on elements when selected."
                            },
                            {
                                "name": "selectedAttribute",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The attribute to set on elements when selected."
                            },
                            {
                                "name": "fallbackSelection",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Default fallback if the selection based on selected with\n`attrForSelected` is not found."
                            },
                            {
                                "name": "items",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "any[]",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The list of items from which a selection can be made."
                            },
                            {
                                "name": "_excludedLocalNames",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The set of excluded elements where the key is the `localName`\nof the element that will be ignored from the item list."
                            },
                            {
                                "name": "_shouldUpdateSelection",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "UNUSED, FOR API COMPATIBILITY"
                            },
                            {
                                "name": "_parentResizable",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The closest ancestor element that implements `IronResizableBehavior`."
                            },
                            {
                                "name": "_notifyingDescendant",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True if this element is currently notifying its descendant elements of\nresize."
                            }
                        ]
                    }
                },
                {
                    "name": "paper-badge",
                    "description": "`<paper-badge>` is a circular text badge that is displayed on the top right\ncorner of an element, representing a status or a notification. It will badge\nthe anchor element specified in the `for` attribute, or, if that doesn't exist,\ncentered to the parent node containing it.\n\nBadges can also contain an icon by adding the `icon` attribute and setting\nit to the id of the desired icon. Please note that you should still set the\n`label` attribute in order to keep the element accessible. Also note that you\nwill need to import the `iron-iconset` that includes the icons you want to use.\nSee [iron-icon](../iron-icon) for more information on how to import and use icon\nsets.\n\nExample:\n\n    <div style=\"display:inline-block\">\n      <span>Inbox</span>\n      <paper-badge label=\"3\"></paper-badge>\n    </div>\n\n    <div>\n      <paper-button id=\"btn\">Status</paper-button>\n      <paper-badge\n          icon=\"favorite\"\n          for=\"btn\"\n          label=\"favorite icon\">\n      </paper-badge>\n    </div>\n\n    <div>\n      <paper-icon-button\n          id=\"account-box\"\n          icon=\"account-box\"\n          alt=\"account-box\">\n      </paper-icon-button>\n      <paper-badge\n          icon=\"social:mood\"\n          for=\"account-box\"\n          label=\"mood\n          icon\">\n      </paper-badge>\n\n    </div>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-badge-background` | The background color of the badge | `--accent-color`\n`--paper-badge-opacity` | The opacity of the badge | `1.0`\n`--paper-badge-text-color` | The color of the badge text | `white`\n`--paper-badge-width` | The width of the badge circle | `20px`\n`--paper-badge-height` | The height of the badge circle | `20px`\n`--paper-badge-icon-width` | The width of the badge icon, allowed up to the width of the badge | `12px`\n`--paper-badge-icon-height` | The height of the badge icon, allowed up to the height of the badge | `12px`\n`--paper-badge-margin-left` | Optional spacing added to the left of the badge. | `0px`\n`--paper-badge-margin-bottom` | Optional spacing added to the bottom of the badge. | `0px`\n`--paper-badge` | Mixin applied to the badge | `{}`",
                    "source": {
                        "module": "@polymer/paper-badge/paper-badge.d.ts",
                        "symbol": "PaperBadgeElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "for",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The id of the element that the badge is anchored to. This element\nmust be a sibling of the badge."
                            },
                            {
                                "name": "label",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The label displayed in the badge. The label is centered, and ideally\nshould have very few characters."
                            },
                            {
                                "name": "icon",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "An iron-icon ID. When given, the badge content will use an\n`<iron-icon>` element displaying the given icon ID rather than the\nlabel text. However, the label text will still be used for\naccessibility purposes."
                            },
                            {
                                "name": "_boundNotifyResize",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "Function",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_boundUpdateTarget",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "Function",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "target",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "Returns the target element that this badge is anchored to. It is\neither the element given by the `for` attribute, or the immediate parent\nof the badge."
                            },
                            {
                                "name": "_parentResizable",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The closest ancestor element that implements `IronResizableBehavior`."
                            },
                            {
                                "name": "_notifyingDescendant",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True if this element is currently notifying its descendant elements of\nresize."
                            }
                        ]
                    }
                },
                {
                    "name": "paper-button",
                    "description": "Material design:\n[Buttons](https://www.google.com/design/spec/components/buttons.html)\n\n`paper-button` is a button. When the user touches the button, a ripple effect\nemanates from the point of contact. It may be flat or raised. A raised button is\nstyled with a shadow.\n\nExample:\n\n    <paper-button>Flat button</paper-button>\n    <paper-button raised>Raised button</paper-button>\n    <paper-button noink>No ripple effect</paper-button>\n    <paper-button toggles>Toggle-able button</paper-button>\n\nA button that has `toggles` true will remain `active` after being clicked (and\nwill have an `active` attribute set). For more information, see the\n`IronButtonState` behavior.\n\nYou may use custom DOM in the button body to create a variety of buttons. For\nexample, to create a button with an icon and some text:\n\n    <paper-button>\n      <iron-icon icon=\"favorite\"></iron-icon>\n      custom button content\n    </paper-button>\n\nTo use `paper-button` as a link, wrap it in an anchor tag. Since `paper-button`\nwill already receive focus, you may want to prevent the anchor tag from\nreceiving focus as well by setting its tabindex to -1.\n\n    <a href=\"https://www.polymer-project.org/\" tabindex=\"-1\">\n      <paper-button raised>Polymer Project</paper-button>\n    </a>\n\n### Styling\n\nStyle the button with CSS as you would a normal DOM element.\n\n    paper-button.fancy {\n      background: green;\n      color: yellow;\n    }\n\n    paper-button.fancy:hover {\n      background: lime;\n    }\n\n    paper-button[disabled],\n    paper-button[toggles][active] {\n      background: red;\n    }\n\nBy default, the ripple is the same color as the foreground at 25% opacity. You\nmay customize the color using the `--paper-button-ink-color` custom property.\n\nThe following custom properties and mixins are also available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-button-ink-color` | Background color of the ripple | `Based on the button's color`\n`--paper-button` | Mixin applied to the button | `{}`\n`--paper-button-disabled` | Mixin applied to the disabled button. Note that you can also use the `paper-button[disabled]` selector | `{}`\n`--paper-button-flat-keyboard-focus` | Mixin applied to a flat button after it's been focused using the keyboard | `{}`\n`--paper-button-raised-keyboard-focus` | Mixin applied to a raised button after it's been focused using the keyboard | `{}`",
                    "source": {
                        "module": "@polymer/paper-button/paper-button.d.ts",
                        "symbol": "PaperButtonElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "raised",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the button should be styled with a shadow."
                            },
                            {
                                "name": "elevation",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The z-depth of this element, from 0-5. Setting to 0 will remove the\nshadow, and each increasing number greater than 0 will be \"deeper\"\nthan the last."
                            },
                            {
                                "name": "hostAttributes",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "noink",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the element will not produce a ripple effect when interacted\nwith via the pointer."
                            },
                            {
                                "name": "_rippleContainer",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "Element",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "focused",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the element currently has focus."
                            },
                            {
                                "name": "disabled",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the user cannot interact with this element."
                            },
                            {
                                "name": "_oldTabIndex",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Value of the `tabindex` attribute before `disabled` was activated.\n`null` means the attribute was not present."
                            },
                            {
                                "name": "_boundFocusBlurHandler",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "Function",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "pressed",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the user is currently holding down the button."
                            },
                            {
                                "name": "toggles",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the button toggles the active state with each tap or press\nof the spacebar."
                            },
                            {
                                "name": "active",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the button is a toggle and is currently in the active state."
                            },
                            {
                                "name": "pointerDown",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True if the element is currently being pressed by a \"pointer,\" which\nis loosely defined as mouse or touch input (but specifically excluding\nkeyboard input)."
                            },
                            {
                                "name": "receivedFocusFromKeyboard",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True if the input device that caused the element to receive focus\nwas a keyboard."
                            },
                            {
                                "name": "ariaActiveAttribute",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The aria attribute to be set if the button is a toggle and in the\nactive state."
                            },
                            {
                                "name": "_mouseEventRe",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "RegExp",
                                        "null"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "keyEventTarget",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "EventTarget",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "The EventTarget that will be firing relevant KeyboardEvents. Set it to\n`null` to disable the listeners."
                            },
                            {
                                "name": "stopKeyboardEventPropagation",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents."
                            },
                            {
                                "name": "_boundKeyHandlers",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "any[]",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_imperativeKeyBindings",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "own properties of everything on the \"prototype\"."
                            },
                            {
                                "name": "keyBindings",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "object",
                                    "required": true
                                },
                                "description": "To be used to express what combination of keys  will trigger the relative\ncallback. e.g. `keyBindings: { 'esc': '_onEscPressed'}`"
                            }
                        ]
                    }
                },
                {
                    "name": "paper-card",
                    "description": "Material design:\n[Cards](https://www.google.com/design/spec/components/cards.html)\n\n`paper-card` is a container with a drop shadow.\n\nExample:\n\n    <paper-card heading=\"Card Title\">\n      <div class=\"card-content\">Some content</div>\n      <div class=\"card-actions\">\n        <paper-button>Some action</paper-button>\n      </div>\n    </paper-card>\n\nExample - top card image:\n\n    <paper-card heading=\"Card Title\" image=\"/path/to/image.png\" alt=\"image\">\n      ...\n    </paper-card>\n\n### Accessibility\n\nBy default, the `aria-label` will be set to the value of the `heading`\nattribute.\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-card-background-color` | The background color of the card | `--primary-background-color`\n`--paper-card-header-color` | The color of the header text | `#000`\n`--paper-card-header` | Mixin applied to the card header section | `{}`\n`--paper-card-header-text` | Mixin applied to the title in the card header section | `{}`\n`--paper-card-header-image` | Mixin applied to the image in the card header section | `{}`\n`--paper-card-header-image-text` | Mixin applied to the text overlapping the image in the card header section | `{}`\n`--paper-card-content` | Mixin applied to the card content section| `{}`\n`--paper-card-actions` | Mixin applied to the card action section | `{}`\n`--paper-card` | Mixin applied to the card | `{}`",
                    "source": {
                        "module": "@polymer/paper-card/paper-card.d.ts",
                        "symbol": "PaperCardElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "heading",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The title of the card."
                            },
                            {
                                "name": "image",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The url of the title image of the card."
                            },
                            {
                                "name": "alt",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The text alternative of the card's title image."
                            },
                            {
                                "name": "preloadImage",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "When `true`, any change to the image url property will cause the\n`placeholder` image to be shown until the image is fully rendered."
                            },
                            {
                                "name": "fadeImage",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "When `preloadImage` is true, setting `fadeImage` to true will cause the\nimage to fade into place."
                            },
                            {
                                "name": "placeholderImage",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "This image will be used as a background/placeholder until the src image\nhas loaded. Use of a data-URI for placeholder is encouraged for instant\nrendering."
                            },
                            {
                                "name": "elevation",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The z-depth of the card, from 0-5."
                            },
                            {
                                "name": "animatedShadow",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set this to true to animate the card shadow when setting a new\n`z` value."
                            },
                            {
                                "name": "animated",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Read-only property used to pass down the `animatedShadow` value to\nthe underlying paper-material style (since they have different names)."
                            }
                        ]
                    }
                },
                {
                    "name": "paper-checkbox",
                    "description": "Material design:\n[Checkbox](https://www.google.com/design/spec/components/selection-controls.html#selection-controls-checkbox)\n\n`paper-checkbox` is a button that can be either checked or unchecked. User can\ntap the checkbox to check or uncheck it. Usually you use checkboxes to allow\nuser to select multiple options from a set. If you have a single ON/OFF option,\navoid using a single checkbox and use `paper-toggle-button` instead.\n\nExample:\n\n    <paper-checkbox>label</paper-checkbox>\n\n    <paper-checkbox checked> label</paper-checkbox>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-checkbox-unchecked-background-color` | Checkbox background color when the input is not checked | `transparent`\n`--paper-checkbox-unchecked-color` | Checkbox border color when the input is not checked | `--primary-text-color`\n`--paper-checkbox-unchecked-ink-color` | Selected/focus ripple color when the input is not checked | `--primary-text-color`\n`--paper-checkbox-checked-color` | Checkbox color when the input is checked | `--primary-color`\n`--paper-checkbox-checked-ink-color` | Selected/focus ripple color when the input is checked | `--primary-color`\n`--paper-checkbox-checkmark-color` | Checkmark color | `white`\n`--paper-checkbox-label-color` | Label color | `--primary-text-color`\n`--paper-checkbox-label-checked-color` | Label color when the input is checked | `--paper-checkbox-label-color`\n`--paper-checkbox-label-spacing` | Spacing between the label and the checkbox | `8px`\n`--paper-checkbox-label` | Mixin applied to the label | `{}`\n`--paper-checkbox-label-checked` | Mixin applied to the label when the input is checked | `{}`\n`--paper-checkbox-error-color` | Checkbox color when invalid | `--error-color`\n`--paper-checkbox-size` | Size of the checkbox | `18px`\n`--paper-checkbox-ink-size` | Size of the ripple | `48px`\n`--paper-checkbox-margin` | Margin around the checkbox container | `initial`\n`--paper-checkbox-vertical-align` | Vertical alignment of the checkbox container | `middle`\n\nThis element applies the mixin `--paper-font-common-base` but does not import\n`paper-styles/typography.html`. In order to apply the `Roboto` font to this\nelement, make sure you've imported `paper-styles/typography.html`.",
                    "source": {
                        "module": "@polymer/paper-checkbox/paper-checkbox.d.ts",
                        "symbol": "PaperCheckboxElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "checked",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Gets or sets the state, `true` is checked and `false` is unchecked."
                            },
                            {
                                "name": "validator",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Name of the validator to use."
                            },
                            {
                                "name": "invalid",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True if the last call to `validate` is invalid."
                            },
                            {
                                "name": "_validator",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "Recompute this every time it's needed, because we don't know if the\nunderlying IronValidatableBehaviorMeta has changed."
                            },
                            {
                                "name": "name",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The name of this element."
                            },
                            {
                                "name": "value",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Overriden from IronFormElementBehavior"
                            },
                            {
                                "name": "required",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to mark the input as required. If used in a form, a\ncustom element that uses this behavior should also use\nIronValidatableBehavior and define a custom validation method.\nOtherwise, a `required` element will always be considered valid.\nIt's also strongly recommended to provide a visual style for the element\nwhen its value is invalid."
                            },
                            {
                                "name": "noink",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the element will not produce a ripple effect when interacted\nwith via the pointer."
                            },
                            {
                                "name": "_rippleContainer",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "Element",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "focused",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the element currently has focus."
                            },
                            {
                                "name": "disabled",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the user cannot interact with this element."
                            },
                            {
                                "name": "_oldTabIndex",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Value of the `tabindex` attribute before `disabled` was activated.\n`null` means the attribute was not present."
                            },
                            {
                                "name": "_boundFocusBlurHandler",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "Function",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "pressed",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the user is currently holding down the button."
                            },
                            {
                                "name": "toggles",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the button toggles the active state with each tap or press\nof the spacebar."
                            },
                            {
                                "name": "active",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the button is a toggle and is currently in the active state."
                            },
                            {
                                "name": "pointerDown",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True if the element is currently being pressed by a \"pointer,\" which\nis loosely defined as mouse or touch input (but specifically excluding\nkeyboard input)."
                            },
                            {
                                "name": "receivedFocusFromKeyboard",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True if the input device that caused the element to receive focus\nwas a keyboard."
                            },
                            {
                                "name": "ariaActiveAttribute",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Fired when the checked state changes."
                            },
                            {
                                "name": "_mouseEventRe",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "RegExp",
                                        "null"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "keyEventTarget",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "EventTarget",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "The EventTarget that will be firing relevant KeyboardEvents. Set it to\n`null` to disable the listeners."
                            },
                            {
                                "name": "stopKeyboardEventPropagation",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents."
                            },
                            {
                                "name": "_boundKeyHandlers",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "any[]",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_imperativeKeyBindings",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "own properties of everything on the \"prototype\"."
                            },
                            {
                                "name": "keyBindings",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "object",
                                    "required": true
                                },
                                "description": "To be used to express what combination of keys  will trigger the relative\ncallback. e.g. `keyBindings: { 'esc': '_onEscPressed'}`"
                            }
                        ]
                    }
                },
                {
                    "name": "paper-dialog-scrollable",
                    "description": "Material design:\n[Dialogs](https://www.google.com/design/spec/components/dialogs.html)\n\n`paper-dialog-scrollable` implements a scrolling area used in a Material Design\ndialog. It shows a divider at the top and/or bottom indicating more content,\ndepending on scroll position. Use this together with elements implementing\n`Polymer.PaperDialogBehavior`.\n\n    <paper-dialog-impl>\n      <h2>Header</h2>\n      <paper-dialog-scrollable>\n        Lorem ipsum...\n      </paper-dialog-scrollable>\n      <div class=\"buttons\">\n        <paper-button>OK</paper-button>\n      </div>\n    </paper-dialog-impl>\n\nIt shows a top divider after scrolling if it is not the first child in its\nparent container, indicating there is more content above. It shows a bottom\ndivider if it is scrollable and it is not the last child in its parent\ncontainer, indicating there is more content below. The bottom divider is hidden\nif it is scrolled to the bottom.\n\nIf `paper-dialog-scrollable` is not a direct child of the element implementing\n`Polymer.PaperDialogBehavior`, remember to set the `dialogElement`:\n\n    <paper-dialog-impl id=\"myDialog\">\n      <h2>Header</h2>\n      <div class=\"my-content-wrapper\">\n        <h4>Sub-header</h4>\n        <paper-dialog-scrollable>\n          Lorem ipsum...\n        </paper-dialog-scrollable>\n      </div>\n      <div class=\"buttons\">\n        <paper-button>OK</paper-button>\n      </div>\n    </paper-dialog-impl>\n\n    <script>\n      var scrollable =\nPolymer.dom(myDialog).querySelector('paper-dialog-scrollable');\n      scrollable.dialogElement = myDialog;\n    </script>\n\n### Styling\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-dialog-scrollable` | Mixin for the scrollable content | {}",
                    "source": {
                        "module": "@polymer/paper-dialog-scrollable/paper-dialog-scrollable.d.ts",
                        "symbol": "PaperDialogScrollableElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "dialogElement",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "Node",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "The dialog element that implements `Polymer.PaperDialogBehavior`\ncontaining this element."
                            },
                            {
                                "name": "scrollTarget",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "Returns the scrolling element."
                            }
                        ]
                    }
                },
                {
                    "name": "paper-dialog",
                    "description": "Material design:\n[Dialogs](https://www.google.com/design/spec/components/dialogs.html)\n\n`<paper-dialog>` is a dialog with Material Design styling and optional\nanimations when it is opened or closed. It provides styles for a header, content\narea, and an action area for buttons. You can use the\n`<paper-dialog-scrollable>` element (in its own repository) if you need a\nscrolling content area. To autofocus a specific child element after opening the\ndialog, give it the `autofocus` attribute. See `Polymer.PaperDialogBehavior` and\n`Polymer.IronOverlayBehavior` for specifics.\n\nFor example, the following code implements a dialog with a header, scrolling\ncontent area and buttons. Focus will be given to the `dialog-confirm` button\nwhen the dialog is opened.\n\n    <paper-dialog>\n      <h2>Header</h2>\n      <paper-dialog-scrollable>\n        Lorem ipsum...\n      </paper-dialog-scrollable>\n      <div class=\"buttons\">\n        <paper-button dialog-dismiss>Cancel</paper-button>\n        <paper-button dialog-confirm autofocus>Accept</paper-button>\n      </div>\n    </paper-dialog>\n\n### Styling\n\nSee the docs for `Polymer.PaperDialogBehavior` for the custom properties\navailable for styling this element.\n\n### Animations\n\nSet the `entry-animation` and/or `exit-animation` attributes to add an animation\nwhen the dialog is opened or closed. See the documentation in\n[PolymerElements/neon-animation](https://github.com/PolymerElements/neon-animation)\nfor more info.\n\nFor example:\n\n    <script type=\"module\">\n      import '@polymer/neon-animation/animations/fade-out-animation.js';\n      import '@polymer/neon-animation/animations/scale-up-animation.js';\n    </script>\n\n    <paper-dialog entry-animation=\"scale-up-animation\"\n                  exit-animation=\"fade-out-animation\">\n      <h2>Header</h2>\n      <div>Dialog body</div>\n    </paper-dialog>\n\n### Accessibility\n\nSee the docs for `Polymer.PaperDialogBehavior` for accessibility features\nimplemented by this element.",
                    "source": {
                        "module": "@polymer/paper-dialog/paper-dialog.d.ts",
                        "symbol": "PaperDialogElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "animationConfig",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Animation configuration. See README for more info."
                            },
                            {
                                "name": "entryAnimation",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Convenience property for setting an 'entry' animation. Do not set\n`animationConfig.entry` manually if using this. The animated node is set\nto `this` if using this property."
                            },
                            {
                                "name": "exitAnimation",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Convenience property for setting an 'exit' animation. Do not set\n`animationConfig.exit` manually if using this. The animated node is set\nto `this` if using this property."
                            },
                            {
                                "name": "modal",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If `modal` is true, this implies `no-cancel-on-outside-click`,\n`no-cancel-on-esc-key` and `with-backdrop`."
                            },
                            {
                                "name": "hostAttributes",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "opened",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True if the overlay is currently displayed."
                            },
                            {
                                "name": "canceled",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True if the overlay was canceled when it was last closed."
                            },
                            {
                                "name": "withBackdrop",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to display a backdrop behind the overlay. It traps the focus\nwithin the light DOM of the overlay."
                            },
                            {
                                "name": "noAutoFocus",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to disable auto-focusing the overlay or child nodes with\nthe `autofocus` attribute` when the overlay is opened."
                            },
                            {
                                "name": "noCancelOnEscKey",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to disable canceling the overlay with the ESC key."
                            },
                            {
                                "name": "noCancelOnOutsideClick",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to disable canceling the overlay by clicking outside it."
                            },
                            {
                                "name": "closingReason",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Contains the reason(s) this overlay was last closed (see\n`iron-overlay-closed`). `IronOverlayBehavior` provides the `canceled`\nreason; implementers of the behavior can provide other reasons in\naddition to `canceled`."
                            },
                            {
                                "name": "restoreFocusOnClose",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to enable restoring of focus when overlay is closed."
                            },
                            {
                                "name": "allowClickThrough",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to allow clicks to go through overlays.\nWhen the user clicks outside this overlay, the click may\nclose the overlay below."
                            },
                            {
                                "name": "alwaysOnTop",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to keep overlay always on top."
                            },
                            {
                                "name": "scrollAction",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Determines which action to perform when scroll outside an opened overlay\nhappens. Possible values: lock - blocks scrolling from happening, refit -\ncomputes the new position on the overlay cancel - causes the overlay to\nclose"
                            },
                            {
                                "name": "_focusedChild",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "Node",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "The node being focused."
                            },
                            {
                                "name": "backdropElement",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "Element",
                                    "required": true
                                },
                                "description": "The backdrop element."
                            },
                            {
                                "name": "_focusNode",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": "Node",
                                    "required": true
                                },
                                "description": "Returns the node to give focus to."
                            },
                            {
                                "name": "_focusableNodes",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": "Node[]",
                                    "required": true
                                },
                                "description": "Array of nodes that can receive focus (overlay included), ordered by\n`tabindex`. This is used to retrieve which is the first and last focusable\nnodes in order to wrap the focus for overlays `with-backdrop`.\n\nIf you know what is your content (specifically the first and last focusable\nchildren), you can override this method to return only `[firstFocusable,\nlastFocusable];`"
                            },
                            {
                                "name": "_parentResizable",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The closest ancestor element that implements `IronResizableBehavior`."
                            },
                            {
                                "name": "_notifyingDescendant",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True if this element is currently notifying its descendant elements of\nresize."
                            },
                            {
                                "name": "sizingTarget",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "Element",
                                    "required": true
                                },
                                "description": "The element that will receive a `max-height`/`width`. By default it is\nthe same as `this`, but it can be set to a child element. This is useful,\nfor example, for implementing a scrolling region inside the element."
                            },
                            {
                                "name": "fitInto",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The element to fit `this` into."
                            },
                            {
                                "name": "noOverlap",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Will position the element around the positionTarget without overlapping\nit."
                            },
                            {
                                "name": "positionTarget",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "Element",
                                    "required": true
                                },
                                "description": "The element that should be used to position the element. If not set, it\nwill default to the parent node."
                            },
                            {
                                "name": "horizontalAlign",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The orientation against which to align the element horizontally\nrelative to the `positionTarget`. Possible values are \"left\", \"right\",\n\"center\", \"auto\"."
                            },
                            {
                                "name": "verticalAlign",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The orientation against which to align the element vertically\nrelative to the `positionTarget`. Possible values are \"top\", \"bottom\",\n\"middle\", \"auto\"."
                            },
                            {
                                "name": "dynamicAlign",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, it will use `horizontalAlign` and `verticalAlign` values as\npreferred alignment and if there's not enough space, it will pick the\nvalues which minimize the cropping."
                            },
                            {
                                "name": "horizontalOffset",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "A pixel value that will be added to the position calculated for the\ngiven `horizontalAlign`, in the direction of alignment. You can think\nof it as increasing or decreasing the distance to the side of the\nscreen given by `horizontalAlign`.\n\nIf `horizontalAlign` is \"left\" or \"center\", this offset will increase or\ndecrease the distance to the left side of the screen: a negative offset\nwill move the dropdown to the left; a positive one, to the right.\n\nConversely if `horizontalAlign` is \"right\", this offset will increase\nor decrease the distance to the right side of the screen: a negative\noffset will move the dropdown to the right; a positive one, to the left."
                            },
                            {
                                "name": "verticalOffset",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "A pixel value that will be added to the position calculated for the\ngiven `verticalAlign`, in the direction of alignment. You can think\nof it as increasing or decreasing the distance to the side of the\nscreen given by `verticalAlign`.\n\nIf `verticalAlign` is \"top\" or \"middle\", this offset will increase or\ndecrease the distance to the top side of the screen: a negative offset\nwill move the dropdown upwards; a positive one, downwards.\n\nConversely if `verticalAlign` is \"bottom\", this offset will increase\nor decrease the distance to the bottom side of the screen: a negative\noffset will move the dropdown downwards; a positive one, upwards."
                            },
                            {
                                "name": "autoFitOnAttach",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to auto-fit on attach."
                            },
                            {
                                "name": "expandSizingTargetForScrollbars",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true and scrollbars are added to `sizingTarget` after it is\npositioned, the size of the added scrollbars will be added to its\n`maxWidth` and `maxHeight`."
                            },
                            {
                                "name": "_fitInfo",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "object",
                                        "null"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_fitWidth",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                }
                            },
                            {
                                "name": "_fitHeight",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                }
                            },
                            {
                                "name": "_fitLeft",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                }
                            },
                            {
                                "name": "_fitTop",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                }
                            },
                            {
                                "name": "_defaultPositionTarget",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "The element that should be used to position the element,\nif no position target is configured."
                            },
                            {
                                "name": "_localeHorizontalAlign",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "The horizontal align value, accounting for the RTL/LTR text direction."
                            }
                        ]
                    }
                },
                {
                    "name": "paper-dropdown-menu-light",
                    "description": "Material design: [Dropdown\nmenus](https://www.google.com/design/spec/components/buttons.html#buttons-dropdown-buttons)\n\nThis is a faster, lighter version of `paper-dropdown-menu`, that does not\nuse a `<paper-input>` internally. Use this element if you're concerned about\nthe performance of this element, i.e., if you plan on using many dropdowns on\nthe same page. Note that this element has a slightly different styling API\nthan `paper-dropdown-menu`.\n\n`paper-dropdown-menu-light` is similar to a native browser select element.\n`paper-dropdown-menu-light` works with selectable content. The currently\nselected item is displayed in the control. If no item is selected, the `label`\nis displayed instead.\n\nExample:\n\n    <paper-dropdown-menu-light label=\"Your favourite pastry\">\n      <paper-listbox slot=\"dropdown-content\">\n        <paper-item>Croissant</paper-item>\n        <paper-item>Donut</paper-item>\n        <paper-item>Financier</paper-item>\n        <paper-item>Madeleine</paper-item>\n      </paper-listbox>\n    </paper-dropdown-menu-light>\n\nThis example renders a dropdown menu with 4 options.\n\nThe child element with the slot `dropdown-content` is used as the dropdown\nmenu. This can be a [`paper-listbox`](paper-listbox), or any other or\nelement that acts like an [`iron-selector`](iron-selector).\n\nSpecifically, the menu child must fire an\n[`iron-select`](iron-selector#event-iron-select) event when one of its\nchildren is selected, and an\n[`iron-deselect`](iron-selector#event-iron-deselect) event when a child is\ndeselected. The selected or deselected item must be passed as the event's\n`detail.item` property.\n\nApplications can listen for the `iron-select` and `iron-deselect` events\nto react when options are selected and deselected.\n\n### Styling\n\nThe following custom properties and mixins are also available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-dropdown-menu` | A mixin that is applied to the element host | `{}`\n`--paper-dropdown-menu-disabled` | A mixin that is applied to the element host when disabled | `{}`\n`--paper-dropdown-menu-ripple` | A mixin that is applied to the internal ripple | `{}`\n`--paper-dropdown-menu-button` | A mixin that is applied to the internal menu button | `{}`\n`--paper-dropdown-menu-icon` | A mixin that is applied to the internal icon | `{}`\n`--paper-dropdown-menu-disabled-opacity` | The opacity of the dropdown when disabled  | `0.33`\n`--paper-dropdown-menu-color` | The color of the input/label/underline when the dropdown is unfocused | `--primary-text-color`\n`--paper-dropdown-menu-focus-color` | The color of the label/underline when the dropdown is focused  | `--primary-color`\n`--paper-dropdown-error-color` | The color of the label/underline when the dropdown is invalid  | `--error-color`\n`--paper-dropdown-menu-label` | Mixin applied to the label | `{}`\n`--paper-dropdown-menu-input` | Mixin applied to the input | `{}`\n`--paper-dropdown-menu-underline-focus` | Mixin applied to the focus underline | `{}`\n\nNote that in this element, the underline is just the bottom border of the\n\"input\". To style it:\n\n    <style is=custom-style>\n      paper-dropdown-menu-light.custom {\n        --paper-dropdown-menu-input: {\n          border-bottom: 2px dashed lavender;\n        };\n    </style>",
                    "source": {
                        "module": "@polymer/paper-dropdown-menu/paper-dropdown-menu-light.d.ts",
                        "symbol": "PaperDropdownMenuLightElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "selectedItemLabel",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The derived \"label\" of the currently selected item. This value\nis the `label` property on the selected item if set, or else the\ntrimmed text content of the selected item."
                            },
                            {
                                "name": "selectedItem",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "The last selected item. An item is selected if the dropdown menu has\na child with class `dropdown-content`, and that child triggers an\n`iron-select` event with the selected `item` in the `detail`."
                            },
                            {
                                "name": "label",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The label for the dropdown."
                            },
                            {
                                "name": "placeholder",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The placeholder for the dropdown."
                            },
                            {
                                "name": "opened",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True if the dropdown is open. Otherwise, false."
                            },
                            {
                                "name": "allowOutsideScroll",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "By default, the dropdown will constrain scrolling on the page\nto itself when opened.\nSet to true in order to prevent scroll from being constrained\nto the dropdown when it opens."
                            },
                            {
                                "name": "noLabelFloat",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to disable the floating label. Bind this to the\n`<paper-input-container>`'s `noLabelFloat` property."
                            },
                            {
                                "name": "alwaysFloatLabel",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to always float the label. Bind this to the\n`<paper-input-container>`'s `alwaysFloatLabel` property."
                            },
                            {
                                "name": "noAnimations",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to disable animations when opening and closing the\ndropdown."
                            },
                            {
                                "name": "horizontalAlign",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The orientation against which to align the menu dropdown\nhorizontally relative to the dropdown trigger."
                            },
                            {
                                "name": "verticalAlign",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The orientation against which to align the menu dropdown\nvertically relative to the dropdown trigger."
                            },
                            {
                                "name": "verticalOffset",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Overrides the vertical offset computed in\n_computeMenuVerticalOffset."
                            },
                            {
                                "name": "hasContent",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "contentElement",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "The content element that is contained by the dropdown menu, if any."
                            },
                            {
                                "name": "validator",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Name of the validator to use."
                            },
                            {
                                "name": "invalid",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True if the last call to `validate` is invalid."
                            },
                            {
                                "name": "_validator",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "Recompute this every time it's needed, because we don't know if the\nunderlying IronValidatableBehaviorMeta has changed."
                            },
                            {
                                "name": "name",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The name of this element."
                            },
                            {
                                "name": "value",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The value for this element that will be used when submitting in\na form. It reflects the value of `selectedItemLabel`. If set directly,\nit will not update the `selectedItemLabel` value."
                            },
                            {
                                "name": "required",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to mark the input as required. If used in a form, a\ncustom element that uses this behavior should also use\nIronValidatableBehavior and define a custom validation method.\nOtherwise, a `required` element will always be considered valid.\nIt's also strongly recommended to provide a visual style for the element\nwhen its value is invalid."
                            },
                            {
                                "name": "noink",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the element will not produce a ripple effect when interacted\nwith via the pointer."
                            },
                            {
                                "name": "_rippleContainer",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "Element",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "focused",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the element currently has focus."
                            },
                            {
                                "name": "disabled",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the user cannot interact with this element."
                            },
                            {
                                "name": "_oldTabIndex",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Value of the `tabindex` attribute before `disabled` was activated.\n`null` means the attribute was not present."
                            },
                            {
                                "name": "_boundFocusBlurHandler",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "Function",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "pressed",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the user is currently holding down the button."
                            },
                            {
                                "name": "toggles",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the button toggles the active state with each tap or press\nof the spacebar."
                            },
                            {
                                "name": "active",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the button is a toggle and is currently in the active state."
                            },
                            {
                                "name": "pointerDown",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True if the element is currently being pressed by a \"pointer,\" which\nis loosely defined as mouse or touch input (but specifically excluding\nkeyboard input)."
                            },
                            {
                                "name": "receivedFocusFromKeyboard",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True if the input device that caused the element to receive focus\nwas a keyboard."
                            },
                            {
                                "name": "ariaActiveAttribute",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The aria attribute to be set if the button is a toggle and in the\nactive state."
                            },
                            {
                                "name": "_mouseEventRe",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "RegExp",
                                        "null"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "keyEventTarget",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "EventTarget",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "The EventTarget that will be firing relevant KeyboardEvents. Set it to\n`null` to disable the listeners."
                            },
                            {
                                "name": "stopKeyboardEventPropagation",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents."
                            },
                            {
                                "name": "_boundKeyHandlers",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "any[]",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_imperativeKeyBindings",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "own properties of everything on the \"prototype\"."
                            },
                            {
                                "name": "keyBindings",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "object",
                                    "required": true
                                },
                                "description": "To be used to express what combination of keys  will trigger the relative\ncallback. e.g. `keyBindings: { 'esc': '_onEscPressed'}`"
                            }
                        ]
                    }
                },
                {
                    "name": "paper-dropdown-menu",
                    "description": "Material design: [Dropdown\nmenus](https://www.google.com/design/spec/components/buttons.html#buttons-dropdown-buttons)\n\n`paper-dropdown-menu` is similar to a native browser select element.\n`paper-dropdown-menu` works with selectable content. The currently selected\nitem is displayed in the control. If no item is selected, the `label` is\ndisplayed instead.\n\nExample:\n\n    <paper-dropdown-menu label=\"Your favourite pastry\">\n      <paper-listbox slot=\"dropdown-content\">\n        <paper-item>Croissant</paper-item>\n        <paper-item>Donut</paper-item>\n        <paper-item>Financier</paper-item>\n        <paper-item>Madeleine</paper-item>\n      </paper-listbox>\n    </paper-dropdown-menu>\n\nThis example renders a dropdown menu with 4 options.\n\nThe child element with the slot `dropdown-content` is used as the dropdown\nmenu. This can be a [`paper-listbox`](paper-listbox), or any other or\nelement that acts like an [`iron-selector`](iron-selector).\n\nSpecifically, the menu child must fire an\n[`iron-select`](iron-selector#event-iron-select) event when one of its\nchildren is selected, and an\n[`iron-deselect`](iron-selector#event-iron-deselect) event when a child is\ndeselected. The selected or deselected item must be passed as the event's\n`detail.item` property.\n\nApplications can listen for the `iron-select` and `iron-deselect` events\nto react when options are selected and deselected.\n\n### Styling\n\nThe following custom properties and mixins are also available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-dropdown-menu` | A mixin that is applied to the element host | `{}`\n`--paper-dropdown-menu-disabled` | A mixin that is applied to the element host when disabled | `{}`\n`--paper-dropdown-menu-ripple` | A mixin that is applied to the internal ripple | `{}`\n`--paper-dropdown-menu-button` | A mixin that is applied to the internal menu button | `{}`\n`--paper-dropdown-menu-input` | A mixin that is applied to the internal paper input | `{}`\n`--paper-dropdown-menu-icon` | A mixin that is applied to the internal icon | `{}`\n\nYou can also use any of the `paper-input-container` and `paper-menu-button`\nstyle mixins and custom properties to style the internal input and menu button\nrespectively.",
                    "source": {
                        "module": "@polymer/paper-dropdown-menu/paper-dropdown-menu.d.ts",
                        "symbol": "PaperDropdownMenuElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "selectedItemLabel",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The derived \"label\" of the currently selected item. This value\nis the `label` property on the selected item if set, or else the\ntrimmed text content of the selected item."
                            },
                            {
                                "name": "selectedItem",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "The last selected item. An item is selected if the dropdown menu has\na child with slot `dropdown-content`, and that child triggers an\n`iron-select` event with the selected `item` in the `detail`."
                            },
                            {
                                "name": "label",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The label for the dropdown."
                            },
                            {
                                "name": "placeholder",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The placeholder for the dropdown."
                            },
                            {
                                "name": "errorMessage",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The error message to display when invalid."
                            },
                            {
                                "name": "opened",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True if the dropdown is open. Otherwise, false."
                            },
                            {
                                "name": "allowOutsideScroll",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "By default, the dropdown will constrain scrolling on the page\nto itself when opened.\nSet to true in order to prevent scroll from being constrained\nto the dropdown when it opens."
                            },
                            {
                                "name": "noLabelFloat",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to disable the floating label. Bind this to the\n`<paper-input-container>`'s `noLabelFloat` property."
                            },
                            {
                                "name": "alwaysFloatLabel",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to always float the label. Bind this to the\n`<paper-input-container>`'s `alwaysFloatLabel` property."
                            },
                            {
                                "name": "noAnimations",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to disable animations when opening and closing the\ndropdown."
                            },
                            {
                                "name": "horizontalAlign",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The orientation against which to align the menu dropdown\nhorizontally relative to the dropdown trigger."
                            },
                            {
                                "name": "verticalAlign",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The orientation against which to align the menu dropdown\nvertically relative to the dropdown trigger."
                            },
                            {
                                "name": "verticalOffset",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Overrides the vertical offset computed in\n_computeMenuVerticalOffset."
                            },
                            {
                                "name": "dynamicAlign",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the `horizontalAlign` and `verticalAlign` properties will\nbe considered preferences instead of strict requirements when\npositioning the dropdown and may be changed if doing so reduces\nthe area of the dropdown falling outside of `fitInto`."
                            },
                            {
                                "name": "restoreFocusOnClose",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Whether focus should be restored to the dropdown when the menu closes."
                            },
                            {
                                "name": "expandSizingTargetForScrollbars",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true and scrollbars are added to the dropdown after it is positioned,\nthe size of the added scrollbars will be added to its `maxWidth` and\n`maxHeight`."
                            },
                            {
                                "name": "contentElement",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "The content element that is contained by the dropdown menu, if any."
                            },
                            {
                                "name": "validator",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Name of the validator to use."
                            },
                            {
                                "name": "invalid",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True if the last call to `validate` is invalid."
                            },
                            {
                                "name": "_validator",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "Recompute this every time it's needed, because we don't know if the\nunderlying IronValidatableBehaviorMeta has changed."
                            },
                            {
                                "name": "name",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The name of this element."
                            },
                            {
                                "name": "value",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The value for this element that will be used when submitting in\na form. It reflects the value of `selectedItemLabel`. If set directly,\nit will not update the `selectedItemLabel` value."
                            },
                            {
                                "name": "required",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to mark the input as required. If used in a form, a\ncustom element that uses this behavior should also use\nIronValidatableBehavior and define a custom validation method.\nOtherwise, a `required` element will always be considered valid.\nIt's also strongly recommended to provide a visual style for the element\nwhen its value is invalid."
                            },
                            {
                                "name": "focused",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the element currently has focus."
                            },
                            {
                                "name": "disabled",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the user cannot interact with this element."
                            },
                            {
                                "name": "_oldTabIndex",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Value of the `tabindex` attribute before `disabled` was activated.\n`null` means the attribute was not present."
                            },
                            {
                                "name": "_boundFocusBlurHandler",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "Function",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "pressed",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the user is currently holding down the button."
                            },
                            {
                                "name": "toggles",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the button toggles the active state with each tap or press\nof the spacebar."
                            },
                            {
                                "name": "active",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the button is a toggle and is currently in the active state."
                            },
                            {
                                "name": "pointerDown",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True if the element is currently being pressed by a \"pointer,\" which\nis loosely defined as mouse or touch input (but specifically excluding\nkeyboard input)."
                            },
                            {
                                "name": "receivedFocusFromKeyboard",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True if the input device that caused the element to receive focus\nwas a keyboard."
                            },
                            {
                                "name": "ariaActiveAttribute",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The aria attribute to be set if the button is a toggle and in the\nactive state."
                            },
                            {
                                "name": "_mouseEventRe",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "RegExp",
                                        "null"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "keyEventTarget",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "EventTarget",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "The EventTarget that will be firing relevant KeyboardEvents. Set it to\n`null` to disable the listeners."
                            },
                            {
                                "name": "stopKeyboardEventPropagation",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents."
                            },
                            {
                                "name": "_boundKeyHandlers",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "any[]",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_imperativeKeyBindings",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "own properties of everything on the \"prototype\"."
                            },
                            {
                                "name": "keyBindings",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "object",
                                    "required": true
                                },
                                "description": "To be used to express what combination of keys  will trigger the relative\ncallback. e.g. `keyBindings: { 'esc': '_onEscPressed'}`"
                            }
                        ]
                    }
                },
                {
                    "name": "paper-fab",
                    "description": "Material design: [Floating Action\nButton](https://www.google.com/design/spec/components/buttons-floating-action-button.html)\n\n`paper-fab` is a floating action button. It contains an image placed in the\ncenter and comes in two sizes: regular size and a smaller size by applying the\nattribute `mini`. When the user touches the button, a ripple effect emanates\nfrom the center of the button.\n\nYou may import `iron-icons` to use with this element, or provide a URL to a\ncustom icon. See `iron-iconset` for more information about how to use a custom\nicon set.\n\nExample:\n\n    <script type=\"module\">\n      import '@polymer/iron-icons/iron-icons.js';\n    </script>\n\n    <paper-fab icon=\"add\"></paper-fab>\n    <paper-fab mini icon=\"favorite\"></paper-fab>\n    <paper-fab src=\"star.png\"></paper-fab>\n\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-fab-background` | The background color of the button | `--accent-color`\n`--paper-fab-keyboard-focus-background` | The background color of the button when focused | `--paper-pink-900`\n`--paper-fab-disabled-background` | The background color of the button when it's disabled | `--paper-grey-300`\n`--paper-fab-disabled-text` | The text color of the button when it's disabled | `--paper-grey-500`\n`--paper-fab` | Mixin applied to the button | `{}`\n`--paper-fab-mini` | Mixin applied to a mini button | `{}`\n`--paper-fab-disabled` | Mixin applied to a disabled button | `{}`\n`--paper-fab-iron-icon` | Mixin applied to the iron-icon within the button | `{}`\n`--paper-fab-label` | Mixin applied to the label within the button | `{}`",
                    "source": {
                        "module": "@polymer/paper-fab/paper-fab.d.ts",
                        "symbol": "PaperFabElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "src",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The URL of an image for the icon. If the src property is specified,\nthe icon property should not be."
                            },
                            {
                                "name": "icon",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Specifies the icon name or index in the set of icons available in\nthe icon's icon set. If the icon property is specified,\nthe src property should not be."
                            },
                            {
                                "name": "mini",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set this to true to style this is a \"mini\" FAB."
                            },
                            {
                                "name": "label",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The label displayed in the badge. The label is centered, and ideally\nshould have very few characters."
                            },
                            {
                                "name": "elevation",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The z-depth of this element, from 0-5. Setting to 0 will remove the\nshadow, and each increasing number greater than 0 will be \"deeper\"\nthan the last."
                            },
                            {
                                "name": "hostAttributes",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "noink",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the element will not produce a ripple effect when interacted\nwith via the pointer."
                            },
                            {
                                "name": "_rippleContainer",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "Element",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "focused",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the element currently has focus."
                            },
                            {
                                "name": "disabled",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the user cannot interact with this element."
                            },
                            {
                                "name": "_oldTabIndex",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Value of the `tabindex` attribute before `disabled` was activated.\n`null` means the attribute was not present."
                            },
                            {
                                "name": "_boundFocusBlurHandler",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "Function",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "pressed",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the user is currently holding down the button."
                            },
                            {
                                "name": "toggles",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the button toggles the active state with each tap or press\nof the spacebar."
                            },
                            {
                                "name": "active",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the button is a toggle and is currently in the active state."
                            },
                            {
                                "name": "pointerDown",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True if the element is currently being pressed by a \"pointer,\" which\nis loosely defined as mouse or touch input (but specifically excluding\nkeyboard input)."
                            },
                            {
                                "name": "receivedFocusFromKeyboard",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True if the input device that caused the element to receive focus\nwas a keyboard."
                            },
                            {
                                "name": "ariaActiveAttribute",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The aria attribute to be set if the button is a toggle and in the\nactive state."
                            },
                            {
                                "name": "_mouseEventRe",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "RegExp",
                                        "null"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "keyEventTarget",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "EventTarget",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "The EventTarget that will be firing relevant KeyboardEvents. Set it to\n`null` to disable the listeners."
                            },
                            {
                                "name": "stopKeyboardEventPropagation",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents."
                            },
                            {
                                "name": "_boundKeyHandlers",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "any[]",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_imperativeKeyBindings",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "own properties of everything on the \"prototype\"."
                            },
                            {
                                "name": "keyBindings",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "object",
                                    "required": true
                                },
                                "description": "To be used to express what combination of keys  will trigger the relative\ncallback. e.g. `keyBindings: { 'esc': '_onEscPressed'}`"
                            }
                        ]
                    }
                },
                {
                    "name": "paper-icon-button-light",
                    "description": "This is a lighter version of `paper-icon-button`. Its goal is performance, not\ndeveloper ergonomics, so as a result it has fewer features than\n`paper-icon-button` itself. To use it, you must distribute a `button` containing\nthe `iron-icon` you want to use:\n\n<script type=\"module\">\n  import '@polymer/iron-icon/iron-icon.js';\n  import '@polymer/paper-icon-button/paper-icon-button-light.js';\n  import '@polymer/iron-icons/iron-icons.js';\n</script>\n\n<paper-icon-button-light>\n  <button title=\"heart\">\n    <iron-icon icon=\"favorite\"></iron-icon>\n  </button>\n</paper-icon-button-light>\n\nNote that this button is assumed to be distributed at the startup of\n`paper-icon-button-light`. Dynamically adding a `button` to this element is\nnot supported.\n\nThe `title`/`disabled` etc. attributes go on the distributed button, not on the\nwrapper.\n\nThe following custom properties and mixins are also available for styling:\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-icon-button-light-ripple` | Mixin applied to the paper ripple | `{}`",
                    "source": {
                        "module": "@polymer/paper-icon-button/paper-icon-button-light.d.ts",
                        "symbol": "PaperIconButtonLightElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "noink",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the element will not produce a ripple effect when interacted\nwith via the pointer."
                            },
                            {
                                "name": "_rippleContainer",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "Element",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            }
                        ]
                    }
                },
                {
                    "name": "paper-icon-button",
                    "description": "Material design: [Icon\ntoggles](https://www.google.com/design/spec/components/buttons.html#buttons-toggle-buttons)\n\n`paper-icon-button` is a button with an image placed at the center. When the\nuser touches the button, a ripple effect emanates from the center of the button.\n\n`paper-icon-button` does not include a default icon set. To use icons from the\ndefault set, include `PolymerElements/iron-icons/iron-icons.html`, and use the\n`icon` attribute to specify which icon from the icon set to use.\n\n    <paper-icon-button icon=\"menu\"></paper-icon-button>\n\nSee [`iron-iconset`](iron-iconset) for more information about\nhow to use a custom icon set.\n\nExample:\n\n    <script type=\"module\">\n      import '@polymer/iron-icons/iron-icons.js';\n    </script>\n\n    <paper-icon-button icon=\"favorite\"></paper-icon-button>\n    <paper-icon-button src=\"star.png\"></paper-icon-button>\n\nTo use `paper-icon-button` as a link, wrap it in an anchor tag. Since\n`paper-icon-button` will already receive focus, you may want to prevent the\nanchor tag from receiving focus as well by setting its tabindex to -1.\n\n    <a href=\"https://www.polymer-project.org\" tabindex=\"-1\">\n      <paper-icon-button icon=\"polymer\"></paper-icon-button>\n    </a>\n\n### Styling\n\nStyle the button with CSS as you would a normal DOM element. If you are using\nthe icons provided by `iron-icons`, they will inherit the foreground color of\nthe button.\n\n    /* make a red \"favorite\" button *\\/\n    <paper-icon-button icon=\"favorite\" style=\"color: red;\"></paper-icon-button>\n\nBy default, the ripple is the same color as the foreground at 25% opacity. You\nmay customize the color using the `--paper-icon-button-ink-color` custom\nproperty.\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-icon-button-disabled-text` | The color of the disabled button | `--disabled-text-color`\n`--paper-icon-button-ink-color` | Selected/focus ripple color | `--primary-text-color`\n`--paper-icon-button` | Mixin for a button | `{}`\n`--paper-icon-button-disabled` | Mixin for a disabled button | `{}`\n`--paper-icon-button-hover` | Mixin for button on hover | `{}`",
                    "source": {
                        "module": "@polymer/paper-icon-button/paper-icon-button.d.ts",
                        "symbol": "PaperIconButtonElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "src",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The URL of an image for the icon. If the src property is specified,\nthe icon property should not be."
                            },
                            {
                                "name": "icon",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Specifies the icon name or index in the set of icons available in\nthe icon's icon set. If the icon property is specified,\nthe src property should not be."
                            },
                            {
                                "name": "alt",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Specifies the alternate text for the button, for accessibility."
                            },
                            {
                                "name": "hostAttributes",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "noink",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the element will not produce a ripple effect when interacted\nwith via the pointer."
                            },
                            {
                                "name": "_rippleContainer",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "Element",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "focused",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the element currently has focus."
                            },
                            {
                                "name": "disabled",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the user cannot interact with this element."
                            },
                            {
                                "name": "_oldTabIndex",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Value of the `tabindex` attribute before `disabled` was activated.\n`null` means the attribute was not present."
                            },
                            {
                                "name": "_boundFocusBlurHandler",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "Function",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "pressed",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the user is currently holding down the button."
                            },
                            {
                                "name": "toggles",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the button toggles the active state with each tap or press\nof the spacebar."
                            },
                            {
                                "name": "active",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the button is a toggle and is currently in the active state."
                            },
                            {
                                "name": "pointerDown",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True if the element is currently being pressed by a \"pointer,\" which\nis loosely defined as mouse or touch input (but specifically excluding\nkeyboard input)."
                            },
                            {
                                "name": "receivedFocusFromKeyboard",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True if the input device that caused the element to receive focus\nwas a keyboard."
                            },
                            {
                                "name": "ariaActiveAttribute",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The aria attribute to be set if the button is a toggle and in the\nactive state."
                            },
                            {
                                "name": "_mouseEventRe",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "RegExp",
                                        "null"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "keyEventTarget",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "EventTarget",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "The EventTarget that will be firing relevant KeyboardEvents. Set it to\n`null` to disable the listeners."
                            },
                            {
                                "name": "stopKeyboardEventPropagation",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents."
                            },
                            {
                                "name": "_boundKeyHandlers",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "any[]",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_imperativeKeyBindings",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "own properties of everything on the \"prototype\"."
                            },
                            {
                                "name": "keyBindings",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "object",
                                    "required": true
                                },
                                "description": "To be used to express what combination of keys  will trigger the relative\ncallback. e.g. `keyBindings: { 'esc': '_onEscPressed'}`"
                            }
                        ]
                    }
                },
                {
                    "name": "paper-input-char-counter",
                    "description": "`<paper-input-char-counter>` is a character counter for use with\n`<paper-input-container>`. It shows the number of characters entered in the\ninput and the max length if it is specified.\n\n    <paper-input-container>\n      <input maxlength=\"20\">\n      <paper-input-char-counter></paper-input-char-counter>\n    </paper-input-container>\n\n### Styling\n\nThe following mixin is available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-input-char-counter` | Mixin applied to the element | `{}`",
                    "source": {
                        "module": "@polymer/paper-input/paper-input-char-counter.d.ts",
                        "symbol": "PaperInputCharCounterElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "_charCounterStr",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            }
                        ]
                    }
                },
                {
                    "name": "paper-input-container",
                    "description": "`<paper-input-container>` is a container for a `<label>`, an `<iron-input>` or\n`<textarea>` and optional add-on elements such as an error message or character\ncounter, used to implement Material Design text fields.\n\nFor example:\n\n    <paper-input-container>\n      <label slot=\"label\">Your name</label>\n      <iron-input slot=\"input\">\n        <input>\n      </iron-input>\n      // In Polymer 1.0, you would use `<input is=\"iron-input\" slot=\"input\">`\ninstead of the above.\n    </paper-input-container>\n\nYou can style the nested `<input>` however you want; if you want it to look like\na Material Design input, you can style it with the\n--paper-input-container-shared-input-style mixin.\n\nDo not wrap `<paper-input-container>` around elements that already include it,\nsuch as `<paper-input>`. Doing so may cause events to bounce infinitely between\nthe container and its contained element.\n\n### Listening for input changes\n\nBy default, it listens for changes on the `bind-value` attribute on its children\nnodes and perform tasks such as auto-validating and label styling when the\n`bind-value` changes. You can configure the attribute it listens to with the\n`attr-for-value` attribute.\n\n### Using a custom input element\n\nYou can use a custom input element in a `<paper-input-container>`, for example\nto implement a compound input field like a social security number input. The\ncustom input element should have the `paper-input-input` class, have a\n`notify:true` value property and optionally implements\n`Polymer.IronValidatableBehavior` if it is validatable.\n\n    <paper-input-container attr-for-value=\"ssn-value\">\n      <label slot=\"label\">Social security number</label>\n      <ssn-input slot=\"input\" class=\"paper-input-input\"></ssn-input>\n    </paper-input-container>\n\n\nIf you're using a `<paper-input-container>` imperatively, it's important to make\nsure that you attach its children (the `iron-input` and the optional `label`)\nbefore you attach the `<paper-input-container>` itself, so that it can be set up\ncorrectly.\n\n### Validation\n\nIf the `auto-validate` attribute is set, the input container will validate the\ninput and update the container styling when the input value changes.\n\n### Add-ons\n\nAdd-ons are child elements of a `<paper-input-container>` with the `add-on`\nattribute and implements the `Polymer.PaperInputAddonBehavior` behavior. They\nare notified when the input value or validity changes, and may implement\nfunctionality such as error messages or character counters. They appear at the\nbottom of the input.\n\n### Prefixes and suffixes\nThese are child elements of a `<paper-input-container>` with the `prefix`\nor `suffix` attribute, and are displayed inline with the input, before or after.\n\n    <paper-input-container>\n      <div slot=\"prefix\">$</div>\n      <label slot=\"label\">Total</label>\n      <iron-input slot=\"input\">\n        <input>\n      </iron-input>\n      // In Polymer 1.0, you would use `<input is=\"iron-input\" slot=\"input\">`\ninstead of the above. <paper-icon-button slot=\"suffix\"\nicon=\"clear\"></paper-icon-button>\n    </paper-input-container>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-input-container-color` | Label and underline color when the input is not focused | `--secondary-text-color`\n`--paper-input-container-focus-color` | Label and underline color when the input is focused | `--primary-color`\n`--paper-input-container-invalid-color` | Label and underline color when the input is is invalid | `--error-color`\n`--paper-input-container-input-color` | Input foreground color | `--primary-text-color`\n`--paper-input-container` | Mixin applied to the container | `{}`\n`--paper-input-container-disabled` | Mixin applied to the container when it's disabled | `{}`\n`--paper-input-container-label` | Mixin applied to the label | `{}`\n`--paper-input-container-label-focus` | Mixin applied to the label when the input is focused | `{}`\n`--paper-input-container-label-floating` | Mixin applied to the label when floating | `{}`\n`--paper-input-container-input` | Mixin applied to the input | `{}`\n`--paper-input-container-input-align` | The vertical-align property of the input | `bottom`\n`--paper-input-container-input-disabled` | Mixin applied to the input when the component is disabled | `{}`\n`--paper-input-container-input-focus` | Mixin applied to the input when focused | `{}`\n`--paper-input-container-input-invalid` | Mixin applied to the input when invalid | `{}`\n`--paper-input-container-input-webkit-spinner` | Mixin applied to the webkit spinner | `{}`\n`--paper-input-container-input-webkit-clear` | Mixin applied to the webkit clear button | `{}`\n`--paper-input-container-input-webkit-calendar-picker-indicator` | Mixin applied to the webkit calendar picker indicator | `{}`\n`--paper-input-container-ms-clear` | Mixin applied to the Internet Explorer clear button | `{}`\n`--paper-input-container-underline` | Mixin applied to the underline | `{}`\n`--paper-input-container-underline-focus` | Mixin applied to the underline when the input is focused | `{}`\n`--paper-input-container-underline-disabled` | Mixin applied to the underline when the input is disabled | `{}`\n`--paper-input-prefix` | Mixin applied to the input prefix | `{}`\n`--paper-input-suffix` | Mixin applied to the input suffix | `{}`\n`--paper-input-container-label-before` | Mixin applied to label before pseudo element | {}\n`--paper-input-container-label-after` | Mixin applied to label after pseudo element (useful for required asterisk) | {}\n\nThis element is `display:block` by default, but you can set the `inline`\nattribute to make it `display:inline-block`.",
                    "source": {
                        "module": "@polymer/paper-input/paper-input-container.d.ts",
                        "symbol": "PaperInputContainerElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "noLabelFloat",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to disable the floating label. The label disappears when the\ninput value is not null."
                            },
                            {
                                "name": "alwaysFloatLabel",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to always float the floating label."
                            },
                            {
                                "name": "attrForValue",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The attribute to listen for value changes on."
                            },
                            {
                                "name": "autoValidate",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to auto-validate the input value when it changes."
                            },
                            {
                                "name": "invalid",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True if the input is invalid. This property is set automatically when the\ninput value changes if auto-validating, or when the `iron-input-validate`\nevent is heard from a child."
                            },
                            {
                                "name": "focused",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True if the input has focus."
                            },
                            {
                                "name": "_addons",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "any[]",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_inputHasContent",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_inputSelector",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_boundOnFocus",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "Function",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_boundOnBlur",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "Function",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_boundOnInput",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "Function",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_boundValueChanged",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "Function",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_valueChangedEvent",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                }
                            },
                            {
                                "name": "_propertyForValue",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                }
                            },
                            {
                                "name": "_inputElement",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                }
                            },
                            {
                                "name": "_inputElementValue",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                }
                            }
                        ]
                    }
                },
                {
                    "name": "paper-input-error",
                    "description": "`<paper-input-error>` is an error message for use with\n`<paper-input-container>`. The error is displayed when the\n`<paper-input-container>` is `invalid`.\n\n    <paper-input-container>\n      <input pattern=\"[0-9]*\">\n      <paper-input-error slot=\"add-on\">Only numbers are\nallowed!</paper-input-error>\n    </paper-input-container>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-input-container-invalid-color` | The foreground color of the error | `--error-color`\n`--paper-input-error` | Mixin applied to the error | `{}`",
                    "source": {
                        "module": "@polymer/paper-input/paper-input-error.d.ts",
                        "symbol": "PaperInputErrorElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "invalid",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True if the error is showing."
                            }
                        ]
                    }
                },
                {
                    "name": "paper-input",
                    "description": "Material design: [Text\nfields](https://www.google.com/design/spec/components/text-fields.html)\n\n`<paper-input>` is a single-line text field with Material Design styling.\n\n    <paper-input label=\"Input label\"></paper-input>\n\nIt may include an optional error message or character counter.\n\n    <paper-input error-message=\"Invalid input!\" label=\"Input\n    label\"></paper-input> <paper-input char-counter label=\"Input\n    label\"></paper-input>\n\nIt can also include custom prefix or suffix elements, which are displayed\nbefore or after the text input itself. In order for an element to be\nconsidered as a prefix, it must have the `prefix` attribute (and similarly\nfor `suffix`).\n\n    <paper-input label=\"total\">\n      <div prefix>$</div>\n      <paper-icon-button slot=\"suffix\" icon=\"clear\"></paper-icon-button>\n    </paper-input>\n\nA `paper-input` can use the native `type=search` or `type=file` features.\nHowever, since we can't control the native styling of the input (search icon,\nfile button, date placeholder, etc.), in these cases the label will be\nautomatically floated. The `placeholder` attribute can still be used for\nadditional informational text.\n\n    <paper-input label=\"search!\" type=\"search\"\n        placeholder=\"search for cats\" autosave=\"test\" results=\"5\">\n    </paper-input>\n\nSee `Polymer.PaperInputBehavior` for more API docs.\n\n### Focus\n\nTo focus a paper-input, you can call the native `focus()` method as long as the\npaper input has a tab index. Similarly, `blur()` will blur the element.\n\n### Styling\n\nSee `Polymer.PaperInputContainer` for a list of custom properties used to\nstyle this element.\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-input-container-ms-clear` | Mixin applied to the Internet Explorer reveal button (the eyeball) | {}",
                    "source": {
                        "module": "@polymer/paper-input/paper-input.d.ts",
                        "symbol": "PaperInputElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "inputRole",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "inputAriaHaspopup",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "label",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The label for this input. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\n`<label>`'s content and `hidden` property, e.g.\n`<label hidden$=\"[[!label]]\">[[label]]</label>` in your `template`"
                            },
                            {
                                "name": "value",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The value for this element."
                            },
                            {
                                "name": "invalid",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Returns true if the value is invalid. If you're using PaperInputBehavior\nto implement your own paper-input-like element, bind this to both the\n`<paper-input-container>`'s and the input's `invalid` property.\n\nIf `autoValidate` is true, the `invalid` attribute is managed\nautomatically, which can clobber attempts to manage it manually."
                            },
                            {
                                "name": "allowedPattern",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set this to specify the pattern allowed by `preventInvalidInput`. If\nyou're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `allowedPattern`\nproperty."
                            },
                            {
                                "name": "type",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The type of the input. The supported types are the\n[native input's\ntypes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_<input>_types).\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the (Polymer 1) `<input is=\"iron-input\">`'s or\n(Polymer 2)\n`<iron-input>`'s `type` property."
                            },
                            {
                                "name": "list",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The datalist of the input (if any). This should match the id of an\nexisting `<datalist>`. If you're using PaperInputBehavior to implement\nyour own paper-input-like element, bind this to the `<input\nis=\"iron-input\">`'s `list` property."
                            },
                            {
                                "name": "pattern",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "A pattern to validate the `input` with. If you're using\nPaperInputBehavior to implement your own paper-input-like element, bind\nthis to the `<input is=\"iron-input\">`'s `pattern` property."
                            },
                            {
                                "name": "required",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to mark the input as required. If used in a form, a\ncustom element that uses this behavior should also use\nIronValidatableBehavior and define a custom validation method.\nOtherwise, a `required` element will always be considered valid.\nIt's also strongly recommended to provide a visual style for the element\nwhen its value is invalid."
                            },
                            {
                                "name": "errorMessage",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The error message to display when the input is invalid. If you're using\nPaperInputBehavior to implement your own paper-input-like element,\nbind this to the `<paper-input-error>`'s content, if using."
                            },
                            {
                                "name": "charCounter",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to show a character counter."
                            },
                            {
                                "name": "noLabelFloat",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to disable the floating label. If you're using\nPaperInputBehavior to implement your own paper-input-like element, bind\nthis to the `<paper-input-container>`'s `noLabelFloat` property."
                            },
                            {
                                "name": "alwaysFloatLabel",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to always float the label. If you're using PaperInputBehavior\nto implement your own paper-input-like element, bind this to the\n`<paper-input-container>`'s `alwaysFloatLabel` property."
                            },
                            {
                                "name": "autoValidate",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to auto-validate the input value. If you're using\nPaperInputBehavior to implement your own paper-input-like element, bind\nthis to the `<paper-input-container>`'s `autoValidate` property."
                            },
                            {
                                "name": "validator",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Name of the validator to use. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `<input is=\"iron-input\">`'s `validator` property."
                            },
                            {
                                "name": "autocomplete",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autocomplete`\nproperty."
                            },
                            {
                                "name": "autofocus",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "boolean",
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autofocus`\nproperty."
                            },
                            {
                                "name": "inputmode",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `inputmode`\nproperty."
                            },
                            {
                                "name": "minlength",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The minimum length of the input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `minlength`\nproperty."
                            },
                            {
                                "name": "maxlength",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The maximum length of the input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `maxlength`\nproperty."
                            },
                            {
                                "name": "min",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The minimum (numeric or date-time) input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `min` property."
                            },
                            {
                                "name": "max",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The maximum (numeric or date-time) input value.\nCan be a String (e.g. `\"2000-01-01\"`) or a Number (e.g. `2`).\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `max` property."
                            },
                            {
                                "name": "step",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Limits the numeric or date-time increments.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `step` property."
                            },
                            {
                                "name": "name",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The name of this element."
                            },
                            {
                                "name": "placeholder",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "A placeholder string in addition to the label. If this is set, the label\nwill always float."
                            },
                            {
                                "name": "readonly",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `readonly`\nproperty."
                            },
                            {
                                "name": "size",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `size` property."
                            },
                            {
                                "name": "autocapitalize",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "string",
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autocapitalize`\nproperty."
                            },
                            {
                                "name": "autocorrect",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autocorrect`\nproperty."
                            },
                            {
                                "name": "autosave",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autosave`\nproperty, used with type=search."
                            },
                            {
                                "name": "results",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `results` property,\nused with type=search."
                            },
                            {
                                "name": "accept",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `accept` property,\nused with type=file."
                            },
                            {
                                "name": "multiple",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the`<input is=\"iron-input\">`'s `multiple` property,\nused with type=file."
                            },
                            {
                                "name": "inputElement",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "HTMLElement",
                                    "required": true
                                },
                                "description": "Returns a reference to the input element."
                            },
                            {
                                "name": "_focusableElement",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": "HTMLElement",
                                    "required": true
                                },
                                "description": "Returns a reference to the focusable element. Overridden from\nPaperInputBehavior to correctly focus the native input."
                            },
                            {
                                "name": "keyEventTarget",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "EventTarget",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "The EventTarget that will be firing relevant KeyboardEvents. Set it to\n`null` to disable the listeners."
                            },
                            {
                                "name": "stopKeyboardEventPropagation",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents."
                            },
                            {
                                "name": "_boundKeyHandlers",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "any[]",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_imperativeKeyBindings",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "own properties of everything on the \"prototype\"."
                            },
                            {
                                "name": "keyBindings",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "object",
                                    "required": true
                                },
                                "description": "To be used to express what combination of keys  will trigger the relative\ncallback. e.g. `keyBindings: { 'esc': '_onEscPressed'}`"
                            },
                            {
                                "name": "focused",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the element currently has focus."
                            },
                            {
                                "name": "disabled",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to disable this input. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nboth the `<paper-input-container>`'s and the input's `disabled` property."
                            },
                            {
                                "name": "_oldTabIndex",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Value of the `tabindex` attribute before `disabled` was activated.\n`null` means the attribute was not present."
                            },
                            {
                                "name": "_boundFocusBlurHandler",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "Function",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            }
                        ]
                    }
                },
                {
                    "name": "paper-textarea",
                    "description": "`<paper-textarea>` is a multi-line text field with Material Design styling.\n\n    <paper-textarea label=\"Textarea label\"></paper-textarea>\n\nSee `Polymer.PaperInputBehavior` for more API docs.\n\n### Validation\n\nCurrently only `required` and `maxlength` validation is supported.\n\n### Styling\n\nSee `Polymer.PaperInputContainer` for a list of custom properties used to\nstyle this element.",
                    "source": {
                        "module": "@polymer/paper-input/paper-textarea.d.ts",
                        "symbol": "PaperTextareaElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "_ariaDescribedBy",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_ariaLabelledBy",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "rows",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "number",
                                    "required": true
                                },
                                "description": "The initial number of rows."
                            },
                            {
                                "name": "maxRows",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "number",
                                    "required": true
                                },
                                "description": "The maximum number of rows this element can grow to until it\nscrolls. 0 means no maximum."
                            },
                            {
                                "name": "selectionStart",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "number",
                                    "required": true
                                }
                            },
                            {
                                "name": "selectionEnd",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "number",
                                    "required": true
                                }
                            },
                            {
                                "name": "label",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The label for this input. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\n`<label>`'s content and `hidden` property, e.g.\n`<label hidden$=\"[[!label]]\">[[label]]</label>` in your `template`"
                            },
                            {
                                "name": "value",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The value for this element."
                            },
                            {
                                "name": "invalid",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Returns true if the value is invalid. If you're using PaperInputBehavior\nto implement your own paper-input-like element, bind this to both the\n`<paper-input-container>`'s and the input's `invalid` property.\n\nIf `autoValidate` is true, the `invalid` attribute is managed\nautomatically, which can clobber attempts to manage it manually."
                            },
                            {
                                "name": "allowedPattern",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set this to specify the pattern allowed by `preventInvalidInput`. If\nyou're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `allowedPattern`\nproperty."
                            },
                            {
                                "name": "type",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The type of the input. The supported types are the\n[native input's\ntypes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_<input>_types).\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the (Polymer 1) `<input is=\"iron-input\">`'s or\n(Polymer 2)\n`<iron-input>`'s `type` property."
                            },
                            {
                                "name": "list",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The datalist of the input (if any). This should match the id of an\nexisting `<datalist>`. If you're using PaperInputBehavior to implement\nyour own paper-input-like element, bind this to the `<input\nis=\"iron-input\">`'s `list` property."
                            },
                            {
                                "name": "pattern",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "A pattern to validate the `input` with. If you're using\nPaperInputBehavior to implement your own paper-input-like element, bind\nthis to the `<input is=\"iron-input\">`'s `pattern` property."
                            },
                            {
                                "name": "required",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to mark the input as required. If used in a form, a\ncustom element that uses this behavior should also use\nIronValidatableBehavior and define a custom validation method.\nOtherwise, a `required` element will always be considered valid.\nIt's also strongly recommended to provide a visual style for the element\nwhen its value is invalid."
                            },
                            {
                                "name": "errorMessage",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The error message to display when the input is invalid. If you're using\nPaperInputBehavior to implement your own paper-input-like element,\nbind this to the `<paper-input-error>`'s content, if using."
                            },
                            {
                                "name": "charCounter",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to show a character counter."
                            },
                            {
                                "name": "noLabelFloat",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to disable the floating label. If you're using\nPaperInputBehavior to implement your own paper-input-like element, bind\nthis to the `<paper-input-container>`'s `noLabelFloat` property."
                            },
                            {
                                "name": "alwaysFloatLabel",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to always float the label. If you're using PaperInputBehavior\nto implement your own paper-input-like element, bind this to the\n`<paper-input-container>`'s `alwaysFloatLabel` property."
                            },
                            {
                                "name": "autoValidate",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to auto-validate the input value. If you're using\nPaperInputBehavior to implement your own paper-input-like element, bind\nthis to the `<paper-input-container>`'s `autoValidate` property."
                            },
                            {
                                "name": "validator",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Name of the validator to use. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `<input is=\"iron-input\">`'s `validator` property."
                            },
                            {
                                "name": "autocomplete",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autocomplete`\nproperty."
                            },
                            {
                                "name": "autofocus",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "boolean",
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autofocus`\nproperty."
                            },
                            {
                                "name": "inputmode",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `inputmode`\nproperty."
                            },
                            {
                                "name": "minlength",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The minimum length of the input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `minlength`\nproperty."
                            },
                            {
                                "name": "maxlength",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The maximum length of the input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `maxlength`\nproperty."
                            },
                            {
                                "name": "min",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The minimum (numeric or date-time) input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `min` property."
                            },
                            {
                                "name": "max",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The maximum (numeric or date-time) input value.\nCan be a String (e.g. `\"2000-01-01\"`) or a Number (e.g. `2`).\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `max` property."
                            },
                            {
                                "name": "step",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Limits the numeric or date-time increments.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `step` property."
                            },
                            {
                                "name": "name",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The name of this element."
                            },
                            {
                                "name": "placeholder",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "A placeholder string in addition to the label. If this is set, the label\nwill always float."
                            },
                            {
                                "name": "readonly",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `readonly`\nproperty."
                            },
                            {
                                "name": "size",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `size` property."
                            },
                            {
                                "name": "autocapitalize",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "string",
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autocapitalize`\nproperty."
                            },
                            {
                                "name": "autocorrect",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autocorrect`\nproperty."
                            },
                            {
                                "name": "autosave",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autosave`\nproperty, used with type=search."
                            },
                            {
                                "name": "results",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `results` property,\nused with type=search."
                            },
                            {
                                "name": "accept",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `accept` property,\nused with type=file."
                            },
                            {
                                "name": "multiple",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the`<input is=\"iron-input\">`'s `multiple` property,\nused with type=file."
                            },
                            {
                                "name": "inputElement",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "HTMLElement",
                                    "required": true
                                },
                                "description": "Returns a reference to the input element."
                            },
                            {
                                "name": "_focusableElement",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "Returns a reference to the focusable element."
                            },
                            {
                                "name": "keyEventTarget",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "EventTarget",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "The EventTarget that will be firing relevant KeyboardEvents. Set it to\n`null` to disable the listeners."
                            },
                            {
                                "name": "stopKeyboardEventPropagation",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents."
                            },
                            {
                                "name": "_boundKeyHandlers",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "any[]",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_imperativeKeyBindings",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "own properties of everything on the \"prototype\"."
                            },
                            {
                                "name": "keyBindings",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "object",
                                    "required": true
                                },
                                "description": "To be used to express what combination of keys  will trigger the relative\ncallback. e.g. `keyBindings: { 'esc': '_onEscPressed'}`"
                            },
                            {
                                "name": "focused",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the element currently has focus."
                            },
                            {
                                "name": "disabled",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to disable this input. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nboth the `<paper-input-container>`'s and the input's `disabled` property."
                            },
                            {
                                "name": "_oldTabIndex",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Value of the `tabindex` attribute before `disabled` was activated.\n`null` means the attribute was not present."
                            },
                            {
                                "name": "_boundFocusBlurHandler",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "Function",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            }
                        ]
                    }
                },
                {
                    "name": "paper-icon-item",
                    "description": "`<paper-icon-item>` is a convenience element to make an item with icon. It is an\ninteractive list item with a fixed-width icon area, according to Material\nDesign. This is useful if the icons are of varying widths, but you want the item\nbodies to line up. Use this like a `<paper-item>`. The child node with the slot\nname `item-icon` is placed in the icon area.\n\n    <paper-icon-item>\n      <iron-icon icon=\"favorite\" slot=\"item-icon\"></iron-icon>\n      Favorite\n    </paper-icon-item>\n    <paper-icon-item>\n      <div class=\"avatar\" slot=\"item-icon\"></div>\n      Avatar\n    </paper-icon-item>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-item-icon-width` | Width of the icon area | `56px`\n`--paper-item-icon` | Mixin applied to the icon area | `{}`\n`--paper-icon-item` | Mixin applied to the item | `{}`\n`--paper-item-selected-weight` | The font weight of a selected item | `bold`\n`--paper-item-selected` | Mixin applied to selected paper-items | `{}`\n`--paper-item-disabled-color` | The color for disabled paper-items | `--disabled-text-color`\n`--paper-item-disabled` | Mixin applied to disabled paper-items | `{}`\n`--paper-item-focused` | Mixin applied to focused paper-items | `{}`\n`--paper-item-focused-before` | Mixin applied to :before focused paper-items | `{}`",
                    "source": {
                        "module": "@polymer/paper-item/paper-icon-item.d.ts",
                        "symbol": "PaperIconItemElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "hostAttributes",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "focused",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the element currently has focus."
                            },
                            {
                                "name": "disabled",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the user cannot interact with this element."
                            },
                            {
                                "name": "_oldTabIndex",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Value of the `tabindex` attribute before `disabled` was activated.\n`null` means the attribute was not present."
                            },
                            {
                                "name": "_boundFocusBlurHandler",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "Function",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "pressed",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the user is currently holding down the button."
                            },
                            {
                                "name": "toggles",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the button toggles the active state with each tap or press\nof the spacebar."
                            },
                            {
                                "name": "active",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the button is a toggle and is currently in the active state."
                            },
                            {
                                "name": "pointerDown",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True if the element is currently being pressed by a \"pointer,\" which\nis loosely defined as mouse or touch input (but specifically excluding\nkeyboard input)."
                            },
                            {
                                "name": "receivedFocusFromKeyboard",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True if the input device that caused the element to receive focus\nwas a keyboard."
                            },
                            {
                                "name": "ariaActiveAttribute",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The aria attribute to be set if the button is a toggle and in the\nactive state."
                            },
                            {
                                "name": "_mouseEventRe",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "RegExp",
                                        "null"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "keyEventTarget",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "EventTarget",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "The EventTarget that will be firing relevant KeyboardEvents. Set it to\n`null` to disable the listeners."
                            },
                            {
                                "name": "stopKeyboardEventPropagation",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents."
                            },
                            {
                                "name": "_boundKeyHandlers",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "any[]",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_imperativeKeyBindings",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "own properties of everything on the \"prototype\"."
                            },
                            {
                                "name": "keyBindings",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "object",
                                    "required": true
                                },
                                "description": "To be used to express what combination of keys  will trigger the relative\ncallback. e.g. `keyBindings: { 'esc': '_onEscPressed'}`"
                            }
                        ]
                    }
                },
                {
                    "name": "paper-item-body",
                    "description": "Use `<paper-item-body>` in a `<paper-item>` or `<paper-icon-item>` to make two-\nor three- line items. It is a flex item that is a vertical flexbox.\n\n    <paper-item>\n      <paper-item-body two-line>\n        <div>Show your status</div>\n        <div secondary>Your status is visible to everyone</div>\n      </paper-item-body>\n    </paper-item>\n\nThe child elements with the `secondary` attribute is given secondary text\nstyling.\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-item-body-two-line-min-height` | Minimum height of a two-line item | `72px`\n`--paper-item-body-three-line-min-height` | Minimum height of a three-line item | `88px`\n`--paper-item-body-secondary-color` | Foreground color for the `secondary` area | `--secondary-text-color`\n`--paper-item-body-secondary` | Mixin applied to the `secondary` area | `{}`",
                    "source": {
                        "module": "@polymer/paper-item/paper-item-body.d.ts",
                        "symbol": "PaperItemBodyElement"
                    }
                },
                {
                    "name": "paper-item",
                    "description": "Material design:\n[Lists](https://www.google.com/design/spec/components/lists.html)\n\n`<paper-item>` is an interactive list item. By default, it is a horizontal\nflexbox.\n\n    <paper-item>Item</paper-item>\n\nUse this element with `<paper-item-body>` to make Material Design styled\ntwo-line and three-line items.\n\n    <paper-item>\n      <paper-item-body two-line>\n        <div>Show your status</div>\n        <div secondary>Your status is visible to everyone</div>\n      </paper-item-body>\n      <iron-icon icon=\"warning\"></iron-icon>\n    </paper-item>\n\nTo use `paper-item` as a link, wrap it in an anchor tag. Since `paper-item` will\nalready receive focus, you may want to prevent the anchor tag from receiving\nfocus as well by setting its tabindex to -1.\n\n    <a href=\"https://www.polymer-project.org/\" tabindex=\"-1\">\n      <paper-item raised>Polymer Project</paper-item>\n    </a>\n\nIf you are concerned about performance and want to use `paper-item` in a\n`paper-listbox` with many items, you can just use a native `button` with the\n`paper-item` class applied (provided you have correctly included the shared\nstyles):\n\n    <style is=\"custom-style\" include=\"paper-item-shared-styles\"></style>\n\n    <paper-listbox>\n      <button class=\"paper-item\" role=\"option\">Inbox</button>\n      <button class=\"paper-item\" role=\"option\">Starred</button>\n      <button class=\"paper-item\" role=\"option\">Sent mail</button>\n    </paper-listbox>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-item-min-height` | Minimum height of the item | `48px`\n`--paper-item` | Mixin applied to the item | `{}`\n`--paper-item-selected-weight` | The font weight of a selected item | `bold`\n`--paper-item-selected` | Mixin applied to selected paper-items | `{}`\n`--paper-item-disabled-color` | The color for disabled paper-items | `--disabled-text-color`\n`--paper-item-disabled` | Mixin applied to disabled paper-items | `{}`\n`--paper-item-focused` | Mixin applied to focused paper-items | `{}`\n`--paper-item-focused-before` | Mixin applied to :before focused paper-items | `{}`\n\n### Accessibility\n\nThis element has `role=\"listitem\"` by default. Depending on usage, it may be\nmore appropriate to set `role=\"menuitem\"`, `role=\"menuitemcheckbox\"` or\n`role=\"menuitemradio\"`.\n\n    <paper-item role=\"menuitemcheckbox\">\n      <paper-item-body>\n        Show your status\n      </paper-item-body>\n      <paper-checkbox></paper-checkbox>\n    </paper-item>",
                    "source": {
                        "module": "@polymer/paper-item/paper-item.d.ts",
                        "symbol": "PaperItemElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "hostAttributes",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "focused",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the element currently has focus."
                            },
                            {
                                "name": "disabled",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the user cannot interact with this element."
                            },
                            {
                                "name": "_oldTabIndex",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Value of the `tabindex` attribute before `disabled` was activated.\n`null` means the attribute was not present."
                            },
                            {
                                "name": "_boundFocusBlurHandler",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "Function",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "pressed",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the user is currently holding down the button."
                            },
                            {
                                "name": "toggles",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the button toggles the active state with each tap or press\nof the spacebar."
                            },
                            {
                                "name": "active",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the button is a toggle and is currently in the active state."
                            },
                            {
                                "name": "pointerDown",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True if the element is currently being pressed by a \"pointer,\" which\nis loosely defined as mouse or touch input (but specifically excluding\nkeyboard input)."
                            },
                            {
                                "name": "receivedFocusFromKeyboard",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True if the input device that caused the element to receive focus\nwas a keyboard."
                            },
                            {
                                "name": "ariaActiveAttribute",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The aria attribute to be set if the button is a toggle and in the\nactive state."
                            },
                            {
                                "name": "_mouseEventRe",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "RegExp",
                                        "null"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "keyEventTarget",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "EventTarget",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "The EventTarget that will be firing relevant KeyboardEvents. Set it to\n`null` to disable the listeners."
                            },
                            {
                                "name": "stopKeyboardEventPropagation",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents."
                            },
                            {
                                "name": "_boundKeyHandlers",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "any[]",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_imperativeKeyBindings",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "own properties of everything on the \"prototype\"."
                            },
                            {
                                "name": "keyBindings",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "object",
                                    "required": true
                                },
                                "description": "To be used to express what combination of keys  will trigger the relative\ncallback. e.g. `keyBindings: { 'esc': '_onEscPressed'}`"
                            }
                        ]
                    }
                },
                {
                    "name": "paper-listbox",
                    "description": "Material design:\n[Menus](https://www.google.com/design/spec/components/menus.html)\n\n`<paper-listbox>` implements an accessible listbox control with Material Design\nstyling. The focused item is highlighted, and the selected item has bolded text.\n\n    <paper-listbox>\n      <paper-item>Item 1</paper-item>\n      <paper-item>Item 2</paper-item>\n    </paper-listbox>\n\nAn initial selection can be specified with the `selected` attribute.\n\n    <paper-listbox selected=\"0\">\n      <paper-item>Item 1</paper-item>\n      <paper-item>Item 2</paper-item>\n    </paper-listbox>\n\nMake a multi-select listbox with the `multi` attribute. Items in a multi-select\nlistbox can be deselected, and multiple item can be selected.\n\n    <paper-listbox multi>\n      <paper-item>Item 1</paper-item>\n      <paper-item>Item 2</paper-item>\n    </paper-listbox>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-listbox-background-color`   | Menu background color |\n`--primary-background-color`\n`--paper-listbox-color`              | Menu foreground color |\n`--primary-text-color`\n`--paper-listbox`                    | Mixin applied to the listbox | `{}`\n\n### Accessibility\n\n`<paper-listbox>` has `role=\"listbox\"` by default. A multi-select listbox will\nalso have `aria-multiselectable` set. It implements key bindings to navigate\nthrough the listbox with the up and down arrow keys, esc to exit the listbox,\nand enter to activate a listbox item. Typing the first letter of a listbox item\nwill also focus it.",
                    "source": {
                        "module": "@polymer/paper-listbox/paper-listbox.d.ts",
                        "symbol": "PaperListboxElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "focusedItem",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "Returns the currently focused item."
                            },
                            {
                                "name": "attrForItemTitle",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The attribute to use on menu items to look up the item title. Typing the\nfirst letter of an item when the menu is open focuses that item. If\nunset, `textContent` will be used."
                            },
                            {
                                "name": "disabled",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "boolean",
                                    "required": true
                                }
                            },
                            {
                                "name": "hostAttributes",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "keyEventTarget",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "EventTarget",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "The EventTarget that will be firing relevant KeyboardEvents. Set it to\n`null` to disable the listeners."
                            },
                            {
                                "name": "stopKeyboardEventPropagation",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents."
                            },
                            {
                                "name": "_boundKeyHandlers",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "any[]",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_imperativeKeyBindings",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "own properties of everything on the \"prototype\"."
                            },
                            {
                                "name": "keyBindings",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "object",
                                    "required": true
                                },
                                "description": "To be used to express what combination of keys  will trigger the relative\ncallback. e.g. `keyBindings: { 'esc': '_onEscPressed'}`"
                            },
                            {
                                "name": "multi",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, multiple selections are allowed."
                            },
                            {
                                "name": "selectedValues",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "any[]",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Gets or sets the selected elements. This is used instead of `selected`\nwhen `multi` is true."
                            },
                            {
                                "name": "selectedItems",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "any[]",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Returns an array of currently selected items."
                            },
                            {
                                "name": "attrForSelected",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you want to use an attribute value or property of an element for\n`selected` instead of the index, set this to the name of the attribute\nor property. Hyphenated values are converted to camel case when used to\nlook up the property of a selectable element. Camel cased values are\n*not* converted to hyphenated values for attribute lookup. It's\nrecommended that you provide the hyphenated form of the name so that\nselection works in both cases. (Use `attr-or-property-name` instead of\n`attrOrPropertyName`.)"
                            },
                            {
                                "name": "selected",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "number"
                                    ],
                                    "required": true
                                },
                                "description": "Gets or sets the selected element. The default is to use the index of the\nitem."
                            },
                            {
                                "name": "selectedItem",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "Returns the currently selected item."
                            },
                            {
                                "name": "activateEvent",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The event that fires from items when they are selected. Selectable\nwill listen for this event from items and update the selection state.\nSet to empty string to listen to no events."
                            },
                            {
                                "name": "selectable",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "This is a CSS selector string.  If this is set, only items that match the\nCSS selector are selectable."
                            },
                            {
                                "name": "selectedClass",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The class to set on elements when selected."
                            },
                            {
                                "name": "selectedAttribute",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The attribute to set on elements when selected."
                            },
                            {
                                "name": "fallbackSelection",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Default fallback if the selection based on selected with\n`attrForSelected` is not found."
                            },
                            {
                                "name": "items",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "any[]",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The list of items from which a selection can be made."
                            },
                            {
                                "name": "_excludedLocalNames",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The set of excluded elements where the key is the `localName`\nof the element that will be ignored from the item list."
                            },
                            {
                                "name": "_shouldUpdateSelection",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "UNUSED, FOR API COMPATIBILITY"
                            }
                        ]
                    }
                },
                {
                    "name": "paper-menu-grow-height-animation",
                    "source": {
                        "module": "@polymer/paper-menu-button/paper-menu-button-animations.d.ts",
                        "symbol": "PaperMenuGrowHeightAnimationElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "animationTiming",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Defines the animation timing."
                            },
                            {
                                "name": "isNeonAnimation",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "boolean",
                                    "required": true
                                },
                                "description": "Can be used to determine that elements implement this behavior."
                            }
                        ]
                    }
                },
                {
                    "name": "paper-menu-grow-width-animation",
                    "source": {
                        "module": "@polymer/paper-menu-button/paper-menu-button-animations.d.ts",
                        "symbol": "PaperMenuGrowWidthAnimationElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "animationTiming",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Defines the animation timing."
                            },
                            {
                                "name": "isNeonAnimation",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "boolean",
                                    "required": true
                                },
                                "description": "Can be used to determine that elements implement this behavior."
                            }
                        ]
                    }
                },
                {
                    "name": "paper-menu-shrink-width-animation",
                    "source": {
                        "module": "@polymer/paper-menu-button/paper-menu-button-animations.d.ts",
                        "symbol": "PaperMenuShrinkWidthAnimationElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "animationTiming",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Defines the animation timing."
                            },
                            {
                                "name": "isNeonAnimation",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "boolean",
                                    "required": true
                                },
                                "description": "Can be used to determine that elements implement this behavior."
                            }
                        ]
                    }
                },
                {
                    "name": "paper-menu-shrink-height-animation",
                    "source": {
                        "module": "@polymer/paper-menu-button/paper-menu-button-animations.d.ts",
                        "symbol": "PaperMenuShrinkHeightAnimationElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "animationTiming",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Defines the animation timing."
                            },
                            {
                                "name": "isNeonAnimation",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "boolean",
                                    "required": true
                                },
                                "description": "Can be used to determine that elements implement this behavior."
                            }
                        ]
                    }
                },
                {
                    "name": "paper-menu-button",
                    "source": {
                        "module": "@polymer/paper-menu-button/paper-menu-button.d.ts",
                        "symbol": "PaperMenuButton"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "opened",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True if the content is currently displayed."
                            },
                            {
                                "name": "horizontalAlign",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The orientation against which to align the menu dropdown\nhorizontally relative to the dropdown trigger."
                            },
                            {
                                "name": "verticalAlign",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The orientation against which to align the menu dropdown\nvertically relative to the dropdown trigger."
                            },
                            {
                                "name": "dynamicAlign",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the `horizontalAlign` and `verticalAlign` properties will\nbe considered preferences instead of strict requirements when\npositioning the dropdown and may be changed if doing so reduces\nthe area of the dropdown falling outside of `fitInto`."
                            },
                            {
                                "name": "horizontalOffset",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "A pixel value that will be added to the position calculated for the\ngiven `horizontalAlign`. Use a negative value to offset to the\nleft, or a positive value to offset to the right."
                            },
                            {
                                "name": "verticalOffset",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "A pixel value that will be added to the position calculated for the\ngiven `verticalAlign`. Use a negative value to offset towards the\ntop, or a positive value to offset towards the bottom."
                            },
                            {
                                "name": "noOverlap",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the dropdown will be positioned so that it doesn't overlap\nthe button."
                            },
                            {
                                "name": "noAnimations",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to disable animations when opening and closing the\ndropdown."
                            },
                            {
                                "name": "ignoreSelect",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to disable automatically closing the dropdown after\na selection has been made."
                            },
                            {
                                "name": "closeOnActivate",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to enable automatically closing the dropdown after an\nitem has been activated, even if the selection did not change."
                            },
                            {
                                "name": "openAnimationConfig",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "An animation config. If provided, this will be used to animate the\nopening of the dropdown."
                            },
                            {
                                "name": "closeAnimationConfig",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "An animation config. If provided, this will be used to animate the\nclosing of the dropdown."
                            },
                            {
                                "name": "allowOutsideScroll",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "By default, the dropdown will constrain scrolling on the page\nto itself when opened.\nSet to true in order to prevent scroll from being constrained\nto the dropdown when it opens."
                            },
                            {
                                "name": "restoreFocusOnClose",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Whether focus should be restored to the button when the menu closes."
                            },
                            {
                                "name": "expandSizingTargetForScrollbars",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true and scrollbars are added to the dropdown after it is positioned,\nthe size of the added scrollbars will be added to its `maxWidth` and\n`maxHeight`."
                            },
                            {
                                "name": "_dropdownContent",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "This is the element intended to be bound as the focus target\nfor the `iron-dropdown` contained by `paper-menu-button`."
                            },
                            {
                                "name": "hostAttributes",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "contentElement",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "The content element that is contained by the menu button, if any."
                            },
                            {
                                "name": "focused",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the element currently has focus."
                            },
                            {
                                "name": "disabled",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the user cannot interact with this element."
                            },
                            {
                                "name": "_oldTabIndex",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Value of the `tabindex` attribute before `disabled` was activated.\n`null` means the attribute was not present."
                            },
                            {
                                "name": "_boundFocusBlurHandler",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "Function",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "keyEventTarget",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "EventTarget",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "The EventTarget that will be firing relevant KeyboardEvents. Set it to\n`null` to disable the listeners."
                            },
                            {
                                "name": "stopKeyboardEventPropagation",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents."
                            },
                            {
                                "name": "_boundKeyHandlers",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "any[]",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_imperativeKeyBindings",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "own properties of everything on the \"prototype\"."
                            },
                            {
                                "name": "keyBindings",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "object",
                                    "required": true
                                },
                                "description": "To be used to express what combination of keys  will trigger the relative\ncallback. e.g. `keyBindings: { 'esc': '_onEscPressed'}`"
                            }
                        ]
                    }
                },
                {
                    "name": "paper-progress",
                    "description": "Material design: [Progress &\nactivity](https://www.google.com/design/spec/components/progress-activity.html)\n\nThe progress bars are for situations where the percentage completed can be\ndetermined. They give users a quick sense of how much longer an operation\nwill take.\n\nExample:\n\n    <paper-progress value=\"10\"></paper-progress>\n\nThere is also a secondary progress which is useful for displaying intermediate\nprogress, such as the buffer level during a streaming playback progress bar.\n\nExample:\n\n    <paper-progress value=\"10\" secondary-progress=\"30\"></paper-progress>\n\n### Styling progress bar:\n\nTo change the active progress bar color:\n\n    paper-progress {\n       --paper-progress-active-color: #e91e63;\n    }\n\nTo change the secondary progress bar color:\n\n    paper-progress {\n      --paper-progress-secondary-color: #f8bbd0;\n    }\n\nTo change the progress bar background color:\n\n    paper-progress {\n      --paper-progress-container-color: #64ffda;\n    }\n\nAdd the class `transiting` to a paper-progress to animate the progress bar when\nthe value changed. You can also customize the transition:\n\n    paper-progress {\n      --paper-progress-transition-duration: 0.08s;\n      --paper-progress-transition-timing-function: ease;\n      --paper-progress-transition-delay: 0s;\n    }\n\nTo change the duration of the indeterminate cycle:\n\n    paper-progress {\n      --paper-progress-indeterminate-cycle-duration: 2s;\n    }\n\nThe following mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|---------\n`--paper-progress-container` | Mixin applied to container | `{}`\n`--paper-progress-transition-duration` | Duration of the transition | `0.08s`\n`--paper-progress-transition-timing-function` | The timing function for the transition | `ease`\n`--paper-progress-transition-delay` | delay for the transition | `0s`\n`--paper-progress-container-color` | Color of the container | `--google-grey-300`\n`--paper-progress-active-color` | The color of the active bar | `--google-green-500`\n`--paper-progress-secondary-color` | The color of the secondary bar | `--google-green-100`\n`--paper-progress-disabled-active-color` | The color of the active bar if disabled | `--google-grey-500`\n`--paper-progress-disabled-secondary-color` | The color of the secondary bar if disabled  | `--google-grey-300`\n`--paper-progress-height` | The height of the progress bar | `4px`\n`--paper-progress-indeterminate-cycle-duration` | Duration of an indeterminate cycle | `2s`",
                    "source": {
                        "module": "@polymer/paper-progress/paper-progress.d.ts",
                        "symbol": "PaperProgressElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "secondaryProgress",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The number that represents the current secondary progress."
                            },
                            {
                                "name": "secondaryRatio",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The secondary ratio"
                            },
                            {
                                "name": "indeterminate",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Use an indeterminate progress indicator."
                            },
                            {
                                "name": "disabled",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True if the progress is disabled."
                            },
                            {
                                "name": "hostAttributes",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "value",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The number that represents the current value."
                            },
                            {
                                "name": "min",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The number that indicates the minimum value of the range."
                            },
                            {
                                "name": "max",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The number that indicates the maximum value of the range."
                            },
                            {
                                "name": "step",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Specifies the value granularity of the range's value."
                            },
                            {
                                "name": "ratio",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Returns the ratio of the value."
                            }
                        ]
                    }
                },
                {
                    "name": "paper-radio-button",
                    "description": "Material design: [Radio button](https://www.google.com/design/spec/components/selection-controls.html#selection-controls-radio-button)\n\n`paper-radio-button` is a button that can be either checked or unchecked. The\nuser can tap the radio button to check or uncheck it.\n\nUse a `<paper-radio-group>` to group a set of radio buttons. When radio buttons\nare inside a radio group, exactly one radio button in the group can be checked\nat any time.\n\nExample:\n\n    <paper-radio-button></paper-radio-button>\n    <paper-radio-button>Item label</paper-radio-button>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-radio-button-unchecked-background-color` | Radio button background color when the input is not checked | `transparent`\n`--paper-radio-button-unchecked-color` | Radio button color when the input is not checked | `--primary-text-color`\n`--paper-radio-button-unchecked-ink-color` | Selected/focus ripple color when the input is not checked | `--primary-text-color`\n`--paper-radio-button-checked-color` | Radio button color when the input is checked | `--primary-color`\n`--paper-radio-button-checked-ink-color` | Selected/focus ripple color when the input is checked | `--primary-color`\n`--paper-radio-button-size` | Size of the radio button | `16px`\n`--paper-radio-button-ink-size` | Size of the ripple | `48px`\n`--paper-radio-button-label-color` | Label color | `--primary-text-color`\n`--paper-radio-button-label-spacing` | Spacing between the label and the button | `10px`\n`--paper-radio-button-radio-container` | A mixin applied to the internal radio container | `{}`\n`--paper-radio-button-label` | A mixin applied to the internal label | `{}`\n`--paper-radio-button-label-checked` | A mixin applied to the internal label when the radio button is checked | `{}`\n\nThis element applies the mixin `--paper-font-common-base` but does not import\n`paper-styles/typography.html`. In order to apply the `Roboto` font to this\nelement, make sure you've imported `paper-styles/typography.html`.",
                    "source": {
                        "module": "@polymer/paper-radio-button/paper-radio-button.d.ts",
                        "symbol": "PaperRadioButtonElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "hostAttributes",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "checked",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Gets or sets the state, `true` is checked and `false` is unchecked."
                            },
                            {
                                "name": "validator",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Name of the validator to use."
                            },
                            {
                                "name": "invalid",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True if the last call to `validate` is invalid."
                            },
                            {
                                "name": "_validator",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "Recompute this every time it's needed, because we don't know if the\nunderlying IronValidatableBehaviorMeta has changed."
                            },
                            {
                                "name": "name",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The name of this element."
                            },
                            {
                                "name": "value",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Overriden from IronFormElementBehavior"
                            },
                            {
                                "name": "required",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to mark the input as required. If used in a form, a\ncustom element that uses this behavior should also use\nIronValidatableBehavior and define a custom validation method.\nOtherwise, a `required` element will always be considered valid.\nIt's also strongly recommended to provide a visual style for the element\nwhen its value is invalid."
                            },
                            {
                                "name": "noink",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the element will not produce a ripple effect when interacted\nwith via the pointer."
                            },
                            {
                                "name": "_rippleContainer",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "Element",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "focused",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the element currently has focus."
                            },
                            {
                                "name": "disabled",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the user cannot interact with this element."
                            },
                            {
                                "name": "_oldTabIndex",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Value of the `tabindex` attribute before `disabled` was activated.\n`null` means the attribute was not present."
                            },
                            {
                                "name": "_boundFocusBlurHandler",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "Function",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "pressed",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the user is currently holding down the button."
                            },
                            {
                                "name": "toggles",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the button toggles the active state with each tap or press\nof the spacebar."
                            },
                            {
                                "name": "active",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the button is a toggle and is currently in the active state."
                            },
                            {
                                "name": "pointerDown",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True if the element is currently being pressed by a \"pointer,\" which\nis loosely defined as mouse or touch input (but specifically excluding\nkeyboard input)."
                            },
                            {
                                "name": "receivedFocusFromKeyboard",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True if the input device that caused the element to receive focus\nwas a keyboard."
                            },
                            {
                                "name": "ariaActiveAttribute",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The aria attribute to be set if the button is a toggle and in the\nactive state."
                            },
                            {
                                "name": "_mouseEventRe",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "RegExp",
                                        "null"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "keyEventTarget",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "EventTarget",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "The EventTarget that will be firing relevant KeyboardEvents. Set it to\n`null` to disable the listeners."
                            },
                            {
                                "name": "stopKeyboardEventPropagation",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents."
                            },
                            {
                                "name": "_boundKeyHandlers",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "any[]",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_imperativeKeyBindings",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "own properties of everything on the \"prototype\"."
                            },
                            {
                                "name": "keyBindings",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "object",
                                    "required": true
                                },
                                "description": "To be used to express what combination of keys  will trigger the relative\ncallback. e.g. `keyBindings: { 'esc': '_onEscPressed'}`"
                            }
                        ]
                    }
                },
                {
                    "name": "paper-radio-group",
                    "description": "Material design: [Radio\nbutton](https://www.google.com/design/spec/components/selection-controls.html#selection-controls-radio-button)\n\n`paper-radio-group` allows user to select at most one radio button from a set.\nChecking one radio button that belongs to a radio group unchecks any\npreviously checked radio button within the same group. Use\n`selected` to get or set the selected radio button.\n\nThe <paper-radio-buttons> inside the group must have the `name` attribute\nset.\n\nExample:\n\n    <paper-radio-group selected=\"small\">\n      <paper-radio-button name=\"small\">Small</paper-radio-button>\n      <paper-radio-button name=\"medium\">Medium</paper-radio-button>\n      <paper-radio-button name=\"large\">Large</paper-radio-button>\n    </paper-radio-group>\n\nRadio-button-groups can be made optional, and allow zero buttons to be selected:\n\n    <paper-radio-group selected=\"small\" allow-empty-selection>\n      <paper-radio-button name=\"small\">Small</paper-radio-button>\n      <paper-radio-button name=\"medium\">Medium</paper-radio-button>\n      <paper-radio-button name=\"large\">Large</paper-radio-button>\n    </paper-radio-group>\n\nSee <a href=\"paper-radio-button\">paper-radio-button</a> for more\ninformation about `paper-radio-button`.\n\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-radio-group-item-padding` | The padding of the item | `12px`",
                    "source": {
                        "module": "@polymer/paper-radio-group/paper-radio-group.d.ts",
                        "symbol": "PaperRadioGroupElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "allowEmptySelection",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, radio-buttons can be deselected"
                            },
                            {
                                "name": "_isRTL",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                }
                            },
                            {
                                "name": "focusedItem",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "Returns the currently focused item."
                            },
                            {
                                "name": "attrForItemTitle",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The attribute to use on menu items to look up the item title. Typing the\nfirst letter of an item when the menu is open focuses that item. If\nunset, `textContent` will be used."
                            },
                            {
                                "name": "disabled",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "boolean",
                                    "required": true
                                }
                            },
                            {
                                "name": "hostAttributes",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "keyEventTarget",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "EventTarget",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "The EventTarget that will be firing relevant KeyboardEvents. Set it to\n`null` to disable the listeners."
                            },
                            {
                                "name": "stopKeyboardEventPropagation",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents."
                            },
                            {
                                "name": "_boundKeyHandlers",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "any[]",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_imperativeKeyBindings",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "own properties of everything on the \"prototype\"."
                            },
                            {
                                "name": "keyBindings",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "object",
                                    "required": true
                                },
                                "description": "To be used to express what combination of keys  will trigger the relative\ncallback. e.g. `keyBindings: { 'esc': '_onEscPressed'}`"
                            },
                            {
                                "name": "multi",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, multiple selections are allowed."
                            },
                            {
                                "name": "selectedValues",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "any[]",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Gets or sets the selected elements. This is used instead of `selected`\nwhen `multi` is true."
                            },
                            {
                                "name": "selectedItems",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "any[]",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Returns an array of currently selected items."
                            },
                            {
                                "name": "attrForSelected",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Overriden from Polymer.IronSelectableBehavior"
                            },
                            {
                                "name": "selected",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "number"
                                    ],
                                    "required": true
                                },
                                "description": "Gets or sets the selected element. The default is to use the index of the\nitem."
                            },
                            {
                                "name": "selectedItem",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "Returns the currently selected item."
                            },
                            {
                                "name": "activateEvent",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The event that fires from items when they are selected. Selectable\nwill listen for this event from items and update the selection state.\nSet to empty string to listen to no events."
                            },
                            {
                                "name": "selectable",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Overriden from Polymer.IronSelectableBehavior"
                            },
                            {
                                "name": "selectedClass",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The class to set on elements when selected."
                            },
                            {
                                "name": "selectedAttribute",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Overriden from Polymer.IronSelectableBehavior"
                            },
                            {
                                "name": "fallbackSelection",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Default fallback if the selection based on selected with\n`attrForSelected` is not found."
                            },
                            {
                                "name": "items",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "any[]",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The list of items from which a selection can be made."
                            },
                            {
                                "name": "_excludedLocalNames",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The set of excluded elements where the key is the `localName`\nof the element that will be ignored from the item list."
                            },
                            {
                                "name": "_shouldUpdateSelection",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "UNUSED, FOR API COMPATIBILITY"
                            }
                        ]
                    }
                },
                {
                    "name": "paper-ripple",
                    "description": "Material design: [Surface\nreaction](https://www.google.com/design/spec/animation/responsive-interaction.html#responsive-interaction-surface-reaction)\n\n`paper-ripple` provides a visual effect that other paper elements can\nuse to simulate a rippling effect emanating from the point of contact.  The\neffect can be visualized as a concentric circle with motion.\n\nExample:\n\n    <div style=\"position:relative\">\n      <paper-ripple></paper-ripple>\n    </div>\n\nNote, it's important that the parent container of the ripple be relative\nposition, otherwise the ripple will emanate outside of the desired container.\n\n`paper-ripple` listens to \"mousedown\" and \"mouseup\" events so it would display\nripple effect when touches on it.  You can also defeat the default behavior and\nmanually route the down and up actions to the ripple element.  Note that it is\nimportant if you call `downAction()` you will have to make sure to call\n`upAction()` so that `paper-ripple` would end the animation loop.\n\nExample:\n\n    <paper-ripple id=\"ripple\" style=\"pointer-events: none;\"></paper-ripple>\n    ...\n    downAction: function(e) {\n      this.$.ripple.downAction(e.detail);\n    },\n    upAction: function(e) {\n      this.$.ripple.upAction();\n    }\n\nStyling ripple effect:\n\n  Use CSS color property to style the ripple:\n\n    paper-ripple {\n      color: #4285f4;\n    }\n\n  Note that CSS color property is inherited so it is not required to set it on\n  the `paper-ripple` element directly.\n\nBy default, the ripple is centered on the point of contact.  Apply the\n`recenters` attribute to have the ripple grow toward the center of its\ncontainer.\n\n    <paper-ripple recenters></paper-ripple>\n\nYou can also  center the ripple inside its container from the start.\n\n    <paper-ripple center></paper-ripple>\n\nApply `circle` class to make the rippling effect within a circle.\n\n    <paper-ripple class=\"circle\"></paper-ripple>",
                    "source": {
                        "module": "@polymer/paper-ripple/paper-ripple.d.ts",
                        "symbol": "PaperRippleElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "initialOpacity",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The initial opacity set on the wave."
                            },
                            {
                                "name": "opacityDecayVelocity",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "How fast (opacity per second) the wave fades out."
                            },
                            {
                                "name": "recenters",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, ripples will exhibit a gravitational pull towards\nthe center of their container as they fade away."
                            },
                            {
                                "name": "center",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, ripples will center inside its container"
                            },
                            {
                                "name": "ripples",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "any[]",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "A list of the visual ripples."
                            },
                            {
                                "name": "animating",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True when there are visible ripples animating within the\nelement."
                            },
                            {
                                "name": "holdDown",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the ripple will remain in the \"down\" state until `holdDown`\nis set to false again."
                            },
                            {
                                "name": "noink",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the ripple will not generate a ripple effect\nvia pointer interaction.\nCalling ripple's imperative api like `simulatedRipple` will\nstill generate the ripple effect."
                            },
                            {
                                "name": "_animating",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_boundAnimate",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "Function",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "target",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [],
                                    "required": true
                                }
                            },
                            {
                                "name": "shouldKeepAnimating",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [],
                                    "required": true
                                }
                            },
                            {
                                "name": "keyEventTarget",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "EventTarget",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "The EventTarget that will be firing relevant KeyboardEvents. Set it to\n`null` to disable the listeners."
                            },
                            {
                                "name": "stopKeyboardEventPropagation",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents."
                            },
                            {
                                "name": "_boundKeyHandlers",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "any[]",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_imperativeKeyBindings",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "own properties of everything on the \"prototype\"."
                            },
                            {
                                "name": "keyBindings",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "object",
                                    "required": true
                                },
                                "description": "To be used to express what combination of keys  will trigger the relative\ncallback. e.g. `keyBindings: { 'esc': '_onEscPressed'}`"
                            }
                        ]
                    }
                },
                {
                    "name": "paper-slider",
                    "description": "Material design:\n[Sliders](https://www.google.com/design/spec/components/sliders.html)\n\n`paper-slider` allows user to select a value from a range of values by\nmoving the slider thumb.  The interactive nature of the slider makes it a\ngreat choice for settings that reflect intensity levels, such as volume,\nbrightness, or color saturation.\n\nExample:\n\n    <paper-slider></paper-slider>\n\nUse `min` and `max` to specify the slider range.  Default is 0 to 100.\n\nExample:\n\n    <paper-slider min=\"10\" max=\"200\" value=\"110\"></paper-slider>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-slider-container-color` | The background color of the bar | `--paper-grey-400`\n`--paper-slider-bar-color` | The background color of the slider | `transparent`\n`--paper-slider-active-color` | The progress bar color | `--google-blue-700`\n`--paper-slider-secondary-color` | The secondary progress bar color | `--google-blue-300`\n`--paper-slider-knob-color` | The knob color | `--google-blue-700`\n`--paper-slider-disabled-knob-color` | The disabled knob color | `--paper-grey-400`\n`--paper-slider-pin-color` | The pin color | `--google-blue-700`\n`--paper-slider-font-color` | The pin's text color | `#fff`\n`--paper-slider-markers-color` | The snaps markers color | `#000`\n`--paper-slider-disabled-active-color` | The disabled progress bar color | `--paper-grey-400`\n`--paper-slider-disabled-secondary-color` | The disabled secondary progress bar color | `--paper-grey-400`\n`--paper-slider-knob-start-color` | The fill color of the knob at the far left | `transparent`\n`--paper-slider-knob-start-border-color` | The border color of the knob at the far left | `--paper-grey-400`\n`--paper-slider-pin-start-color` | The color of the pin at the far left | `--paper-grey-400`\n`--paper-slider-height` | Height of the progress bar | `2px`\n`--paper-slider-input` | Mixin applied to the input in editable mode | `{}`\n`--paper-slider-input-container-input` | Mixin applied to the paper-input-container-input in editable mode | `{}`",
                    "source": {
                        "module": "@polymer/paper-slider/paper-slider.d.ts",
                        "symbol": "PaperSliderElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "snaps",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the slider thumb snaps to tick marks evenly spaced based\non the `step` property value."
                            },
                            {
                                "name": "pin",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, a pin with numeric value label is shown when the slider thumb\nis pressed. Use for settings for which users need to know the exact\nvalue of the setting."
                            },
                            {
                                "name": "secondaryProgress",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The number that represents the current secondary progress."
                            },
                            {
                                "name": "editable",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, an input is shown and user can use it to set the slider value."
                            },
                            {
                                "name": "immediateValue",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The immediate value of the slider.  This value is updated while the user\nis dragging the slider."
                            },
                            {
                                "name": "maxMarkers",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The maximum number of markers"
                            },
                            {
                                "name": "expand",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the knob is expanded"
                            },
                            {
                                "name": "ignoreBarTouch",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, a touchmove on the slider bar doesn't drag the slider thunb.\nTapping on the slider bar still updates the slider's position"
                            },
                            {
                                "name": "dragging",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True when the user is dragging the slider."
                            },
                            {
                                "name": "transiting",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "markers",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "any[]",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "hostAttributes",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_isRTL",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                }
                            },
                            {
                                "name": "min",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The number that indicates the minimum value of the range."
                            },
                            {
                                "name": "max",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The number that indicates the maximum value of the range."
                            },
                            {
                                "name": "step",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Specifies the value granularity of the range's value."
                            },
                            {
                                "name": "ratio",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Returns the ratio of the value."
                            },
                            {
                                "name": "noink",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the element will not produce a ripple effect when interacted\nwith via the pointer."
                            },
                            {
                                "name": "_rippleContainer",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "Element",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "focused",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the element currently has focus."
                            },
                            {
                                "name": "disabled",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the user cannot interact with this element."
                            },
                            {
                                "name": "_oldTabIndex",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Value of the `tabindex` attribute before `disabled` was activated.\n`null` means the attribute was not present."
                            },
                            {
                                "name": "_boundFocusBlurHandler",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "Function",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "pressed",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the user is currently holding down the button."
                            },
                            {
                                "name": "toggles",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the button toggles the active state with each tap or press\nof the spacebar."
                            },
                            {
                                "name": "active",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the button is a toggle and is currently in the active state."
                            },
                            {
                                "name": "pointerDown",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True if the element is currently being pressed by a \"pointer,\" which\nis loosely defined as mouse or touch input (but specifically excluding\nkeyboard input)."
                            },
                            {
                                "name": "receivedFocusFromKeyboard",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True if the input device that caused the element to receive focus\nwas a keyboard."
                            },
                            {
                                "name": "ariaActiveAttribute",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The aria attribute to be set if the button is a toggle and in the\nactive state."
                            },
                            {
                                "name": "_mouseEventRe",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "RegExp",
                                        "null"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "name",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The name of this element."
                            },
                            {
                                "name": "value",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The number that represents the current value."
                            },
                            {
                                "name": "required",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to mark the input as required. If used in a form, a\ncustom element that uses this behavior should also use\nIronValidatableBehavior and define a custom validation method.\nOtherwise, a `required` element will always be considered valid.\nIt's also strongly recommended to provide a visual style for the element\nwhen its value is invalid."
                            },
                            {
                                "name": "keyEventTarget",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "EventTarget",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "The EventTarget that will be firing relevant KeyboardEvents. Set it to\n`null` to disable the listeners."
                            },
                            {
                                "name": "stopKeyboardEventPropagation",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents."
                            },
                            {
                                "name": "_boundKeyHandlers",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "any[]",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_imperativeKeyBindings",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "own properties of everything on the \"prototype\"."
                            },
                            {
                                "name": "keyBindings",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "object",
                                    "required": true
                                },
                                "description": "To be used to express what combination of keys  will trigger the relative\ncallback. e.g. `keyBindings: { 'esc': '_onEscPressed'}`"
                            }
                        ]
                    }
                },
                {
                    "name": "paper-spinner-lite",
                    "description": "Material design: [Progress &\nactivity](https://www.google.com/design/spec/components/progress-activity.html)\n\nElement providing a single color material design circular spinner.\n\n    <paper-spinner-lite active></paper-spinner-lite>\n\nThe default spinner is blue. It can be customized to be a different color.\n\n### Accessibility\n\nAlt attribute should be set to provide adequate context for accessibility. If\nnot provided, it defaults to 'loading'. Empty alt can be provided to mark the\nelement as decorative if alternative content is provided in another form (e.g. a\ntext block following the spinner).\n\n    <paper-spinner-lite alt=\"Loading contacts list\" active></paper-spinner-lite>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-spinner-color` | Color of the spinner | `--google-blue-500`\n`--paper-spinner-stroke-width` | The width of the spinner stroke | 3px",
                    "source": {
                        "module": "@polymer/paper-spinner/paper-spinner-lite.d.ts",
                        "symbol": "PaperSpinnerLiteElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "active",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Displays the spinner."
                            },
                            {
                                "name": "alt",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Alternative text content for accessibility support.\nIf alt is present, it will add an aria-label whose content matches alt\nwhen active. If alt is not present, it will default to 'loading' as the\nalt value."
                            }
                        ]
                    }
                },
                {
                    "name": "paper-spinner",
                    "description": "Material design: [Progress &\nactivity](https://www.google.com/design/spec/components/progress-activity.html)\n\nElement providing a multiple color material design circular spinner.\n\n    <paper-spinner active></paper-spinner>\n\nThe default spinner cycles between four layers of colors; by default they are\nblue, red, yellow and green. It can be customized to cycle between four\ndifferent colors. Use <paper-spinner-lite> for single color spinners.\n\n### Accessibility\n\nAlt attribute should be set to provide adequate context for accessibility. If\nnot provided, it defaults to 'loading'. Empty alt can be provided to mark the\nelement as decorative if alternative content is provided in another form (e.g. a\ntext block following the spinner).\n\n    <paper-spinner alt=\"Loading contacts list\" active></paper-spinner>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-spinner-layer-1-color` | Color of the first spinner rotation | `--google-blue-500`\n`--paper-spinner-layer-2-color` | Color of the second spinner rotation | `--google-red-500`\n`--paper-spinner-layer-3-color` | Color of the third spinner rotation | `--google-yellow-500`\n`--paper-spinner-layer-4-color` | Color of the fourth spinner rotation | `--google-green-500`\n`--paper-spinner-stroke-width` | The width of the spinner stroke | 3px",
                    "source": {
                        "module": "@polymer/paper-spinner/paper-spinner.d.ts",
                        "symbol": "PaperSpinnerElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "active",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Displays the spinner."
                            },
                            {
                                "name": "alt",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Alternative text content for accessibility support.\nIf alt is present, it will add an aria-label whose content matches alt\nwhen active. If alt is not present, it will default to 'loading' as the\nalt value."
                            }
                        ]
                    }
                },
                {
                    "name": "paper-swatch-picker",
                    "description": "This is a simple color picker element that will allow you to choose one\nof the Material Design colors from a list of available swatches.\n\nExample:\n\n    <paper-swatch-picker></paper-swatch-picker>\n\n    <paper-swatch-picker color=\"{{selectedColor}}\"></paper-swatch-picker>\n\nYou can configure the color palette being used using the `colorList` array and\nthe `columnCount` property, which specifies how many \"generic\" colours (i.e.\ncolumns in the picker) you want to display.\n\n    <paper-swatch-picker column-count=5\n        color-list='[\"#65a5f2\", \"#83be54\",\"#f0d551\", \"#e5943c\", \"#a96ddb\"]'>\n    </paper-swatch-picker>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-swatch-picker-color-size` | Size of each of the color boxes | `20px`\n`--paper-swatch-picker-icon` | Mixin applied to the color picker icon | `{}`",
                    "source": {
                        "module": "@polymer/paper-swatch-picker/paper-swatch-picker.d.ts",
                        "symbol": "PaperSwatchPickerElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "color",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The selected color, as hex (i.e. #ffffff).\nvalue."
                            },
                            {
                                "name": "colorList",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "any[]",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The colors to be displayed. By default, these are the Material Design\ncolors. This array is arranged by \"generic color\", so for example,\nall the reds (from light to dark), then the pinks, then the blues, etc.\nDepending on how many of these generic colors you have, you should\nupdate the `columnCount` property."
                            },
                            {
                                "name": "columnCount",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The number of columns to display in the picker. This corresponds to\nthe number of generic colors (i.e. not counting the light/dark) variants\nof a specific color) you are using in your `colorList`. For example,\nthe Material Design palette has 18 colors"
                            },
                            {
                                "name": "horizontalAlign",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The orientation against which to align the menu dropdown\nhorizontally relative to the dropdown trigger."
                            },
                            {
                                "name": "verticalAlign",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The orientation against which to align the menu dropdown\nvertically relative to the dropdown trigger."
                            },
                            {
                                "name": "icon",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The name of the icon to use for the button used as a dropdown trigger.\nThe name should be of the form: `iconset_name:icon_name`.\nYou must manually import the icon/iconset you wish you use."
                            },
                            {
                                "name": "noink",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the color picker button will not produce a ripple effect when\ninteracted with via the pointer."
                            },
                            {
                                "name": "hostAttributes",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null"
                                    ],
                                    "required": true
                                }
                            }
                        ]
                    }
                },
                {
                    "name": "paper-tab",
                    "description": "`paper-tab` is styled to look like a tab. It should be used in conjunction with\n`paper-tabs`.\n\nExample:\n\n    <paper-tabs selected=\"0\">\n      <paper-tab>TAB 1</paper-tab>\n      <paper-tab>TAB 2</paper-tab>\n      <paper-tab>TAB 3</paper-tab>\n    </paper-tabs>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-tab-ink` | Ink color | `--paper-yellow-a100`\n`--paper-tab` | Mixin applied to the tab | `{}`\n`--paper-tab-content` | Mixin applied to the tab content | `{}`\n`--paper-tab-content-focused` | Mixin applied to the tab content when the tab is focused | `{}`\n`--paper-tab-content-unselected` | Mixin applied to the tab content when the tab is not selected | `{}`\n\nThis element applies the mixin `--paper-font-common-base` but does not import\n`paper-styles/typography.html`. In order to apply the `Roboto` font to this\nelement, make sure you've imported `paper-styles/typography.html`.",
                    "source": {
                        "module": "@polymer/paper-tabs/paper-tab.d.ts",
                        "symbol": "PaperTabElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "link",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the tab will forward keyboard clicks (enter/space) to\nthe first anchor element found in its descendants"
                            },
                            {
                                "name": "_parentNoink",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                }
                            },
                            {
                                "name": "noink",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the element will not produce a ripple effect when interacted\nwith via the pointer."
                            },
                            {
                                "name": "_rippleContainer",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "Element",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "pressed",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the user is currently holding down the button."
                            },
                            {
                                "name": "toggles",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the button toggles the active state with each tap or press\nof the spacebar."
                            },
                            {
                                "name": "active",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the button is a toggle and is currently in the active state."
                            },
                            {
                                "name": "pointerDown",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True if the element is currently being pressed by a \"pointer,\" which\nis loosely defined as mouse or touch input (but specifically excluding\nkeyboard input)."
                            },
                            {
                                "name": "receivedFocusFromKeyboard",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True if the input device that caused the element to receive focus\nwas a keyboard."
                            },
                            {
                                "name": "ariaActiveAttribute",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The aria attribute to be set if the button is a toggle and in the\nactive state."
                            },
                            {
                                "name": "_mouseEventRe",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "RegExp",
                                        "null"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "keyEventTarget",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "EventTarget",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "The EventTarget that will be firing relevant KeyboardEvents. Set it to\n`null` to disable the listeners."
                            },
                            {
                                "name": "stopKeyboardEventPropagation",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents."
                            },
                            {
                                "name": "_boundKeyHandlers",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "any[]",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_imperativeKeyBindings",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "own properties of everything on the \"prototype\"."
                            },
                            {
                                "name": "keyBindings",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "object",
                                    "required": true
                                },
                                "description": "To be used to express what combination of keys  will trigger the relative\ncallback. e.g. `keyBindings: { 'esc': '_onEscPressed'}`"
                            },
                            {
                                "name": "focused",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the element currently has focus."
                            },
                            {
                                "name": "disabled",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the user cannot interact with this element."
                            },
                            {
                                "name": "_oldTabIndex",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Value of the `tabindex` attribute before `disabled` was activated.\n`null` means the attribute was not present."
                            },
                            {
                                "name": "_boundFocusBlurHandler",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "Function",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            }
                        ]
                    }
                },
                {
                    "name": "paper-tabs",
                    "description": "Material design: [Tabs](https://www.google.com/design/spec/components/tabs.html)\n\n`paper-tabs` makes it easy to explore and switch between different views or\nfunctional aspects of an app, or to browse categorized data sets.\n\nUse `selected` property to get or set the selected tab.\n\nExample:\n\n    <paper-tabs selected=\"0\">\n      <paper-tab>TAB 1</paper-tab>\n      <paper-tab>TAB 2</paper-tab>\n      <paper-tab>TAB 3</paper-tab>\n    </paper-tabs>\n\nSee <a href=\"?active=paper-tab\">paper-tab</a> for more information about\n`paper-tab`.\n\nA common usage for `paper-tabs` is to use it along with `iron-pages` to switch\nbetween different views.\n\n    <paper-tabs selected=\"{{selected}}\">\n      <paper-tab>Tab 1</paper-tab>\n      <paper-tab>Tab 2</paper-tab>\n      <paper-tab>Tab 3</paper-tab>\n    </paper-tabs>\n\n    <iron-pages selected=\"{{selected}}\">\n      <div>Page 1</div>\n      <div>Page 2</div>\n      <div>Page 3</div>\n    </iron-pages>\n\nTo use links in tabs, add `link` attribute to `paper-tab` and put an `<a>`\nelement in `paper-tab` with a `tabindex` of -1.\n\nExample:\n\n<pre><code>\n&lt;style is=\"custom-style\">\n  .link {\n    &#64;apply --layout-horizontal;\n    &#64;apply --layout-center-center;\n  }\n&lt;/style>\n\n&lt;paper-tabs selected=\"0\">\n  &lt;paper-tab link>\n    &lt;a href=\"#link1\" class=\"link\" tabindex=\"-1\">TAB ONE&lt;/a>\n  &lt;/paper-tab>\n  &lt;paper-tab link>\n    &lt;a href=\"#link2\" class=\"link\" tabindex=\"-1\">TAB TWO&lt;/a>\n  &lt;/paper-tab>\n  &lt;paper-tab link>\n    &lt;a href=\"#link3\" class=\"link\" tabindex=\"-1\">TAB THREE&lt;/a>\n  &lt;/paper-tab>\n&lt;/paper-tabs>\n</code></pre>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-tabs-selection-bar-color` | Color for the selection bar | `--paper-yellow-a100`\n`--paper-tabs-selection-bar` | Mixin applied to the selection bar | `{}`\n`--paper-tabs` | Mixin applied to the tabs | `{}`\n`--paper-tabs-content` | Mixin applied to the content container of tabs | `{}`\n`--paper-tabs-container` | Mixin applied to the layout container of tabs | `{}`",
                    "source": {
                        "module": "@polymer/paper-tabs/paper-tabs.d.ts",
                        "symbol": "PaperTabsElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "noink",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, ink ripple effect is disabled. When this property is changed,\nall descendant `<paper-tab>` elements have their `noink` property\nchanged to the new value as well."
                            },
                            {
                                "name": "noBar",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the bottom bar to indicate the selected tab will not be shown."
                            },
                            {
                                "name": "noSlide",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the slide effect for the bottom bar is disabled."
                            },
                            {
                                "name": "scrollable",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, tabs are scrollable and the tab width is based on the label\nwidth."
                            },
                            {
                                "name": "fitContainer",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, tabs expand to fit their container. This currently only applies\nwhen scrollable is true."
                            },
                            {
                                "name": "disableDrag",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, dragging on the tabs to scroll is disabled."
                            },
                            {
                                "name": "hideScrollButtons",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, scroll buttons (left/right arrow) will be hidden for scrollable\ntabs."
                            },
                            {
                                "name": "alignBottom",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the tabs are aligned to bottom (the selection bar appears at the\ntop)."
                            },
                            {
                                "name": "autoselect",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, tabs are automatically selected when focused using the\nkeyboard."
                            },
                            {
                                "name": "autoselectDelay",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The delay (in milliseconds) between when the user stops interacting\nwith the tabs through the keyboard and when the focused item is\nautomatically selected (if `autoselect` is true)."
                            },
                            {
                                "name": "_step",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_holdDelay",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_leftHidden",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_rightHidden",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_previousTab",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_tabContainerScrollSize",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                }
                            },
                            {
                                "name": "_isRTL",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                }
                            },
                            {
                                "name": "focusedItem",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "Returns the currently focused item."
                            },
                            {
                                "name": "attrForItemTitle",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The attribute to use on menu items to look up the item title. Typing the\nfirst letter of an item when the menu is open focuses that item. If\nunset, `textContent` will be used."
                            },
                            {
                                "name": "disabled",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "boolean",
                                    "required": true
                                }
                            },
                            {
                                "name": "hostAttributes",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "keyEventTarget",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "EventTarget",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "The EventTarget that will be firing relevant KeyboardEvents. Set it to\n`null` to disable the listeners."
                            },
                            {
                                "name": "stopKeyboardEventPropagation",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents."
                            },
                            {
                                "name": "_boundKeyHandlers",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "any[]",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_imperativeKeyBindings",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "own properties of everything on the \"prototype\"."
                            },
                            {
                                "name": "keyBindings",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "object",
                                    "required": true
                                },
                                "description": "To be used to express what combination of keys  will trigger the relative\ncallback. e.g. `keyBindings: { 'esc': '_onEscPressed'}`"
                            },
                            {
                                "name": "multi",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, multiple selections are allowed."
                            },
                            {
                                "name": "selectedValues",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "any[]",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Gets or sets the selected elements. This is used instead of `selected`\nwhen `multi` is true."
                            },
                            {
                                "name": "selectedItems",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "any[]",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Returns an array of currently selected items."
                            },
                            {
                                "name": "attrForSelected",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If you want to use an attribute value or property of an element for\n`selected` instead of the index, set this to the name of the attribute\nor property. Hyphenated values are converted to camel case when used to\nlook up the property of a selectable element. Camel cased values are\n*not* converted to hyphenated values for attribute lookup. It's\nrecommended that you provide the hyphenated form of the name so that\nselection works in both cases. (Use `attr-or-property-name` instead of\n`attrOrPropertyName`.)"
                            },
                            {
                                "name": "selected",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "number"
                                    ],
                                    "required": true
                                },
                                "description": "Gets or sets the selected element. The default is to use the index of the\nitem."
                            },
                            {
                                "name": "selectedItem",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "Returns the currently selected item."
                            },
                            {
                                "name": "activateEvent",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The event that fires from items when they are selected. Selectable\nwill listen for this event from items and update the selection state.\nSet to empty string to listen to no events."
                            },
                            {
                                "name": "selectable",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "This is a CSS selector string.  If this is set, only items that match the\nCSS selector are selectable."
                            },
                            {
                                "name": "selectedClass",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The class to set on elements when selected."
                            },
                            {
                                "name": "selectedAttribute",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The attribute to set on elements when selected."
                            },
                            {
                                "name": "fallbackSelection",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Default fallback if the selection based on selected with\n`attrForSelected` is not found."
                            },
                            {
                                "name": "items",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "any[]",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The list of items from which a selection can be made."
                            },
                            {
                                "name": "_excludedLocalNames",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The set of excluded elements where the key is the `localName`\nof the element that will be ignored from the item list."
                            },
                            {
                                "name": "_shouldUpdateSelection",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "UNUSED, FOR API COMPATIBILITY"
                            },
                            {
                                "name": "_parentResizable",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The closest ancestor element that implements `IronResizableBehavior`."
                            },
                            {
                                "name": "_notifyingDescendant",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True if this element is currently notifying its descendant elements of\nresize."
                            }
                        ]
                    }
                },
                {
                    "name": "paper-toast",
                    "description": "Material design: [Snackbars &\ntoasts](https://www.google.com/design/spec/components/snackbars-toasts.html)\n\n`paper-toast` provides a subtle notification toast. Only one `paper-toast` will\nbe visible on screen.\n\nUse `opened` to show the toast:\n\nExample:\n\n    <paper-toast text=\"Hello world!\" opened></paper-toast>\n\nAlso `open()` or `show()` can be used to show the toast:\n\nExample:\n\n    <paper-button on-click=\"openToast\">Open Toast</paper-button>\n    <paper-toast id=\"toast\" text=\"Hello world!\"></paper-toast>\n\n    ...\n\n    openToast: function() {\n      this.$.toast.open();\n    }\n\nSet `duration` to 0, a negative number or Infinity to persist the toast on\nscreen:\n\nExample:\n\n    <paper-toast text=\"Terms and conditions\" opened duration=\"0\">\n      <a href=\"#\">Show more</a>\n    </paper-toast>\n\n\n### Styling\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-toast-background-color` | The paper-toast background-color | `#323232`\n`--paper-toast-color` | The paper-toast color | `#f1f1f1`\n\nThis element applies the mixin `--paper-font-common-base` but does not import\n`paper-styles/typography.html`. In order to apply the `Roboto` font to this\nelement, make sure you've imported `paper-styles/typography.html`.",
                    "source": {
                        "module": "@polymer/paper-toast/paper-toast.d.ts",
                        "symbol": "PaperToastElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "duration",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The duration in milliseconds to show the toast.\nSet to `0`, a negative number, or `Infinity`, to disable the\ntoast auto-closing."
                            },
                            {
                                "name": "text",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The text to display in the toast."
                            },
                            {
                                "name": "visible",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "Read-only. Deprecated. Use `opened` from `IronOverlayBehavior`."
                            },
                            {
                                "name": "_canAutoClose",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "Read-only. Can auto-close if duration is a positive finite number."
                            },
                            {
                                "name": "opened",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True if the overlay is currently displayed."
                            },
                            {
                                "name": "canceled",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True if the overlay was canceled when it was last closed."
                            },
                            {
                                "name": "withBackdrop",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to display a backdrop behind the overlay. It traps the focus\nwithin the light DOM of the overlay."
                            },
                            {
                                "name": "noAutoFocus",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Overridden from `IronOverlayBehavior`.\nSet to true to disable auto-focusing the toast or child nodes with\nthe `autofocus` attribute` when the overlay is opened."
                            },
                            {
                                "name": "noCancelOnEscKey",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to disable canceling the overlay with the ESC key."
                            },
                            {
                                "name": "noCancelOnOutsideClick",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Overridden from `IronOverlayBehavior`.\nSet to false to enable closing of the toast by clicking outside it."
                            },
                            {
                                "name": "closingReason",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Contains the reason(s) this overlay was last closed (see\n`iron-overlay-closed`). `IronOverlayBehavior` provides the `canceled`\nreason; implementers of the behavior can provide other reasons in\naddition to `canceled`."
                            },
                            {
                                "name": "restoreFocusOnClose",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to enable restoring of focus when overlay is closed."
                            },
                            {
                                "name": "allowClickThrough",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to allow clicks to go through overlays.\nWhen the user clicks outside this overlay, the click may\nclose the overlay below."
                            },
                            {
                                "name": "alwaysOnTop",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to keep overlay always on top."
                            },
                            {
                                "name": "scrollAction",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Determines which action to perform when scroll outside an opened overlay\nhappens. Possible values: lock - blocks scrolling from happening, refit -\ncomputes the new position on the overlay cancel - causes the overlay to\nclose"
                            },
                            {
                                "name": "_focusedChild",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "Node",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "The node being focused."
                            },
                            {
                                "name": "backdropElement",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "Element",
                                    "required": true
                                },
                                "description": "The backdrop element."
                            },
                            {
                                "name": "_focusNode",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": "Node",
                                    "required": true
                                },
                                "description": "Returns the node to give focus to."
                            },
                            {
                                "name": "_focusableNodes",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": "Node[]",
                                    "required": true
                                },
                                "description": "Array of nodes that can receive focus (overlay included), ordered by\n`tabindex`. This is used to retrieve which is the first and last focusable\nnodes in order to wrap the focus for overlays `with-backdrop`.\n\nIf you know what is your content (specifically the first and last focusable\nchildren), you can override this method to return only `[firstFocusable,\nlastFocusable];`"
                            },
                            {
                                "name": "_parentResizable",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The closest ancestor element that implements `IronResizableBehavior`."
                            },
                            {
                                "name": "_notifyingDescendant",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True if this element is currently notifying its descendant elements of\nresize."
                            },
                            {
                                "name": "sizingTarget",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "Element",
                                    "required": true
                                },
                                "description": "The element that will receive a `max-height`/`width`. By default it is\nthe same as `this`, but it can be set to a child element. This is useful,\nfor example, for implementing a scrolling region inside the element."
                            },
                            {
                                "name": "fitInto",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The element to fit `this` into.\nOverridden from `Polymer.IronFitBehavior`."
                            },
                            {
                                "name": "noOverlap",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Will position the element around the positionTarget without overlapping\nit."
                            },
                            {
                                "name": "positionTarget",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "Element",
                                    "required": true
                                },
                                "description": "The element that should be used to position the element. If not set, it\nwill default to the parent node."
                            },
                            {
                                "name": "horizontalAlign",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The orientation against which to align the dropdown content\nhorizontally relative to `positionTarget`.\nOverridden from `Polymer.IronFitBehavior`."
                            },
                            {
                                "name": "verticalAlign",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The orientation against which to align the dropdown content\nvertically relative to `positionTarget`.\nOverridden from `Polymer.IronFitBehavior`."
                            },
                            {
                                "name": "dynamicAlign",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, it will use `horizontalAlign` and `verticalAlign` values as\npreferred alignment and if there's not enough space, it will pick the\nvalues which minimize the cropping."
                            },
                            {
                                "name": "horizontalOffset",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "A pixel value that will be added to the position calculated for the\ngiven `horizontalAlign`, in the direction of alignment. You can think\nof it as increasing or decreasing the distance to the side of the\nscreen given by `horizontalAlign`.\n\nIf `horizontalAlign` is \"left\" or \"center\", this offset will increase or\ndecrease the distance to the left side of the screen: a negative offset\nwill move the dropdown to the left; a positive one, to the right.\n\nConversely if `horizontalAlign` is \"right\", this offset will increase\nor decrease the distance to the right side of the screen: a negative\noffset will move the dropdown to the right; a positive one, to the left."
                            },
                            {
                                "name": "verticalOffset",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "A pixel value that will be added to the position calculated for the\ngiven `verticalAlign`, in the direction of alignment. You can think\nof it as increasing or decreasing the distance to the side of the\nscreen given by `verticalAlign`.\n\nIf `verticalAlign` is \"top\" or \"middle\", this offset will increase or\ndecrease the distance to the top side of the screen: a negative offset\nwill move the dropdown upwards; a positive one, downwards.\n\nConversely if `verticalAlign` is \"bottom\", this offset will increase\nor decrease the distance to the bottom side of the screen: a negative\noffset will move the dropdown downwards; a positive one, upwards."
                            },
                            {
                                "name": "autoFitOnAttach",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to auto-fit on attach."
                            },
                            {
                                "name": "expandSizingTargetForScrollbars",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true and scrollbars are added to `sizingTarget` after it is\npositioned, the size of the added scrollbars will be added to its\n`maxWidth` and `maxHeight`."
                            },
                            {
                                "name": "_fitInfo",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "object",
                                        "null"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_fitWidth",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                }
                            },
                            {
                                "name": "_fitHeight",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                }
                            },
                            {
                                "name": "_fitLeft",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                }
                            },
                            {
                                "name": "_fitTop",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                }
                            },
                            {
                                "name": "_defaultPositionTarget",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "The element that should be used to position the element,\nif no position target is configured."
                            },
                            {
                                "name": "_localeHorizontalAlign",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "The horizontal align value, accounting for the RTL/LTR text direction."
                            }
                        ]
                    }
                },
                {
                    "name": "paper-toggle-button",
                    "description": "Material design: [Switch](https://www.google.com/design/spec/components/selection-controls.html#selection-controls-switch)\n\n`paper-toggle-button` provides a ON/OFF switch that user can toggle the state\nby tapping or by dragging the switch.\n\nExample:\n\n    <paper-toggle-button></paper-toggle-button>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-toggle-button-unchecked-bar-color` | Slider color when the input is not checked | `#000000`\n`--paper-toggle-button-unchecked-button-color` | Button color when the input is not checked | `--paper-grey-50`\n`--paper-toggle-button-unchecked-ink-color` | Selected/focus ripple color when the input is not checked | `--dark-primary-color`\n`--paper-toggle-button-checked-bar-color` | Slider button color when the input is checked | `--primary-color`\n`--paper-toggle-button-checked-button-color` | Button color when the input is checked | `--primary-color`\n`--paper-toggle-button-checked-ink-color` | Selected/focus ripple color when the input is checked | `--primary-color`\n`--paper-toggle-button-invalid-bar-color` | Slider button color when the input is invalid | `--error-color`\n`--paper-toggle-button-invalid-button-color` | Button color when the input is invalid | `--error-color`\n`--paper-toggle-button-invalid-ink-color` | Selected/focus ripple color when the input is invalid | `--error-color`\n`--paper-toggle-button-unchecked-bar` | Mixin applied to the slider when the input is not checked | `{}`\n`--paper-toggle-button-unchecked-button` | Mixin applied to the slider button when the input is not checked | `{}`\n`--paper-toggle-button-unchecked-ink` | Mixin applied to the ripple when the input is not checked | `{}`\n`--paper-toggle-button-checked-bar` | Mixin applied to the slider when the input is checked | `{}`\n`--paper-toggle-button-checked-button` | Mixin applied to the slider button when the input is checked | `{}`\n`--paper-toggle-button-checked-ink` | Mixin applied to the ripple when the input is checked | `{}`\n`--paper-toggle-button-label-color` | Label color | `--primary-text-color`\n`--paper-toggle-button-label-spacing` | Spacing between the label and the button | `8px`\n\nThis element applies the mixin `--paper-font-common-base` but does not import `paper-styles/typography.html`.\nIn order to apply the `Roboto` font to this element, make sure you've imported `paper-styles/typography.html`.",
                    "source": {
                        "module": "@polymer/paper-toggle-button/paper-toggle-button.d.ts",
                        "symbol": "PaperToggleButtonElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "checked",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Gets or sets the state, `true` is checked and `false` is unchecked."
                            },
                            {
                                "name": "validator",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Name of the validator to use."
                            },
                            {
                                "name": "invalid",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True if the last call to `validate` is invalid."
                            },
                            {
                                "name": "_validator",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "Recompute this every time it's needed, because we don't know if the\nunderlying IronValidatableBehaviorMeta has changed."
                            },
                            {
                                "name": "name",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The name of this element."
                            },
                            {
                                "name": "value",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Overriden from IronFormElementBehavior"
                            },
                            {
                                "name": "required",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set to true to mark the input as required. If used in a form, a\ncustom element that uses this behavior should also use\nIronValidatableBehavior and define a custom validation method.\nOtherwise, a `required` element will always be considered valid.\nIt's also strongly recommended to provide a visual style for the element\nwhen its value is invalid."
                            },
                            {
                                "name": "noink",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the element will not produce a ripple effect when interacted\nwith via the pointer."
                            },
                            {
                                "name": "_rippleContainer",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "Element",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "focused",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the element currently has focus."
                            },
                            {
                                "name": "disabled",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the user cannot interact with this element."
                            },
                            {
                                "name": "_oldTabIndex",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Value of the `tabindex` attribute before `disabled` was activated.\n`null` means the attribute was not present."
                            },
                            {
                                "name": "_boundFocusBlurHandler",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "Function",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "pressed",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the user is currently holding down the button."
                            },
                            {
                                "name": "toggles",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the button toggles the active state with each tap or press\nof the spacebar."
                            },
                            {
                                "name": "active",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, the button is a toggle and is currently in the active state."
                            },
                            {
                                "name": "pointerDown",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True if the element is currently being pressed by a \"pointer,\" which\nis loosely defined as mouse or touch input (but specifically excluding\nkeyboard input)."
                            },
                            {
                                "name": "receivedFocusFromKeyboard",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "True if the input device that caused the element to receive focus\nwas a keyboard."
                            },
                            {
                                "name": "ariaActiveAttribute",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The aria attribute to be set if the button is a toggle and in the\nactive state."
                            },
                            {
                                "name": "_mouseEventRe",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "RegExp",
                                        "null"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "keyEventTarget",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "EventTarget",
                                        "null"
                                    ],
                                    "required": true
                                },
                                "description": "The EventTarget that will be firing relevant KeyboardEvents. Set it to\n`null` to disable the listeners."
                            },
                            {
                                "name": "stopKeyboardEventPropagation",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents."
                            },
                            {
                                "name": "_boundKeyHandlers",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "any[]",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "_imperativeKeyBindings",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "own properties of everything on the \"prototype\"."
                            },
                            {
                                "name": "keyBindings",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "object",
                                    "required": true
                                },
                                "description": "To be used to express what combination of keys  will trigger the relative\ncallback. e.g. `keyBindings: { 'esc': '_onEscPressed'}`"
                            }
                        ]
                    }
                },
                {
                    "name": "paper-toolbar",
                    "description": "*This element has been deprecated in favor of\n[app-layout](https://github.com/PolymerElements/app-layout).**\n\nMaterial design:\n[Toolbars](https://www.google.com/design/spec/components/toolbars.html)\n\n`paper-toolbar` is a horizontal bar containing items that can be used for\nlabel, navigation, search and actions.  The items placed inside the\n`paper-toolbar` are projected into a `class=\"horizontal center layout\"`\ncontainer inside of `paper-toolbar`'s Shadow DOM.  You can use flex attributes\nto control the items' sizing.\n\nExample:\n\n```html\n<paper-toolbar>\n  <paper-icon-button slot=\"top\" icon=\"menu\"\non-tap=\"menuAction\"></paper-icon-button> <div slot=\"top\"\nclass=\"title\">Title</div> <paper-icon-button slot=\"top\" icon=\"more-vert\"\non-tap=\"moreAction\"></paper-icon-button>\n</paper-toolbar>\n```\n\n`paper-toolbar` has a standard height, but can made be taller by setting `tall`\nclass on the `paper-toolbar`. This will make the toolbar 3x the normal height.\n\n```html\n<paper-toolbar class=\"tall\">\n  <paper-icon-button slot=\"top\" icon=\"menu\"></paper-icon-button>\n</paper-toolbar>\n```\n\nApply `medium-tall` class to make the toolbar medium tall.  This will make the\ntoolbar 2x the normal height.\n\n```html\n<paper-toolbar class=\"medium-tall\">\n  <paper-icon-button slot=\"top\" icon=\"menu\"></paper-icon-button>\n</paper-toolbar>\n```\n\nWhen `tall`, items can pin to either the top (default), middle or bottom. Use\n`middle` slot for middle content and `bottom` slot for bottom content.\n\n```html\n<paper-toolbar class=\"tall\">\n  <paper-icon-button slot=\"top\" icon=\"menu\"></paper-icon-button>\n  <div slot=\"middle\" class=\"title\">Middle Title</div>\n  <div slot=\"bottom\" class=\"title\">Bottom Title</div>\n</paper-toolbar>\n```\n\nFor `medium-tall` toolbar, the middle and bottom contents overlap and are\npinned to the bottom. But `middleJustify` and `bottomJustify` attributes are\nstill honored separately.\n\nTo make an element completely fit at the bottom of the toolbar, use `fit` along\nwith `bottom`.\n\n```html\n<paper-toolbar class=\"tall\">\n  <div id=\"progressBar\" slot=\"bottom\" class=\"fit\"></div>\n</paper-toolbar>\n```\n\nWhen inside a `paper-header-panel` element with `mode=\"waterfall-tall\"`,\nthe class `.animate` is toggled to animate the height change in the toolbar.\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-toolbar-title`      | Mixin applied to the title of the toolbar | `{}`\n`--paper-toolbar-background` | Toolbar background color     | `--primary-color`\n`--paper-toolbar-color`      | Toolbar foreground color     | `--dark-theme-text-color`\n`--paper-toolbar-height`     | Custom height for toolbar    | `64px`\n`--paper-toolbar-sm-height`  | Custom height for small screen toolbar | `56px`\n`--paper-toolbar`            | Mixin applied to the toolbar | `{}`\n`--paper-toolbar-content`    | Mixin applied to the content section of the toolbar | `{}`\n`--paper-toolbar-medium`     | Mixin applied to medium height toolbar | `{}`\n`--paper-toolbar-tall`       | Mixin applied to tall height toolbar | `{}`\n`--paper-toolbar-transition` | Transition applied to the `.animate` class | `height 0.18s ease-in`\n\n### Accessibility\n\n`<paper-toolbar>` has `role=\"toolbar\"` by default. Any elements with the class\n`title` will be used as the label of the toolbar via `aria-labelledby`.\n\n### Breaking change in 2.0\n\nIn Polymer 1.x, default content used to be distribuited automatically to the\ntop toolbar. In v2, the you must set `slot=\"top\"` on the default content to\ndistribuite the content to the top toolbar.",
                    "source": {
                        "module": "@polymer/paper-toolbar/paper-toolbar.d.ts",
                        "symbol": "PaperToolbarElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "bottomJustify",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Controls how the items are aligned horizontally when they are placed\nat the bottom.\nOptions are `start`, `center`, `end`, `justified` and `around`."
                            },
                            {
                                "name": "justify",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Controls how the items are aligned horizontally.\nOptions are `start`, `center`, `end`, `justified` and `around`."
                            },
                            {
                                "name": "middleJustify",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Controls how the items are aligned horizontally when they are placed\nin the middle.\nOptions are `start`, `center`, `end`, `justified` and `around`."
                            },
                            {
                                "name": "hostAttributes",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null"
                                    ],
                                    "required": true
                                }
                            }
                        ]
                    }
                },
                {
                    "name": "paper-tooltip",
                    "description": "Material design:\n[Tooltips](https://www.google.com/design/spec/components/tooltips.html)\n`<paper-tooltip>` is a label that appears on hover and focus when the user\nhovers over an element with the cursor or with the keyboard. It will be centered\nto an anchor element specified in the `for` attribute, or, if that doesn't\nexist, centered to the parent node containing it.\nExample:\n    <div style=\"display:inline-block\">\n      <button>Click me!</button>\n      <paper-tooltip>Tooltip text</paper-tooltip>\n    </div>\n    <div>\n      <button id=\"btn\">Click me!</button>\n      <paper-tooltip for=\"btn\">Tooltip text</paper-tooltip>\n    </div>\nThe tooltip can be positioned on the top|bottom|left|right of the anchor using\nthe `position` attribute. The default position is bottom.\n    <paper-tooltip for=\"btn\" position=\"left\">Tooltip text</paper-tooltip>\n    <paper-tooltip for=\"btn\" position=\"top\">Tooltip text</paper-tooltip>\n\n### Styling\nThe following custom properties and mixins are available for styling:\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-tooltip-background` | The background color of the tooltip | `#616161`\n`--paper-tooltip-opacity` | The opacity of the tooltip | `0.9`\n`--paper-tooltip-text-color` | The text color of the tooltip | `white`\n`--paper-tooltip` | Mixin applied to the tooltip | `{}`\n`--paper-tooltip-delay-in` | Delay before tooltip starts to fade in | `500`\n`--paper-tooltip-delay-out` | Delay before tooltip starts to fade out | `0`\n`--paper-tooltip-duration-in` | Timing for animation when showing tooltip | `500`\n`--paper-tooltip-duration-out` | Timing for animation when hiding tooltip | `0`\n`--paper-tooltip-animation` | Mixin applied to the tooltip animation | `{}`",
                    "source": {
                        "module": "@polymer/paper-tooltip/paper-tooltip.d.ts",
                        "symbol": "PaperTooltipElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "for",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The id of the element that the tooltip is anchored to. This element\nmust be a sibling of the tooltip. If this property is not set,\nthen the tooltip will be centered to the parent node containing it."
                            },
                            {
                                "name": "manualMode",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Set this to true if you want to manually control when the tooltip\nis shown or hidden."
                            },
                            {
                                "name": "position",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "Positions the tooltip to the top, right, bottom, left of its content."
                            },
                            {
                                "name": "fitToVisibleBounds",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "If true, no parts of the tooltip will ever be shown offscreen."
                            },
                            {
                                "name": "offset",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The spacing between the top of the tooltip and the element it is\nanchored to."
                            },
                            {
                                "name": "marginTop",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "This property is deprecated, but left over so that it doesn't\nbreak exiting code. Please use `offset` instead. If both `offset` and\n`marginTop` are provided, `marginTop` will be ignored."
                            },
                            {
                                "name": "animationDelay",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "number",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The delay that will be applied before the `entry` animation is\nplayed when showing the tooltip."
                            },
                            {
                                "name": "animationEntry",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The animation that will be played on entry.  This replaces the\ndeprecated animationConfig.  Entries here will override the\nanimationConfig settings.  You can enter your own animation\nby setting it to the css class name."
                            },
                            {
                                "name": "animationExit",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "string",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "The animation that will be played on exit.  This replaces the\ndeprecated animationConfig.  Entries here will override the\nanimationConfig settings.  You can enter your own animation\nby setting it to the css class name."
                            },
                            {
                                "name": "animationConfig",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                },
                                "description": "This property is deprecated.  Use --paper-tooltip-animation to change the\nanimation. The entry and exit animations that will be played when showing\nand hiding the tooltip. If you want to override this, you must ensure\nthat your animationConfig has the exact format below."
                            },
                            {
                                "name": "_showing",
                                "required": false,
                                "priority": "lowest",
                                "value": {
                                    "type": [
                                        "boolean",
                                        "null",
                                        "undefined"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "hostAttributes",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [
                                        "object",
                                        "null"
                                    ],
                                    "required": true
                                }
                            },
                            {
                                "name": "target",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": [],
                                    "required": true
                                },
                                "description": "Returns the target element that this tooltip is anchored to. It is\neither the element given by the `for` attribute, or the immediate parent\nof the tooltip."
                            }
                        ]
                    }
                },
                {
                    "name": "prism-highlighter",
                    "description": "Syntax highlighting via [Prism](http://prismjs.com/).\n\nPlace a `<prism-highlighter>` in your document, preferably as a direct child of\n`<body>`. It will listen for `syntax-highlight` events on its parent element,\nand annotate the code being provided via that event.\n\nThe `syntax-highlight` event's detail is expected to have a `code` property\ncontaining the source to highlight. The event detail can optionally contain a\n`lang` property, containing a string like `\"html\"`, `\"js\"`, etc.\n\nThis flow is supported by\n[`<marked-element>`](https://github.com/PolymerElements/marked-element).",
                    "source": {
                        "module": "@polymer/prism-element/prism-highlighter.d.ts",
                        "symbol": "PrismHighlighterElement"
                    },
                    "js": {
                        "properties": [
                            {
                                "name": "languages",
                                "required": false,
                                "priority": "normal",
                                "value": {
                                    "type": "object",
                                    "required": true
                                },
                                "description": "Adds languages outside of the core Prism languages.\n\nPrism includes a few languages in the core library:\n  - JavaScript\n  - Markup\n  - CSS\n  - C-Like\nUse this property to extend the core set with other Prism\ncomponents and custom languages.\n\nExample:\n  ```\n  <!-- with languages = {'custom': myCustomPrismLang}; -->\n  <!-- or languages = Prism.languages; -->\n  <prism-highlighter languages=\"[[languages]]\"></prism-highlighter>\n  ```"
                            }
                        ]
                    }
                }
            ]
        },
        "css": {
            "properties": []
        }
    }
}
